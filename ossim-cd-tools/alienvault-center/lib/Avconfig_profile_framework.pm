# License:
#
#  Copyright (c) 2011-2014 AlienVault
#  All rights reserved.
#
#  This package is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 dated June, 1991.
#  You may not use, modify or distribute this program under any other version
#  of the GNU General Public License.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this package; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA  02110-1301  USA
#
#
#  On Debian GNU/Linux systems, the complete text of the GNU General
#  Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
#  Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt
#

package Avconfig_profile_framework;

use v5.10;
use strict;
use warnings;
no warnings 'experimental::smartmatch';
#use diagnostics;

use AV::ConfigParser;
use AV::Log;
use Avtools;

use Config::Tiny;
use POSIX qw/strftime/;
use Time::Local;
use File::Copy qw/cp copy move/;
use List::MoreUtils qw(uniq);
use Perl6::Slurp;

my $script_msg                  = "# Automatically generated by ossim-reconfig scripts. DO NOT TOUCH!";
my $ossim_setup_conf_file       = '/etc/ossim/ossim_setup.conf';
my $framework_file              = "/etc/ossim/framework/ossim.conf";
my $defaultapachecertificate    = "/etc/ssl/certs/ossimweb.pem";
my $SSLCertificateFiles;
my $nfsenconf                   = "/etc/nfsen/nfsen.conf";
my $nagiosapache_file           = "/etc/nagios3/apache2.conf";
my $nagios_cfg_file             = "/etc/nagios3/nagios.cfg";
my $frameworkapache_file        = "/etc/apache2/sites-available/ossim-framework.conf";
my $defaultapache_file          = "/etc/apache2/sites-available/alienvault.conf";
my $defaultapachehttps_file     = "/etc/apache2/sites-available/alienvault-ssl.conf";
my $defaultapachesecurity_file  = "/etc/apache2/conf-available/z-security-alienvault.conf";
my $add_hosts                   = "yes";
my $ossec_cfg                   = "/var/ossec/etc/ossec.conf";
my $ldap_client_file            = "/etc/ldap/ldap.conf";
my $squidconf                   = "/etc/squid/squid.conf";
my $iptables_rules_framework    = "/etc/iptables/rules009-framework.iptables";

my $avgroup                     = "alienvault";

my %reset;
my %config;
my %config_last;

# FIXME: redirect $stdout, $stderr globally
my ( $stdout, $stderr ) = ( q{}, q{} );

my $profile_sensor   = 0;
my $profile_database = 0;


my $server_hostname;
my $server_port;
my $server_ip;
my $framework_port;
my $framework_host;
my $db_host;
my $db_pass;

my $ossim_user;
my $snort_user;
my $osvdb_user;

sub config_profile_framework() {

    %config      = AV::ConfigParser::current_config;
    %config_last = AV::ConfigParser::last_config;

    $server_hostname = $config{'hostname'};
    $server_port     = "40001";
    $server_ip       = $config{'server_ip'};
    $framework_port  = $config{'framework_port'};
    $framework_host  = $config{'framework_ip'};
    $db_host         = $config{'database_ip'};
    $db_pass         = $config{'database_pass'};

    $ossim_user = "root";
    $snort_user = "root";
    $osvdb_user = "root";

    my @profiles_arr = split( /,\s*/, $config{'profile'} );
    for my $profile (@profiles_arr) {
        given ($profile) {
            when (m/Sensor/)   { $profile_sensor   = 1; }
            when (m/Database/) { $profile_database = 1; }
        }
    }

    console_log("-------------------------------------------------------------------------------");
    console_log("Configuring Framework Profile");
    dp("Configuring Framework Profile");

    user_data_add_to_group();
    configure_framework_file();
    configure_adjusting_permissions();
    configure_apache_rewrite_modules();
    configure_apache_auth_module();
    configure_apache_disable_autoindex_module();
    configure_apache_https();
    configure_nagios();
    configure_nagios_stylesheets();
    configure_nagios_apache_configuration();
    configure_framework_monit();
    configure_nfsen();
    configure_nfsen_monit();
    configure_nfsen_replace_name_uuid();
    configure_apache_configuration();
    configure_apache_ssl_config_file();
    configure_apache_configuration_files();
    configure_default_security_apache();
    configure_apache_dir_conf(); # revisar
    configure_unlink_apache2_doc();
    configure_update_snare_client(); # fix
    configure_add_framework_host_in_db();
    configure_nfsen_rebuild_hierarchy_on_firstinit();
    configure_timezone();
    configure_vuln_scanner ();
    configure_compliance();
    settings_from_ossec_initscript_for_web();
    configure_ldap_client_file();

    # config squid for alienvault-center
    config_squid();

    # config firewall rules for squid
    config_firewall_for_squid();

    # Encrypt DB passwords
    aes_encrypt_db();

    # Remember reset
    $reset{'ossim-framework'} = 1;
    $reset{'apache2'}         = 1;
    $reset{'iptables'}     = 1;
    $reset{'nagios3'}      = 1;
    $reset{'monit'}        = 1;
    $reset{'nfsen'}        = 1;
    $reset{'squid'}        = 1;
    $reset{'asec-machete'} = 1;
    $reset{'asec-mixter'}  = 1;

    return %reset;

}

### Function

sub aes_encrypt_db() {

    verbose_log("Framework Profile: (sub aes_encrypt_db)");

    my $conn    = Avtools::get_database();

    my $key_str   = "";
    my $v_key_str = 0;

    ## Read key ----
    # from file: --
    #	if ( -f "/etc/ossim/framework/db_encryption_key" ) {
    #		$key_str = `cat /etc/ossim/framework/db_encryption_key| grep "^key=" |awk -F'=' '{print \$2}'`;
    #		$key_str=~ s/\n//g;
    #	}
    #--
    # from db: --
    # WARN ! key for decrypt !
    #TODO: Use av-centerd SOAP to pass key from framework to remote reconfig command, or run db related only from fw...
    my $query
        = "SELECT `value` from `alienvault`.`config` WHERE `conf` = 'encryption_key';";
    my $sth = $conn->prepare($query);


    $sth->execute();
    $key_str = $sth->fetchrow_array();
    $key_str =~ s/(\n|\e)//g;

    #debug_log("key_str:$key_str");
    if ( $key_str
        =~ m/^[0-9A-Fa-f]{8}[\-][0-9A-Fa-f]{4}[\-][0-9A-Fa-f]{4}[\-][0-9A-Fa-f]{4}[\-][0-9A-Fa-f]{12}$/
    )
    {
        $v_key_str = 1;
    }
    else {
        $v_key_str = 0;
        verbose_log("key not found");
    }

    if ( $v_key_str == 1 ) {
        verbose_log("Framework Profile: Update password (AES_ENCRYPT)");

        my @query_array = (
            "UPDATE alienvault.config SET `value` = AES_ENCRYPT('$db_pass','$key_str') WHERE `value` = '$db_pass' AND `conf` = 'bi_pass';",
            "UPDATE alienvault.config SET `value` = AES_ENCRYPT('$db_pass','$key_str') WHERE `value` = '$db_pass' AND `conf` = 'backup_pass';",
            "UPDATE alienvault.databases SET `pass` = AES_ENCRYPT('$db_pass','$key_str') WHERE `pass` = '$db_pass';",
        );
        foreach (@query_array) {
            Avtools::execute_query_without_return("$_");
        }
    }

}

sub user_data_add_to_group(){

    verbose_log("Framework Profile: Add www-data user to alienvault group");
    system("usermod -a -G alienvault www-data");

}

sub configure_framework_file(){
    # ossim.conf

    verbose_log("Framework Profile: Updating Framework configuration file");

    my $command
        = "sed -i \"s:ossim_pass=.*:ossim_pass=$db_pass:\" $framework_file";
    debug_log("$command");
    system($command);

    $command
        = "sed -i \"s:ossim_host=.*:ossim_host=$db_host:\" $framework_file";
    debug_log("$command");
    system($command);
}



sub configure_adjusting_permissions(){
    verbose_log("Framework Profile: Adjusting permissions");

    # Framework specific directories
    system("chmod 0775 /etc/ossim");
    system("chown -R www-data:${avgroup} /etc/ossim/framework/");

    system("chmod 0775 /etc/ossim/server");

    #    system("chmod 0664 /etc/ossim/server/*");
    system("find /etc/ossim/server -type f -exec chmod -v 0664 {} \\;");
    system("find /etc/ossim/server -type d -exec chmod -v 0775 {} \\;");

    # Do not allow to read server configuration file to "others"
    system("chown root:alienvault /etc/ossim/server/config.xml");
    system("chmod o-rwx /etc/ossim/server/config.xml");

    system(
        "[ -e /tmp/default_filter.cache ] && chown -R www-data:${avgroup} /tmp/default_filter.cache || touch /tmp/default_filter.cache ; chown -R www-data:${avgroup} /tmp/default_filter.cache"
    );
    system(
        "[ -e /var/log/php-ids.log ] && chown -R www-data:${avgroup} /var/log/php-ids.log || touch /var/log/php-ids.log ; chown -R www-data:${avgroup} /var/log/php-ids.log"
    );
    system("mkdir -p /var/ossim/logs/searches");
    system("chmod 0755 /var/ossim/logs/searches");
    system("chown -R www-data /var/ossim/logs/searches");
}

sub configure_apache_rewrite_modules(){
    verbose_log("Framework Profile: Configuring Apache rewrite module");
    system("a2enmod rewrite  $stdout $stderr ");
    system("a2enmod proxy  $stdout $stderr ");
    system("a2dismod proxy_html $stdout $stderr");
    system("rm -f /etc/apache2/mods-enabled/proxy_html.conf $stdout $stderr");
    system("a2enmod proxy_http $stdout $stderr");
    system("a2enmod headers $stdout $stderr ");
    verbose_log("Framework Profile: Configuring Apache SSL module");
    system("a2enmod ssl $stdout $stderr ");
}

sub configure_apache_auth_module(){
    verbose_log("Framework Profile: Configuring Apache auth module");
    system("a2enmod authnz_external $stdout $stderr ");
}

sub configure_apache_disable_autoindex_module(){
    verbose_log("Framework Profile: Disabling Apache autoindex module");
    system("a2dismod -f autoindex $stdout $stderr ");
}

sub configure_apache_https(){
    if ( $config{'framework_https'} eq "yes" ) {
        verbose_log("Framework Profile: Enabling HTTPS by default:");
        system("a2enmod ssl $stdout $stderr ");
        system("a2ensite default-ssl $stdout $stderr ");
        verbose_log("Framework Profile: Disabling HTTP default site");
        system("a2dissite 000-default $stdout $stderr ");

        #
        # user custom cert and key from ddbb
        #
        $config{'framework_https_pem'} = `echo 'select value from config where conf="framework_https_pem"'|ossim-db|tail -1|tr -d '\n'`;
        $config{'framework_https_pem'} =~ s/[\n\t\r\s]+//g;
        $config{'framework_https_pem'} = 'default' if ($config{'framework_https_pem'} eq '');

        $config{'framework_https_crt'} = `echo 'select value from config where conf="framework_https_crt"'|ossim-db|tail -1|tr -d '\n'`;
        $config{'framework_https_crt'} =~ s/[\n\t\r\s]+//g;
        $config{'framework_https_crt'} = 'default' if ($config{'framework_https_crt'} eq '');

        $config{'framework_https_ca_cert'} = `echo 'select value from config where conf="framework_https_ca_cert"'|ossim-db|tail -1|tr -d '\n'`;
        $config{'framework_https_ca_cert'} =~ s/[\n\t\r\s]+//g;
        $config{'framework_https_ca_cert'} = 'default' if ($config{'framework_https_ca_cert'} eq '');

        my $user_key_found = 0;
        if (($config{'framework_https_pem'} ne "default" ) && ($config{'framework_https_crt'} ne "default"))
        {
            # key file

            if ( -f "$config{'framework_https_pem'}" ) {
                console_log("Framework Profile: Apache user key found.");
                $user_key_found = 1;
            }
            else {
                console_log(
                    "Framework Profile: Apache user key NOT found, use default."
                );
                $user_key_found = 0;

            }

            # cert file

            if ( -f "$config{'framework_https_crt'}" ) {
                console_log("Framework Profile: Apache user cert found.");
                $user_key_found = 1;
            }
            else {
                console_log(
                    "Framework Profile: Apache user cert NOT found, use default."
                );
                $user_key_found = 0;

            }
        }

        if ( $user_key_found == 0 ) {
            if ( -f "$defaultapachecertificate" ) {
                verbose_log(
                    "Framework Profile: Configuring certificate $defaultapachecertificate for https"
                );
            }
            else {
                verbose_log(
                    "Framework Profile: Generating certificate ($defaultapachecertificate) for https"
                );
                system(
                    "sed -e s#\@HostName\@#\"$config{'hostname'}\"# /usr/share/ssl-cert/ssleay.cnf > /tmp/crt1.x"
                );
                system(
                    "sed -e s#\@SubjectAltName\@#\"email:$config{'email_notify'}\"# /tmp/crt1.x > /tmp/crt.x"
                );
                system(
                    "openssl req -config /tmp/crt.x -new -x509 -days 3650 -nodes -out $defaultapachecertificate -keyout $defaultapachecertificate $stdout $stderr "
                );
                system(
                    "chmod 644 $defaultapachecertificate $stdout $stderr ");
                system(
                    "cd /etc/ssl/certs/ ; ln -sf $defaultapachecertificate \$(openssl x509 -hash -noout -in $defaultapachecertificate)"
                );

            }
        }

        # append for default-ssl

        $SSLCertificateFiles = "SSLCertificateFile    $defaultapachecertificate";

        if ( $user_key_found == 1 ) {
            $SSLCertificateFiles = "SSLCertificateFile     $config{'framework_https_crt'}\n\tSSLCertificateKeyFile  $config{'framework_https_pem'}";

            if ( $config{'framework_https_ca_cert'} ne "default" && -f "$config{'framework_https_ca_cert'}" ) {
                $SSLCertificateFiles = "$SSLCertificateFiles\n\tSSLCACertificateFile   $config{'framework_https_ca_cert'}";

            }

        }

    }
    else {
        verbose_log("Framework Profile: Enabling HTTP default site");
        system("a2ensite default $stdout $stderr ");

        verbose_log("Framework Profile: Disabling HTTPS default-ssl site");
        system("a2dissite default-ssl $stdout $stderr ");
        system("a2dismod ssl $stdout $stderr ");
    }


}

sub configure_nagios(){

    # nagios3 #1065
    my $nagios_cgi_cfg = "/etc/nagios3/cgi.cfg";
    my $command_output
        = `grep use_authentication $nagios_cgi_cfg | cut -f 2 -d \"=\"`;

    #print ($command_output);
    if ( $command_output ne "1" ) {
        my $command = "sed -i \"s:use_authentication.*:use_authentication=1:\" $nagios_cgi_cfg";
        system($command);
    }

    my $command = "sed -i s:#default_user_name=guest:default_user_name=nagiosadmin: $nagios_cgi_cfg";
    system ($command);
    debug_log($command);

    system("chown -R nagios:www-data /var/lib/nagios3/");
    system("chmod g+rwx /var/lib/nagios3/rw/");
    system("dpkg-statoverride --force --update --add nagios www-data 751 /var/lib/nagios3");

    verbose_log("Framework Profile: Updating Nagios configuration for chk-livestatus");
    system("echo \"REPLACE INTO alienvault.config (conf, value) VALUES ('frameworkd_nagiosmklivemanager', 1);\" | ossim-db $stdout $stderr");

    if ( -f "$nagios_cfg_file" ) {
        verbose_log("Framework Profile: Updating $nagios_cfg_file (broker_module)");
        my $command = "sed -i 's:#broker_module=/somewhere/module2.o arg1 arg2=3 debug=0:broker_module=/usr/lib/check_mk/livestatus.o /var/lib/nagios3/rw/live:' $nagios_cfg_file";
        debug_log($command);
        system($command);
        $command = "sed -i 's:broker_module=.*:broker_module=/usr/lib/check_mk/livestatus.o /var/lib/nagios3/rw/live:' $nagios_cfg_file";
        debug_log($command);
        system($command);
        $command = "sed -i 's:check_external_commands=0:check_external_commands=1:' $nagios_cfg_file";
        debug_log($command);
        system($command);
    }
    else {
        console_log("Framework Profile: $nagios_cfg_file not found");
    }


    verbose_log("Framework Profile: Updating Nagios configuration");

    # 2187
    if ( -f "/etc/nagios3/conf.d/host-gateway_nagios3.cfg" ) {
        system("rm -f /etc/nagios3/conf.d/host-gateway_nagios3.cfg");
    }

    # although permissions are correctly 'ossim-reconfigured' nagios.cmd will be set to the configured group (nagios)
    verbose_log("Framework Profile: Add www-data to nagios group, for nagios commands)");
    system("adduser www-data nagios");
}


sub configure_nagios_stylesheets(){
    # stylesheets

    if ( -d "/usr/share/ossim-installer/stylesheets" ) {
        verbose_log("Framework Profile: Configuring Nagios stylesheets");
        system("cp -arf /usr/share/ossim-installer/stylesheets/*  /etc/nagios3/stylesheets/");
    }
}


sub configure_framework_monit(){

    # monit

    # Custom monit files, and split monit files by service:
    if ( !-d "/etc/monit/conf.d/" || !-d "/etc/monit/alienvault/" ) {
        system("mkdir -p /etc/monit/conf.d/ >/dev/null 2>&1 &");
        system("mkdir -p /etc/monit/alienvault/ >/dev/null 2>&1 &");
    }
}

sub configure_nfsen(){

    #pcatalina
    my $newnfsenconf = "/etc/nfsen.conf";

    #Sanity checks
    if ( not -d "/etc/nfsen" ) {
        if ( -f "/etc/nfsen" ) {
            warning("/etc/nfsen is a normal file, moving to /etc/nfsen.bak");
            rename( "/etc/nfsen", "/etc/nfsen.bak" )
                or warning(
                "Unable to move file /etc/nfsen -> /etc/nfsen.bak. $!");
        }
        mkdir "/etc/nfsen"
            or warning("Unable to create /etc/nfsen/ folder. $!");
    }

    if ( -l $nfsenconf ) {
        unlink $newnfsenconf
            or warning("Unable to delete symlink $nfsenconf. $!");
    }

    if ( -l $newnfsenconf ) {
        unlink $newnfsenconf
            or warning("Unable to delete symlink $newnfsenconf. $!");
    }

    #No existen configuraciones.
    if ( not -f $nfsenconf and not -f $newnfsenconf ) {
        warning("Can't find nfsen conf. Try to reinstall it again.");
    }

    #Existen ambos ficheros. Borramos el nuevo.
    if ( -f $nfsenconf and -f $newnfsenconf ) {
        unlink($newnfsenconf)
            or warning("Unable to delete $newnfsenconf: $!");
    }

    #Existe solo la configuración nueva.
    if ( -f $newnfsenconf and not -f $nfsenconf ) {
        rename( $newnfsenconf, $nfsenconf )
            or
            warning("Unable to move symlink $newnfsenconf -> $nfsenconf: $!");
    }

    #Enlace simbolico.

    symlink( $nfsenconf, $newnfsenconf )
        or
        warning("Unable to create symlink $newnfsenconf -> $nfsenconf. $!");

    #### Reconfig of nfsen.conf ####
    my %NFSEN_CONF = (
        BASEDIR            => '/usr',
        BINDIR             => '${BASEDIR}/bin',
        LIBEXECDIR         => '${BASEDIR}/libexec/nfsen',
        CONFDIR            => '/etc/nfsen',
        HTMLDIR            => '/var/www/nfsen/',
        DOCDIR             => '${HTMLDIR}/doc',
        VARDIR             => '/var/nfsen',
        PROFILESTATDIR     => '/var/nfsen/profiles',
        PROFILEDATADIR     => '/var/cache/nfdump/flows/',
        BACKEND_PLUGINDIR  => '${LIBEXECDIR}/plugins',
        FRONTEND_PLUGINDIR => '${HTMLDIR}/plugins',
        PREFIX             => '/usr/bin',
        USER               => 'www-data',
        WWWUSER            => 'www-data',
        WWWGROUP           => 'www-data',

        #               BUFFLEN                 => 200000,
        SUBDIRLAYOUT => 7,
        ZIPcollected => 0,
        ZIPprofiles  => 1,
        DISKLIMIT    => 98,
        PROFILERS    => 6
    );

    open( my $nfsenconf_fh, "<", $nfsenconf )
        or warning("Can't read $nfsenconf. $!");
    my $nfsenconf_text = do { local ($/); <$nfsenconf_fh> };
    close $nfsenconf_fh;

    foreach my $key ( keys %NFSEN_CONF ) {
        if ( $nfsenconf_text =~ m/^\s*\$$key\s*=/gm ) {
            $nfsenconf_text
                =~ s/^\s*\$$key\s*=.*$/\$$key = \"$NFSEN_CONF{$key}\";/gm;
        }
        else {
            warning(
                "Missing key $key at $nfsenconf, please check the config file"
            );
        }
    }

    # FIXME:
    #Ñapa, esta parte se tiene que implementar llamando al framework para que reconstruya el los sources correctamente. O implementar una funcion que rehaga la parte de configuración de los sources en función a los sensores dados de alta.
    #De momento lo dejamos así.
    if ( $nfsenconf_text
        =~ /'upstream1'    => \{ 'port' => '9995', 'col' => '#0000ff', 'type' => 'netflow' \},/
    )
    {
        print "Sources changed\n";
        $nfsenconf_text
            =~ s/\%sources = \(.*?\);/\%sources = \(\n\t'ossim'    => \{ 'port' => '555', 'col' => '#0000ff', 'type' => 'netflow' \},\n\);/s;
    }

    open( $nfsenconf_fh, ">", $nfsenconf )
        or warning("Can't read $nfsenconf. $!");

    print $nfsenconf_fh $nfsenconf_text;
    close $nfsenconf_fh;

    system("mkdir -p /var/nfsen/profiles/live");
    system("mkdir -p /var/cache/nfdump/flows/live");
    if ( not -f "/var/nfsen/profiles/live/profile.dat" ) {
        warning(
            "/var/nfsen/profiles/live/profile.dat doesn't exist, copying from /var/nfsen/profiles-stat/live/profile.dat"
        );
        copy(
            "/var/nfsen/profiles-stat/live/profile.dat",
            "/var/nfsen/profiles/live/profile.dat"
        );
    }
    system("chown www-data.www-data -R /var/nfsen");
    system("chown www-data.www-data -R /var/cache/nfdump");
    my $command
        = "sed -i \"s:\\\$answer = <STDIN>;:\\\$answer = \\\"yes\\\";:\" /usr/libexec/nfsen/NfSen.pm";
    system($command);
    system("nfsen reconfig");

    $command = "chown www-data: $nfsenconf";
    verbose_log("Framework Profile: change owner to nfsen config: $command");
    system($command);

}

sub configure_nfsen_monit(){
    #1463
    my $monit_nfsen_file = "/etc/monit/alienvault/nfcapd.monitrc";
    if ( !-f $monit_nfsen_file ) { system("touch $monit_nfsen_file"); }

    open MONIT_NFSEN_FILE, "> $monit_nfsen_file "
        or die "Error opening file $!";
    print MONIT_NFSEN_FILE <<EOF;
$script_msg
check process nfsen with pidfile /var/nfsen/run/nfsend.pid
        start program = "/etc/init.d/nfsen restart"
        stop program = "/etc/init.d/nfsen stop"
        depends on rootfs

EOF
    close(MONIT_NFSEN_FILE);

    if ( -s "$nfsenconf" ) {
        {
            package Nfsen::Config;
            require "$nfsenconf";
        }
        open MONIT_NFSEN_FILE, ">> $monit_nfsen_file "
            or die "Error opening file $!";
        no warnings;
        for my $flowname ( keys %Nfsen::Config::sources ) {
            print MONIT_NFSEN_FILE <<EOF;
if failed port $Nfsen::Config::sources{$flowname}{'port'} type UDP then restart
EOF
        }
        close(MONIT_NFSEN_FILE);
    }

}

sub configure_nfsen_replace_name_uuid(){

    my ( $uuid_r, $uuid_r_is_empty ) = ( q{}, q{} );
    my ( $source_common, $source_orig, $source_mod, $flowname4s ) = (q{}, q{}, q{}, q{});

    if ( -f "$nfsenconf" ) {
        {
            package Nfsen::Config;
            require "$nfsenconf";
        }
        no warnings;

        for my $flowname ( keys %Nfsen::Config::sources ) {

            $flowname =~ s/\n//g;
            if ( not $flowname =~ m/[0-9A-F]{32}/ ) {
                verbose_log("Framework Profile: uuid for sensor $flowname seems to be a hostname. Trying translation");

                $source_common = qq*    => { 'port' => '$Nfsen::Config::sources{$flowname}{'port'}', 'col' => '$Nfsen::Config::sources{$flowname}{'col'}', 'type' => '$Nfsen::Config::sources{$flowname}{'type'}' }*;
                debug_log("Framework Profile: source_common: $source_common");

                $source_orig = qq*'$flowname'$source_common*;
                debug_log("Framework Profile: $source_orig");

                if ( $flowname eq "ossim" ) {
                    $flowname4s = $config{'hostname'};
                    debug_log("Framework Profile: installer default flowname $flowname found. It should be ($flowname4s). Trying update and translation");
                }else{
                    $flowname4s = $flowname;
                }

                $uuid_r = qx*echo "SELECT HEX(id) FROM alienvault.system WHERE name = '$flowname4s';" | ossim-db| grep -v ^HEX*;
                $uuid_r =~ s/\n//g;
                $uuid_r_is_empty = grep m/^$/, $uuid_r;
                #                debug_log("uuid_r_is_empty: $uuid_r_is_empty");

                if (not $uuid_r_is_empty) {
                    debug_log("Framework Profile: uuid for sensor $flowname: $uuid_r");
                    $source_mod = qq*'$uuid_r'$source_common*;

                    verbose_log("Framework Profile: Backup /var/cache/nfdump/flows/live/$flowname");
                    rename "/var/cache/nfdump/flows/live/$flowname", "/var/cache/nfdump/flows/live/$flowname-backup";
                    #system(mkdir "/var/cache/nfdump/flows/live/$flowname" );

                    my $command = qq{sed -i "s:$source_orig:$source_mod:" $nfsenconf};
                    debug_log($command);
                    system($command);

                    # verify/rename rrd file (p1)
                    if ( -f "/var/nfsen/profiles/live/$flowname.rrd" ) {
                        debug_log("Framework Profile: rename /var/nfsen/profiles/live/$flowname.rrd, /var/nfsen/profiles/live/$uuid_r.rrd");
                        cp ("/var/nfsen/profiles/live/$flowname.rrd", "/var/nfsen/profiles/live/$flowname.rrd_temp_backup");
                        my $command = qq{chown www-data. /var/nfsen/profiles/live/$flowname.rrd_temp_backup};
                        debug_log($command);
                        system($command);
                        rename "/var/nfsen/profiles/live/$flowname.rrd", "/var/nfsen/profiles/live/$uuid_r.rrd";
                    }

                    # force match of sources
                    my $command = qq{nfsen reconfig};
                    debug_log($command);
                    system($command);

                    # remove recent uuid dir which doesn't contains data (recently build with nfsen reconfig)
                    # move(restore) backup directory; from flowname-backup to uuid
                    if ( -d "/var/cache/nfdump/flows/live/$uuid_r" ) {
                        my $command = qq{rm -rf /var/cache/nfdump/flows/live/$uuid_r};
                        debug_log($command);
                        system($command);
                        debug_log("Framework Profile: rename /var/cache/nfdump/flows/live/$flowname-backup, /var/cache/nfdump/flows/live/$uuid_r");
                        rename "/var/cache/nfdump/flows/live/$flowname-backup", "/var/cache/nfdump/flows/live/$uuid_r";
                    }

                    # verify/rename rrd file (p2)
                    if ( -f "/var/nfsen/profiles/live/$flowname.rrd_temp_backup" ) {
                        debug_log("Framework Profile: rename /var/nfsen/profiles/live/$flowname.rrd_temp_backup, /var/nfsen/profiles/live/$uuid_r.rrd");
                        rename "/var/nfsen/profiles/live/$flowname.rrd_temp_backup", "/var/nfsen/profiles/live/$uuid_r.rrd";
                    }

                }else{
                    debug_log("Framework Profile: uuid not found for sensor $flowname. Skipping translation");
                }
            }else{
                verbose_log("Framework Profile: sensor $flowname is an uuid. Translation already done. Skipping");
            }
        }
    }
}

sub configure_nagios_apache_configuration(){
    verbose_log("Framework Profile: Updating Nagios Apache configuration");

    open NAGIOSAPACHEFILE, "> $nagiosapache_file"
        or warning "Error opening log file $!";
    print NAGIOSAPACHEFILE <<'EOF';
Alias /nagios3 /usr/share/ossim/secure_redirect

EOF
    close(NAGIOSAPACHEFILE);

    system("cp $nagiosapache_file /etc/apache2/conf-available/nagios3.conf");

    if ( !-l "/etc/apache2/conf-enabled/nagios3.conf" ) {
        system("ln -s /etc/apache2/conf-available/nagios3.conf /etc/apache2/conf-enabled/nagios3.conf $stdout $stderr");
    }
}


sub configure_apache_configuration(){
    # apache.conf
    verbose_log("Framework Profile: Updating apache configuration.");
    open FRAMEWORKAPFILE, "> $frameworkapache_file"
        or die "Error open log file $!";
    print FRAMEWORKAPFILE <<EOF;
<IfModule mod_alias.c>
  Alias /ossim "/usr/share/ossim/www"
</IfModule>

<Directory /usr/share/ossim/www>
<Files ~ "\\.(in|am|txt|pl|local|old|conf|ini|sql|cnf)\$">
Order Allow,Deny
Allow from 127.0.0.1
</Files>
<Files ~ "Makefile">
Order Allow,Deny
Allow from 127.0.0.1
</Files>
  <IfModule mod_php4.c>
    php_value include_path .:/usr/share/php:/usr/share/ossim/include/
    php_value error_reporting 2039
    php_value memory_limit 1024M
    AddType application/x-httpd-php .inc .css
  </IfModule>
  <IfModule mod_php5.c>
    php_value include_path .:/usr/share/php:/usr/share/ossim/include/
    php_value error_reporting 5111
    php_value memory_limit -1
    AddType application/x-httpd-php .inc .css
  </IfModule>
  <IfModule mod_php7.c>
    php_value include_path .:/usr/share/php:/usr/share/ossim/include/
    php_value error_reporting 5111
    php_value memory_limit -1
    AddType application/x-httpd-php .inc .css
  </IfModule>
  <IfModule mod_setenvif.c>
    <IfModule mod_headers.c>
        BrowserMatch MSIE ie
        Header set X-UA-Compatible "IE=Edge,chrome=1" env=ie
    </IfModule>
  </IfModule>
  AddType application/x-font-ttf .ttf
  AddType application/octet-stream .ttf
  AddType font/truetype .ttf
  #AddType application/font-wof .woff
  AddType application/x-font-woff .woff
  AddType application/x-woff .woff
  AddType application/vnd.ms-fontobject .eot
  AddType font/ttf .ttf
  AddType font/eot .eot
  AddType font/otf .otf
  AddType font/woff .woff
</Directory>

EOF
    close(FRAMEWORKAPFILE);

    system("a2ensite ossim-framework");
}

sub configure_apache_ssl_config_file(){
    # default apache

    verbose_log(
        "Framework Profile: Configuring the default apache ssl config file.");
    open APACHEDEFAULTPFILE, "> $defaultapache_file"
        or die "Error open log file $!";
    print APACHEDEFAULTPFILE <<EOF;

<VirtualHost *:80>
        DocumentRoot /var/www/
        <Directory />
                Options FollowSymLinks
                AllowOverride None
        </Directory>
        <Directory /var/www/>
                Options Indexes FollowSymLinks MultiViews
                AllowOverride None
                Order allow,deny
                allow from all
                RedirectMatch ^/\$ /ossim/
        </Directory>
        <Directory /var/www/html>
               Options Indexes FollowSymLinks MultiViews
               AllowOverride None
               Order allow,deny
               deny from all
               RedirectMatch ^/\$ /ossim/
        </Directory>

        ErrorLog /var/log/apache2/error.log
        CustomLog /var/log/apache2/access.log combined
</VirtualHost>

EOF
    close(APACHEDEFAULTPFILE);
    my $command = "sed -i \"s:^NameVirtualHost:#NameVirtualHost:\" /etc/apache2/ports.conf";
    debug_log("$command");
    system($command);
    system("a2dissite 000-default");
    system("a2dissite default-ssl");
    system("a2ensite alienvault");
}

sub configure_apache_configuration_files(){

    verbose_log("Framework Profile: Updating Apache configuration files.");
    open APACHEHTTPSDEFAULTPFILE, "> $defaultapachehttps_file"
        or die "Error open log file $!";
    print APACHEHTTPSDEFAULTPFILE <<EOF;

<VirtualHost *:80>
    RewriteEngine On
    RewriteCond %{REQUEST_URI} !.*png [NC]
    RewriteCond %{REQUEST_URI} !.*gif [NC]
    RewriteCond %{REQUEST_URI} !.*jpg [NC]
    RewriteCond %{REQUEST_URI} !.*bar.php.* [NC]
    RewriteCond %{REQUEST_URI} !.*bar2.php.* [NC]
    RewriteCond %{REQUEST_URI} !.*geoloc.php.* [NC]
    RewriteCond %{REQUEST_URI} !.*radar.*php.* [NC]
    RewriteRule .* https://%{SERVER_NAME}%{REQUEST_URI} [R,L]

    DocumentRoot /var/www/
    <Directory />
        Options FollowSymLinks
        AllowOverride None
    </Directory>
    <Directory /var/www/>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Order allow,deny
        allow from all
        RedirectMatch ^/\$ /ossim/
    </Directory>

    Header always set X-XSS-Protection "1; mode=block"

    ErrorLog /var/log/apache2/error.log
    CustomLog /var/log/apache2/access.log combined
</VirtualHost>

<IfModule mod_ssl.c>
<VirtualHost _default_:443>
    #for ntop
    #Include /etc/apache2/conf.d/*conf
    DocumentRoot /var/www/
    <Directory />
        Options FollowSymLinks
        AllowOverride None
    </Directory>
    <Directory /var/www/>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Require all granted
        RedirectMatch ^/\$ /ossim/
    </Directory>
    <Directory /var/www/html>
            Options Indexes FollowSymLinks MultiViews
            AllowOverride None
            Order allow,deny
            deny from all
            RedirectMatch ^/\$ /ossim/
    </Directory>

    ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
    <Directory "/usr/lib/cgi-bin">
        AllowOverride None
        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
        Require all granted
    </Directory>

    FileETag MTime

    LogLevel warn
    CustomLog /var/log/apache2/access.log combined
    ErrorLog /var/log/apache2/error.log

    ErrorDocument 401 /ossim/404.php
    ErrorDocument 403 /ossim/404.php
    ErrorDocument 404 /ossim/404.php

    SSLEngine on
    $SSLCertificateFiles

    # Disable Weak Ciphers
    SSLProtocol -All +TLSv1.2
    SSLCipherSuite ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:!DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA
    SSLHonorCipherOrder on

    Header always set Strict-Transport-Security "max-age=63072000; includeSubdomains; preload"
    Header always set X-XSS-Protection "1; mode=block"

    <FilesMatch "\\.(cgi|shtml|phtml|php)\$">
        SSLOptions +StdEnvVars
        Require expr %{HTTP_USER_AGENT} != 'AV Report Scheduler'
    </FilesMatch>
    <Directory /usr/lib/cgi-bin>
        SSLOptions +StdEnvVars
    </Directory>

    BrowserMatch ".*MSIE.*" \\
            nokeepalive ssl-unclean-shutdown \\
            downgrade-1.0 force-response-1.0

    Alias /ossim/tmp /usr/share/ossim/secure_redirect
    <Location /ossim/tmp/>
         RewriteEngine on
         RewriteRule ^(.*)\$ /ossim/secure_proxy/ [PT]
    </Location>
    <Location /nfsen/>
        order deny,allow
        deny from all
        allow from 127.0.0.0/255.0.0.0
        Options Indexes FollowSymLinks MultiViews
    </Location>
    <Location /cgi-bin/>
        RewriteEngine on
        RewriteRule ^(.*)\$ /ossim/secure_proxy/ [PT]
    </Location>
    <Location /nagios3/>
        RewriteEngine on
        RewriteRule ^(.*)\$ /ossim/secure_proxy/ [PT]
    </Location>
    <Location /manual/>
        order deny,allow
        deny from all
        allow from 127.0.0.0/255.0.0.0
        Options Indexes FollowSymLinks MultiViews
    </Location>
    <Location /icons/>
        order deny,allow
        deny from all
        allow from 127.0.0.0/255.0.0.0
        Options Indexes FollowSymLinks MultiViews
    </Location>
    <Location /geoloc/>
        order deny,allow
        deny from all
        allow from 127.0.0.0/255.0.0.0
        Options Indexes FollowSymLinks MultiViews
    </Location>
</VirtualHost>

<VirtualHost 127.0.0.1:443>
    DocumentRoot /var/www/
    <Directory />
        Options FollowSymLinks
        AllowOverride None
    </Directory>
    <Directory /var/www/>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Require all granted
        RedirectMatch ^/\$ /ossim/
    </Directory>

    FileETag MTime

    LogLevel warn
    CustomLog /var/log/apache2/access.log combined
    ErrorLog /var/log/apache2/error.log

    SSLEngine on
    $SSLCertificateFiles

    # Disable Weak Ciphers
    SSLProtocol All -SSLv2 -SSLv3
    SSLCipherSuite HIGH:!SSLv2:!ADH:!aNULL:!eNULL:!NULL

    <FilesMatch "\\.(cgi|shtml|phtml|php)\$">
            SSLOptions +StdEnvVars
    </FilesMatch>
    <Directory /usr/lib/cgi-bin>
            SSLOptions +StdEnvVars
    </Directory>

    BrowserMatch ".*MSIE.*" \\
            nokeepalive ssl-unclean-shutdown \\
            downgrade-1.0 force-response-1.0

    ScriptAlias /nagios3/cgi-bin /usr/lib/cgi-bin/nagios3
    ScriptAlias /cgi-bin/nagios3 /usr/lib/cgi-bin/nagios3
    <Directory /usr/lib/cgi-bin/nagios3>
        Options +ExecCGI
    </Directory>
    Alias /nagios3/stylesheets /etc/nagios3/stylesheets
    Alias /nagios3 /usr/share/nagios3/htdocs
    <Directory /usr/share/nagios3/htdocs>
        Require all granted
    </Directory>
    <Directory /etc/nagios3/stylesheets>
        Require all granted
    </Directory>

</VirtualHost>

</IfModule>

EOF
    close(APACHEHTTPSDEFAULTPFILE);
    system("a2dissite 000-default");
    system("a2dissite default-ssl");
    system("a2ensite alienvault-ssl");
    system("a2enmod cgi");
}

sub configure_default_security_apache(){
    verbose_log(
        "Framework Profile: Set default apache security config file.");
    open APACHESECURITYDEFAULTPFILE, "> $defaultapachesecurity_file"
        or die "Error open file $!";
    print APACHESECURITYDEFAULTPFILE <<EOF;

# Disable Server Info on HTTP HEADERS
ServerTokens Prod

# Disable Server Signature on error pages
ServerSignature Off

# Disable TRACE method
TraceEnable Off

# Fix clickjacking vulnerablility
<IfModule mod_headers.c>
   Header always append X-Frame-Options SAMEORIGIN
</IfModule>

EOF
    close(APACHESECURITYDEFAULTPFILE);
    system("a2enconf z-security-alienvault");
}

sub configure_apache_dir_conf(){
    # apache dir.conf file
    # Fix #1325, partly #1452
    verbose_log("Framework Profile: Set apache dir config file.");
    my $apache_dirconf_file = "/etc/apache2/mods-enabled/dir.conf";
    open APACHEDIRCONF, "> $apache_dirconf_file"
        or die "Error opening file $!";
    print APACHEDIRCONF <<EOF;
DirectoryIndex index.html index.php index.xhtml index.htm index.cgi index.pl
EOF
    close(APACHEDIRCONF);
}

sub configure_unlink_apache2_doc(){
    my $apache_manual_file = "/etc/apache2/conf.d/apache2-doc";
    if ( -e $apache_manual_file ) { unlink($apache_manual_file); }
}


sub configure_update_snare_client(){
    # FIXME: find a simpler solution (sed -i comes to mind, but pure Perl would be better)
    sub replace_ip {
        my ( $regexp, $dest, $from, $to ) = @_;
        system("cat $from | sed 's/$regexp/$dest/g' > $to; mv $to $from");
    }

    my $ip_tmp_snare = $config{'admin_ip'};

    &replace_ip(
        "\"Destination\"=\"[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\"",
        "\"Destination\"=\"$ip_tmp_snare\"\r",
        "/usr/share/ossim/www/downloads/snare_takeover.reg",
        "/usr/share/ossim/www/downloads/snare_takeover.reg.new"
    );
    &replace_ip(
        "\"Destination\"=\"[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\"",
        "\"Destination\"=\"$ip_tmp_snare\"\r",
        "/usr/share/ossim/www/downloads/snare_no_takeover.reg",
        "/usr/share/ossim/www/downloads/snare_no_takeover.reg.new"
    );
}

sub configure_add_framework_host_in_db(){
    if ( "$add_hosts" eq "yes" ) {
        # add framework host in db

        if ( "$config{'admin_ip'}" ne "$config_last{'admin_ip'}" ) {

            verbose_log(
                "Framework Profile: Updating admin ip (old=$config_last{'admin_ip'} new=$config{'admin_ip'}) update alienvault.host table"
            );
            my $command
                = "echo \"UPDATE alienvault.host_ip set ip = inet6_aton(\'$config{'admin_ip'}\') WHERE inet6_ntoa(ip) = \'$config_last{'admin_ip'}\'\" | ossim-db $stdout $stderr ";
            debug_log($command);
            system($command);

        }else{

            # -- host (framework)
            verbose_log(
                "Framework Profile: Inserting into alienvault.host table");

            if ( "$config{'hostname'}" ne "$config_last{'hostname'}" ){


                my $command
                    = "echo \"UPDATE alienvault.host SET hostname = \'$config{'hostname'}\' WHERE hostname = \'$config_last{'hostname'}\'\"| ossim-db $stdout $stderr ";
                debug_log($command);
                system($command);


            }else{
                my $nentry = `echo "SELECT count(*) FROM alienvault.host WHERE hostname = \'$config{'hostname'}\';" | ossim-db | grep -v count`; $nentry =~ s/\n//;

                debug_log("nentry: $nentry");

                if ( $nentry eq "0" && $profile_sensor == 0) {
                    verbose_log("Framework Profile: Inserting into host, host_ip");
                    my $command
                        = "echo \"SET \@uuid\:= UNHEX(REPLACE(UUID(),'-','')); INSERT IGNORE INTO alienvault.host (id,ctx,hostname,asset,threshold_c,threshold_a,alert,persistence,nat,rrd_profile,descr,lat,lon,av_component) VALUES (\@uuid,(SELECT UNHEX(REPLACE(value,'-','')) FROM alienvault.config WHERE conf = 'default_context_id'),\'$server_hostname\',\'2\',\'30\',\'30\',\'0\',\'0\',\'\',\'\',\'\',\'0\',\'0\',1); INSERT IGNORE INTO alienvault.host_ip (host_id,ip) VALUES (\@uuid,inet6_aton(\'$config{'admin_ip'}\'));\" | ossim-db $stdout $stderr ";
                    debug_log($command);
                    system($command);
                }else{
                    debug_log("Framework Profile: (already inserted)");
                }
            }
        }

    }

}


sub configure_nfsen_rebuild_hierarchy_on_firstinit(){
    # nfsen ## Fix -> update cvs

    if ( -f "/usr/nfsen/bin/RebuildHierarchy.pl" ) {
        if ( "$config{'first_init'}" ne "yes" ) {
            debug_log("FIRST INIT: framework profile");
            verbose_log("Framework Profile: Rebuild nfsend hierarchy");
            my $command
                = "sed  \"s:<stdin>:\\\"yes\\\":\"  /usr/nfsen/bin/RebuildHierarchy.pl > /tmp/RebuildHIerarchy.pl";
            debug_log("$command");
            system($command);

            system(
                "chmod +x /tmp/RebuildHIerarchy.pl $stdout $stderr ; /tmp/RebuildHIerarchy.pl $stdout $stderr"
            );
        }
    }
    else {

        warning("Skip Rebuild nfsen hierarchy");

    }
}

sub configure_timezone {

    my $tzone = slurp { chomp => 1 }, '/etc/timezone';

    # update timezone offset for admin user on first_init
    if ( "$config{'first_init'}" eq "yes" ) {
        debug_log("FIRST INIT: framework profile");
        my $tzone = slurp { chomp => 1 }, '/etc/timezone';
        my $command
            = "echo \"UPDATE IGNORE alienvault.users SET timezone = \'$tzone\' WHERE login = \'admin\' AND last_logon_try = \'0000-00-00 00:00:00\'\" | ossim-db ";
        verbose_log(
            "Framework Profile: Check/Update admin timezone (\'$tzone\')");
        debug_log($command);
        system($command);
    }

    verbose_log("Framework Profile: Updating postcorrelation config tzone");
    if ( -f "/etc/ossim/framework/post_correlation.cfg" ) {
        my $command
            = "sed -i \"s:tzone[ =].*:tzone=$tzone:\"  /etc/ossim/framework/post_correlation.cfg;";
        debug_log("$command");
        system($command);
    }
    else {
        verbose_log("/etc/ossim/framework/post_correlation.cfg not found");
    }
}

sub configure_vuln_scanner(){
    verbose_log("Framework Profile: Configuring GVM");

    system("echo \"REPLACE INTO config (conf, value) VALUES ('gvm_host', '$framework_host')\" |ossim-db");
    system("echo \"REPLACE INTO config (conf, value) VALUES ('gvm_path', '/usr/bin/gvm-cli')\" |ossim-db");
}

sub configure_compliance(){
    # compliance if not bbdd profile

    if ( $profile_database != 1 ) {
        if ( "$config{'first_init'}" eq "yes" ) {
            debug_log("FIRST INIT: framework profile");
            verbose_log("Reconfigure ossim-compliance");
            system("dpkg-reconfigure ossim-compliance $stdout $stderr");
        }
    }
}

sub settings_from_ossec_initscript_for_web (){
    verbose_log("Framework Profile: Checking/Setting ossec initscript");
    if ( -f "/etc/init.d/ossec" ){
        my @ossecinitscript = `cat /etc/init.d/ossec`;
        if (not map( /AVMod1/, @ossecinitscript ) ){
            my $command = "sed -i \'s:S\\\. Lai:S\\\. Lai\\n# AVMod1\\nchown www-data\\:ossec /var/ossec/logs/ /var/ossec/logs/alerts/ /var/ossec/logs/alerts/alerts.log\\nchmod g+w /var/ossec/logs/ /var/ossec/logs/alerts/ /var/ossec/logs/alerts/alerts.log\\nchmod u+x /var/ossec/logs/alerts/alerts.log:\' /etc/init.d/ossec";
            debug_log("$command");
            system($command);
        }else{
            verbose_log("Framework Profile: Settings already set");
        }
    }else{
        verbose_log("Framework Profile: ossec initscript not found");
    }
}

sub configure_ldap_client_file(){
    open my $LDAPCFGFILE, '>', $ldap_client_file or warn "Couldn't open log file $!";
    print $LDAPCFGFILE <<EOF;
#
# LDAP Defaults
#

# See ldap.conf(5) for details
# This file should be world readable but not world writable.

#BASE	dc=example,dc=com
#URI	ldap://ldap.example.com ldap://ldap-master.example.com:666

#SIZELIMIT	12
#TIMELIMIT	15
#DEREF		never

TLS_REQCERT	never

EOF
    close $LDAPCFGFILE;
}

sub config_squid {
    verbose_log("Framework Profile: Configuring Squid proxy for updates");
    # admin_ip;vpn_ip;ha_ip
    my @avsystem=`alienvault-api get_registered_systems --list | perl -npe 's/.*?;(\\d+\\.\\d+\\.*?)/\$1/'`;
    my $acl = join(" ",@avsystem);

    if ( $acl !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/)
    {
        if (-e $ossim_setup_conf_file)
        {
            $acl = `cat $ossim_setup_conf_file | grep ^admin_ip= | cut -d = -f 2`;
        }
    }

    $acl =~ s/;/ /g;
    $acl =~ s/\s+/ /g;
    $acl =~ s/\n//g;

    my $squid_path = "/etc/squid/squid.conf";

    $squidconf = $squid_path if  -f $squid_path ;

    open F, "<", $squidconf;
    my @preconffile = <F> ;
    close(F);

    if (map (/^acl siem_component/,@preconffile)){
        my $command = "sed -i \"s:^acl siem_component src.*:acl siem_component src $acl:\"  $squidconf";
        debug_log("$command");
        system($command);
    }else{

        my $command = "sed -i \"s:^acl CONNECT method CONNECT:acl CONNECT method CONNECT\\nacl siem_component src $acl:\"  $squidconf";
        debug_log("$command");
        system($command);
    }

    my $command = "sed -i \"s:http_access allow localnet:http_access allow siem_component:\"  $squidconf";
    debug_log("$command");
    system($command);

    $command = "sed -i \"s:http_access deny all:http_access allow siem_component:\"  $squidconf";
    debug_log("$command");
    system($command);

    $command = "sed -i \"s:.*shutdown_lifetime.*:shutdown_lifetime 3 seconds:\"  $squidconf";
    debug_log("$command");
    system($command);

    my $proxy_user=q{};
    my $proxy_pass=q{};
    my $proxy_port=q{};
    my $proxy_dns=q{};

    if ( $config{'update_proxy'} eq "manual" ) {
        $proxy_user = $config{'update_proxy_user'} . ":"
            if ( $config{'update_proxy_user'} ne "disabled" );
        $proxy_pass = $config{'update_proxy_pass'}
            if ( $config{'update_proxy_pass'} ne "disabled" );
        $proxy_port = $config{'update_proxy_port'}
            if ( $config{'update_proxy_port'} ne "disabled" );
        $proxy_dns = $config{'update_proxy_dns'}
            if ( $config{'update_proxy_dns'} ne "disabled" );

        my $ef = `grep "^cache_peer" $squidconf`;
        if ($ef eq "" ){
            console_log("Configuring Squid proxy for cache peer");
            $command = "echo \"cache_peer $proxy_dns parent $proxy_port 0 login=$proxy_user$proxy_pass proxy-only\" >> $squidconf";
            debug_log("$command");
            system($command);
        }else{
            console_log("Reconfiguring Squid proxy for cache peer");
            $command = "sed -i \"s/^cache_peer.*/cache_peer $proxy_dns parent $proxy_port 0 login=$proxy_user$proxy_pass proxy-only/\"  $squidconf";
            debug_log("$command");
            system("$command");
        }
    }

    if ( $config{'update_proxy'} eq "disabled" ) {
        $command = "sed -i \"s/^cache_peer.*//\" $squidconf";
        #cache_peer $proxy_dns parent $proxy_port 0 no-query login=$proxy_user$proxy_pass no-digest ever_direct allow all
        debug_log("$command");
        system($command);
    }

    if ( $config{'update_proxy'} =~ /^alienvault-/ ) {
        $command = "sed -i \"s/^cache_peer.*//\" $squidconf";
        #cache_peer $proxy_dns parent $proxy_port 0 no-query login=$proxy_user$proxy_pass no-digest ever_direct allow all
        debug_log("$command");
        system($command);
    }

    #To accept IPv4 connections when alienvault-proxy is enabled
    if ( $config{'update_proxy'} eq "alienvault-proxy" ) {
        my $ipv4 = `grep "^http_port 3128\$" $squidconf`;

        if ($ipv4 ne "" ) {
            console_log("Configuring Squid proxy to listen IPv4 connections");
            $command = "sed -i \"s/^http_port 3128\$/http_port 0.0.0.0:3128/\"  $squidconf";
            debug_log("$command");
            system($command);
        }
    }
}


sub config_firewall_for_squid {
    return if ( ! -f $iptables_rules_framework );

    console_log("Configuring firewall rules for Squid proxy...");

    my @registered_systems=`alienvault-api get_registered_systems --list | perl -npe 's/.*?;(\\d+\\.\\d+\\.*?)/\$1/'`;
    my $acl = join(" ",@registered_systems);

    $acl =~ s/;/ /g;
    $acl =~ s/\s+/ /g;
    $acl =~ s/\n//g;

    my $admin_ip = $config{'admin_ip'};
    my $vpn_net = $config{'vpn_net'};
    verbose_log("Framework Profile: Values retrieved from $ossim_setup_conf_file : admin_ip: $admin_ip ; vpn_net: $vpn_net");

    my @hosts = uniq( split / /, $acl );
    my @hosts_selected = ();

    verbose_log("Framework Profile: Hosts selected for consideration: @hosts");

    foreach my $host (@hosts) {
        debug_log("Checking host $host...");

        if ( index($host, $vpn_net) != -1 ) {
            debug_log( "Host $host matches with VPN network $vpn_net! EXCLUDING it...");
        } elsif ( $host eq $admin_ip ) {
            debug_log("Host $host matches with admin_ip $admin_ip! EXCLUDING it...");
        } else {
            debug_log("Host $host matches neither VPN network $vpn_net not admin_ip $admin_ip. INCLUDING it...");
            push @hosts_selected, $host;
        }
    }

    verbose_log("Framework Profile: Hosts selected for allowing access to Squid proxy: @hosts_selected");

    #Remove squid rules
    system("/usr/bin/perl", "-p", "-i", "-ne", 's/^.*--dport[[:blank:]]+3128.*$//g', $iptables_rules_framework);
    system("/bin/sed", "-i", "-e", '/^[[:blank:]]*$/d', $iptables_rules_framework);


    #Add squid rules if proxy is enabled
    if ( $config{'update_proxy'} eq "alienvault-proxy" ){
        open( my $fh, '>>', $iptables_rules_framework );

        foreach my $host ( @hosts_selected ) {
            print $fh "-A INPUT  -p tcp -m state --state NEW -m tcp -s $host --dport 3128 -j ACCEPT\n";
        }

        close $fh;
    }

    system("/etc/network/if-pre-up.d/iptables");

    verbose_log("Framework Profile: Finished configuring firewall rules for Squid proxy...");
}


1;
