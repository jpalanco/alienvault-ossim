#!/usr/bin/perl
#
# License:
#
#  Copyright (c) 2003-2006 ossim.net
#  Copyright (c) 2007-2014 AlienVault
#  All rights reserved.
#
#  This package is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 dated June, 1991.
#  You may not use, modify or distribute this program under any other version
#  of the GNU General Public License.
#
#  This package is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this package; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#  MA  02110-1301  USA
#
#
#  On Debian GNU/Linux systems, the complete text of the GNU General
#  Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
#  Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt
#

use v5.10;
#use strict;
#use warnings;
#use diagnostics;
no warnings 'experimental::smartmatch';
use DBI;
use MIME::Base64;
use Time::Local;
use Socket;


use lib '/usr/share/alienvault-center/lib';
use AV::ConfigParser;
use AV::Log;
set_output_descriptors_to_dev_null();
use Avtools;
use Avconfig_profile_common;
use Avconfig_profile_server;
use Avconfig_profile_database;
use Avconfig_profile_framework;
use Avconfig_profile_sensor;

# Program version (DO NOT TOUCH THIS)
my $VER = "0.0.2 release 1";

# FIXME: not used at all in this file
my $log_dir="/var/log/ossim";
my $log_file=$log_dir."/ossim_setup.log";



my %config = AV::ConfigParser::current_config(1);
my %config_last = AV::ConfigParser::last_config;





my @profiles_arr;

my @profiles_arr_last;

my $pass_change = 0;
my @resume;
my $ip;
my $dpkg_initscript = 0;
my $config_file = "/etc/ossim/ossim_setup.conf";
my $apt_option="-y --force-yes";
my $db_reb='no';
my $monit_file="/etc/monit/monitrc";
my $monitdefault_file = "/etc/default/monit";
my $nagiosapache_file = "/etc/nagios3/apache2.conf";
my $defaultapache_file = "/etc/apache2/sites-available/alienvault.conf";
my $frameworkapache_file = "/etc/ossim/sites-available/ossim-framework.conf";

my $avgroup="alienvault";

my $framework_file="/etc/ossim/framework/ossim.conf";
my $ocs_setup_file="/usr/share/ossim-installer/ocs/OCS_LINUX_SERVER_1.01.OSSIM/setup.sh";
my $ocs_local_file="/usr/share/ossim/www/ocsreports/local.php";


my $snmpcfg_file="/etc/snmp/snmpd.conf";
my $snmptrapcfg_file="/etc/snmp/snmptrapd.conf";
my $snmp_script="//script/snmp_class.pl"; ## FIX
my $snmpdefault_file="/etc/default/snmpd";

my $ocsdbconfigfile="/usr/share/ossim/www/ocsreports/dbconfig.inc.php";

my $servercfg="/etc/ossim/server/config.xml";
my $agentcfg="/etc/ossim/agent/config.cfg";
my $agentcfgorig="/etc/ossim/agent/config.cfg.orig";
my ( $server_hostname, $server_port, $server_ip, $framework_port,
     $framework_host, $db_host, $db_pass, $vpnnet );

my $profile_server=0;
my $profile_database=0;
my $profile_framework=0;
my $profile_sensor=0;

my ($stdout, $stderr) = ( q{}, q{} );

my $add_hosts = "yes";

our @systemDev;

$dialog_bin    = 'dialog';
$dialog_active = 1;
$percent       = 0;

my @logfile;

my $UP_monit;
my $UP_ossim_mysql;
my $UP_nagios3;
my $UP_apache2;
my $UP_agent;
my $UP_server;
my $UP_framework;

# Forward subroutine declaration
sub main();             # main program body
sub parse_argv();       # requires defined %config
sub config_check();     # requires defined %configcolor;  # colours configuration
sub help();             # help(string: $helpCmd);

#sub debconf_config();
sub download_profile($);


# Parse and check arguments
parse_argv();
if ( config_check() ) {
    main();
}
else {
    error('Configuration check failed.');
}



sub main() {

    my $hb_notrunning = system("cl_status rscstatus > /dev/null 2>&1") >>8;
    my $ha_resources = `cl_status rscstatus 2>/dev/null`;
    $ha_resources =~ s/\n//g;
    if( ( $hb_notrunning == 0 ) && ( $ha_resources ne "all") ) {
        print "cannot reconfigure a passive HA node ... exiting.\n";
        exit 0;
    }

    my $sts
        = `ps -feaww | grep \"/usr/bin/perl\"| egrep "ossim-reconfig\|alienvault-reconfig\" | grep -v vi | grep -v grep | grep -v in-target | grep -v postpone | grep -v "update_sensors" | wc -l`;

    if ( $sts > 1 ) {
        console_log("ossim-reconfig is already running ... exiting");
        exit 0;
    }

    $sts
        = `ps -fea | grep -v grep | grep -v vi | egrep "ossim-reconfig\|alienvault-reconfig" | grep postpone | wc -l`;
    if ( ( $sts > 0 ) && ( $dpkg_initscript != 1 ) ) {
        console_log(
            "apt upgrade is running, ossim-reconfig will be launched automatically after the upgrade ... exiting"
            );
        exit 0;
    }

    ## common

	#debconf_config();

	#
	#  antigua current_config  y last_config
	#

    # FIXME: this chunk of code should be reviewed
    my $interface = "";
    console_log("Getting IP");dp("Getting IP");


    #my $ip = "";

    open( INFILE, "</etc/network/interfaces" );

    while (<INFILE>) {
        if (/^iface $interface/) {
            while (<INFILE>) {
                if (/\s+address\s+(\d+\.\d+\.\d+\.\d+)/) {
                    $ip = $1;
                    last;
                }
            }
            last;
        }
    }

    close INFILE;

    if ( $ip eq "" ) {
        $ip = `ifconfig $interface|egrep -o "inet addr:([0-9]+\.){3}[0-9]+"| awk -F: '{print $2}'`; $ip =~ s/\n//g;

        if ( $ip !~ /(\d+\.\d+\.\d+\.\d+)/ ) {
            $ip = $1;
            print "No ip found, please check config file and system. Your defined interface, $interface, needs a valid ip...\n";
        }else {
            print "Configuring OSSIM with $ip\n";
        }
    }


    $server_hostname=$config{'hostname'};
    $server_port="40001";
    $server_ip=$config{'server_ip'};
    $framework_port=$config{'framework_port'} ;
    $framework_host=$config{'framework_ip'} ;
    $db_host=$config{'database_ip'};
    $db_pass=$config{'database_pass'};

	@profiles_arr = split( /,\s*/,     $config{'profile'} );

	# sync for change ip address

    foreach my $profile (@profiles_arr){

        given($profile){
            when ( m/Framework/ ) {  $framework_host=$config{'admin_ip'}; }
        }

    }

	#
	#  end antigua current_config y last_config
	#

	foreach my $profile (@profiles_arr){

		given($profile){
			when ( m/Database/ ) { $profile_database=1; }
			when ( m/Server/ ) { $profile_server=1; }
			when ( m/Framework/ ) { $profile_framework=1; }
			when ( m/Sensor/ ) { $profile_sensor=1; }
		}

	}
	if ( $profile_database == 1 || $profile_server == 1 || $profile_framework == 1 ) {
        my $conn = Avtools::get_database;
    }


	if ((exists $config{'add_sensor'})){
		console_log("Add new sensor ip ($config{'add_sensor'} - $config{'add_sensor_name'}) ");
		my $command="echo \"insert into ossim.sensor (ip,name,priority,port) value (\'$config{'add_sensor'}\',\'$config{'add_sensor_name'}\',\'5\',\'40001\')\" | ossim-db ";

		console_log($command);
		system($command);
	}

	if (exists $config{'update_sensors'}) {

        exit 0;
	}


	foreach my $profile (@profiles_arr){

		given($profile){
			when ( m/Database/ ) { $profile_database=1; }
			when ( m/Server/ ) { $profile_server=1; }
			when ( m/Framework/ ) { $profile_framework=1; }
			when ( m/Sensor/ ) { $profile_sensor=1; }
		}

	}




    #
    # always
    #

    # Always add the 'alienvault' group.
    system ("addgroup --quiet --system $avgroup") == 0
        or die "Cannot create new group $avgroup, rc $?";

    system("chown -R root:${avgroup} /etc/ossim/");

    my %retro;
    my %reset;
	%reset = Avconfig_profile_common::config_common("head");
    foreach my $key (keys(%reset)){	$retro{$key} = $reset{$key}; }

	if ( $profile_database == 1 ) {
        download_profile("Database");
        %reset = Avconfig_profile_database::config_profile_database();
        foreach my $key (keys(%reset)){	$retro{$key} = $reset{$key}; }
	}

	if ( $profile_server == 1 ) {
        download_profile("Server");
        %reset = Avconfig_profile_server::config_profile_server();
        foreach my $key (keys(%reset)){	$retro{$key} = $reset{$key}; }
	}else{
		if ( -f "/etc/monit/alienvault/avserver.monitrc") {
			system ("rm -f /etc/monit/alienvault/avserver.monitrc");
            $reset{'monit'} = 1;
		}
	}


	if ( $profile_framework == 1 ) {
        download_profile("Framework");
        %reset = Avconfig_profile_framework::config_profile_framework();
        foreach my $key (keys(%reset)){	$retro{$key} = $reset{$key}; }
	}else{
		if ( -f "/etc/monit/alienvault/avframework.monitrc") {
			system ("rm -f /etc/monit/alienvault/avframework.monitrc");
            $reset{'monit'} = 1;
		}
		if ( -f "/etc/monit/alienvault/nfcapd.monitrc") {
			system ("rm -f /etc/monit/alienvault/nfcapd.monitrc");
            $reset{'monit'} = 1;
		}
	}


	if ( $profile_sensor == 1 ) {
        download_profile("Sensor");
        %reset = Avconfig_profile_sensor::config_profile_sensor();
        foreach my $key (keys(%reset)){	$retro{$key} = $reset{$key}; }
	}else{
		if ( -f "/etc/monit/alienvault/avsensor.monitrc") {
			system ("rm -f /etc/monit/alienvault/avsensor.monitrc");
            $reset{'monit'} = 1;
		}
	}


	%reset = Avconfig_profile_common::config_common("foother");
	foreach my $key (keys(%reset)){	$retro{$key} = $reset{$key}; }
    # services
    restart_services(%retro);
    disable_services();
    if ( ( $config{'ha_heartbeat_start'} // q{} ) ne "yes" ) {
        enable_services();
    }
    else
    {
        # disable_servicies is removing heartbeat/mysql and mysql from the run level.
        system("update-rc.d heartbeat defaults  $stdout $stderr ");
        system("update-rc.d mysql defaults  $stdout $stderr ") if -e "/etc/init.d/mysql";
    }


    console_log("Configuration finished");
    $percent=100; dp("Configuration finished");
    #print "\nUse ossim-setup to reconfigure the system.\n";


    # main end
}

sub parse_argv() {


    # scan command line arguments
    foreach (@ARGV) {
        my @parms = split(/=/);

        if (($parms[0] eq "--help") || ($parms[0] eq "-h")) { help(); }
        elsif (($parms[0] eq "--console-log") || ($parms[0] eq "-c")) {$CONSOLELOG = 1;}
		elsif (($parms[0] eq "--verbose") || ($parms[0] eq "-v")) {$VERBOSELOG = 1; $CONSOLELOG = 1;}
		elsif (($parms[0] eq "--debug") || ($parms[0] eq "-d")) {$DEBUGLOG = 1; restore_orig_output_descriptors();}
		elsif (($parms[0] eq "--quiet") || ($parms[0] eq "-q")) {$dialog_active = 0;}
		elsif (($parms[0] eq "--dpkg") || ($parms[0] eq "-dpkg")) {$dpkg_initscript = 1;}
		elsif (($parms[0] eq "--center") || ($parms[0] eq "-center")) {$center_initscript = 1;}


		elsif (($parms[0] eq "--add_sensor") || ($parms[0] eq "-a")) {
            if ($parms[1] eq "") { error("Please enter an IP address (example: --add_sensor=192.168.1.100");}
            $config{'add_sensor'} = "$parms[1]";
        }
		elsif (($parms[0] eq "--add_sensor_name") || ($parms[0] eq "-an")) {
            if ($parms[1] eq "") { error("Sensor name required (example: --add_sensor_name=joaquin");}
            $config{'add_sensor_name'} = "$parms[1]";
        }
        elsif ($parms[0] eq "--rebuild_db") {
            $db_reb='yes';
        }
 		elsif (($parms[0] eq "--update_sensors") || ($parms[0] eq "-us")) {
            $config{'update_sensors'} = 1;
			$dialog_active = 0;
        }
		elsif ($parms[0] eq "--mysql_replication") {
            error("Deprecated.");
        }

		else {
            error("Unknown argument $_ from command line.");
        }

        undef @parms;
    }
}
sub config_check() {
	# Checks configuration validity
	my $noerror = 1;


	if ( $CONSOLELOG == 1 || $DEBUGLOG == 1 || $VERBOSELOG == 1 ) {
        console_log("Console log mode on");
		$dialog_active = 0;
    }



	if ((exists $config{'add_sensor'}) && (! exists $config{'add_sensor_name'})) {
        error("Please enter a name");
        $noerror = 1;
    }

	if ((! exists $config{'add_sensor'}) && ( exists $config{'add_sensor_name'})) {
        error("Please specify an IP address");
        $noerror = 1;
    }


	return $noerror;
}
sub help(){
    always_log(<<"EOF");

AlienVault-reconfig $VER Help ($^O, perl $])

Usage examples:
  ossim-reconfig [options]

Command line options:

	--help (or -h)
      Displays this help message.

	--console-log (or -c)
	  Enable logging messages to console.

	--verbose (or -v)
	  Enable verbose mode.

	--debug (or -d)
	  Enable debug mode. (insane)

	--quiet (or -q)
	  Quiet mode.

	--add_sensor (or -a) + --add_sensor_name (or -an)
	  Add a new sensor to database

	--update_sensors
	  Update sensors config from ddbb info. (only for cron.d)

	--mysql_replication
	  MySQL dump and replication with binary log coordinates

For more info, please visit https://cybersecurity.att.com/

EOF
    exit;
}

sub download_profile($){

    if ( "$config{upgrade}" ne "yes" ){
        console_log("Skip upgrade");
        return 0;
    }

    my @packages_profile;
    my $profilecurrent = shift;

    my $packagesfile="/usr/share/ossim-installer/simple-cdd/".$profilecurrent.".packages";
    console_log("Find profile packages file : $packagesfile");dp("Find profile packages file : $packagesfile");

    if( -f "$packagesfile" ){
        console_log("Found profile packages file : $packagesfile");dp("Found profile packages file : $packagesfile");
        open PACKFILE, "< $packagesfile" or die "packagesfile $!";
        my @varshowrunning=<PACKFILE>;
        close (PACKFILE);
        foreach my $variabless (@varshowrunning)
        {
            $variabless =~ s/\n/ /g;
            #print $variabless;
            if ( $variabless =~ m/^\#/ ){
                verbose_log("Skiping $variabless");
            }else{
                push(@packages_profile,"$variabless");
            }
        }
    }

    console_log("Install/update packages");dp("Install/update packages");
    debug_log("Install/update: @packages_profile");
    my $apt_out=`apt-get $apt_option  install  @packages_profile`;
    #system("apt-get $apt_option  install  @packages_profile");
    debug_log("$apt_out");
}

sub restart_services(){

	my %reset = @_;
    # take care on value of the reset flag. if true restart service and add it to sysvrc

	if ( $config{'first_init'} eq "yes" ){
		verbose_log("Restart Service: Set lock first init");
		my $command="sed -i \"s:first_init=yes:first_init=no:\" $config_file";
        debug_log("$command");
        system($command);

        disable_services();
        enable_services();
	}else{

        # database

        if($reset{'mysql'}){
            console_log("Restarting mysql");
            dp("Restarting mysql");

            if ($reset{'conditional_reset_mysql'} == 1){
                system("/etc/init.d/mysql stop  $stdout $stderr ");
                system("rm -rf /var/lib/mysql/ib_logfile*");
            }

            system("/etc/init.d/mysql restart  $stdout $stderr ");
            system("update-rc.d mysql defaults  $stdout $stderr ");
        }

    	# server
        if($reset{'ossim-server'}){
            console_log("Restarting ossim-server");
            dp("Restarting ossim-server");
            system("/etc/init.d/ossim-server restart  $stdout $stderr ");
            system("update-rc.d ossim-server defaults  $stdout $stderr ");
        }

    	# framework
        if($reset{'ossim-framework'}){
            console_log("Restarting ossim-framework");dp("Restarting ossim-framework");
            system("/etc/init.d/ossim-framework restart  $stdout $stderr ");
            system("update-rc.d ossim-framework defaults  $stdout $stderr ");
        }

        if($reset{'apache2'}){
            my $apache_action = "restart";
            $apache_action = "reload" if $center_initscript;
            console_log("Restarting apache2");
            dp("Restarting apache2");
            system("/etc/init.d/apache2 $apache_action  $stdout $stderr ");
            system("update-rc.d apache2 defaults  $stdout $stderr ");
        }

        if($reset{'squid'}){
            console_log("Restarting squid");
            dp("Restarting squid");
            system("/etc/init.d/squid stop  $stdout $stderr ");
            system("/etc/init.d/squid start  $stdout $stderr ");
            system("update-rc.d squid defaults  $stdout $stderr ");
        }

        if($reset{'nagios3'}){
            console_log("Restarting nagios3");
            dp("Restarting nagios3");
            system("/etc/init.d/nagios3 restart  $stdout $stderr ");
            system("update-rc.d nagios3 defaults  $stdout $stderr ");
        }

        if($reset{'nfsen'}){
            console_log("Restarting nfsen");
            dp("Restarting nfsen");
            system("/etc/init.d/nfsen  restart  $stdout $stderr ");
            system("update-rc.d nfsen defaults  $stdout $stderr ");}

        if ( -x "/etc/init.d/asec-machete" ){
            if($reset{'asec-machete'}){
                console_log("Restarting asec-machete");dp("Restarting asec-machete");
                system("/etc/init.d/asec-machete restart  $stdout $stderr ");
                system("update-rc.d asec-machete defaults  $stdout $stderr ");
            }
        }

        if ( -x "/etc/init.d/asec-mixter" ){
            if($reset{'asec-mixter'}){
                console_log("Restarting asec-mixter");dp("Restarting asec-mixter");
                system("/etc/init.d/asec-mixter restart  $stdout $stderr ");
                system("update-rc.d asec-mixter defaults  $stdout $stderr ");
            }
        }

        # sensor

        if ( $dpkg_initscript == 0 ){
            if($reset{'sensors'}){
                console_log("Restarting sensors");dp("Restarting sensors");
                system("ps -fea | grep prads | grep -v grep| awk '{print \$2}' |while read line ; do kill -9 \$line  $stdout $stderr  ; done ; /bin/true");
            }
        }else{
            console_log("Skip Restarting sensors --dpkg option found ");dp("Skip Restarting sensors --dpkg option found");
        }

        if($reset{'ossim-agent'}){
            console_log("Restarting ossim-agent");
            dp("Restarting ossim-agent");
            system("/etc/init.d/ossim-agent stop  $stdout $stderr  ; /etc/init.d/ossim-agent start  $stdout $stderr ");

            system("update-rc.d ossim-agent defaults  $stdout $stderr ");
        }

        if($reset{'monit'}){
            console_log("Restarting monit");
            dp("Restarting monit");
            system("/etc/init.d/monit restart  $stdout $stderr ");
        }

        if($reset{'snmpd'}){
            console_log("Restarting snmpd");
            dp("Restarting snmpd");
            system("/etc/init.d/snmpd restart  $stdout $stderr ");
        }

        if($reset{'postfix'}){
            console_log("Restarting postfix");
            dp("Restarting postfix");
            system("/etc/init.d/postfix restart  $stdout $stderr ");
        }

        if ( ( -f "/etc/rc.local" ) && ( -f "/etc/init.d/rc.local" ) ){
            console_log("Start rc.local");
            system("/etc/init.d/rc.local start $stdout $stderr ");
        }

        if ((-x "/usr/bin/gvm-start") && $reset{'gvm'}) {
            console_log("Restarting gvm");
            dp("Restarting gvm");
            system("/usr/bin/gvm-stop $stdout $stderr");
            system("/usr/bin/gvm-start $stdout $stderr");
        }

        if ($reset{'rsyslog'}) {
            console_log("Restarting rsyslog");
            dp("Restarting rsyslog");
            system("/etc/init.d/rsyslog restart $stdout $stderr");
            system("update-rc.d rsyslog defaults  $stdout $stderr ");
        }
	}
}


sub disable_services(){
    # stop (only if cluster enabled) and disable all services, but mysql

    console_log("Disable services");
    dp("Disable services");

=out
	system("update-rc.d -f mysql remove  $stdout $stderr ");
	system("update-rc.d -f ossim-server remove  $stdout $stderr ");
	system("update-rc.d -f ossim-framework remove  $stdout $stderr ");
	system("update-rc.d -f apache2 remove  $stdout $stderr ");
	system("update-rc.d -f tomcat remove  $stdout $stderr ");
	system("update-rc.d -f ossim-agent remove  $stdout $stderr ");
	system("update-rc.d -f nagios3 remove  $stdout $stderr ");
	system("update-rc.d -f prads remove  $stdout $stderr ");
	system("update-rc.d -f snmpd remove  $stdout $stderr ");
	system("update-rc.d -f nfsen remove  $stdout $stderr ");
	system("update-rc.d -f nfdump remove  $stdout $stderr ");
	system("update-rc.d -f fprobe remove  $stdout $stderr ");
	system("update-rc.d -f heartbeat remove  $stdout $stderr ");
	system("update-rc.d -f monit remove  $stdout $stderr ");
=cut

    my @stopsysvrcl=('monit','alienvault-ha','heartbeat','ossim-server','ossim-framework','ossim-agent','apache2','nagios3','suricata','prads','snmpd','nfsen','nfdump','fprobe','asec-machete','asec-mixter', 'rsyslog');
	foreach (@stopsysvrcl){
		my $command="test -x /etc/init.d/$_ && update-rc.d -f $_ remove >/dev/null 2>&1";
		debug_log("$command");
		system($command);
	}
	# don't include mysql in array
	my $command="update-rc.d -f mysql remove >/dev/null 2>&1";
	debug_log("$command");
	system($command);
}


# check and rewrite/simplify, and use insserv instead of update-rc.d
sub enable_services(){
    # (or disable them if value is 'no' in setup)

    console_log("Enable services");
    dp("Enable services");
	foreach my $profile (@profiles_arr){
		given($profile){
			when ( m/Server/ ) {
				system("update-rc.d ossim-server defaults  $stdout $stderr ");

			}
			when ( m/Database/ ) {
				system("update-rc.d mysql defaults  $stdout $stderr ");
			}
			when ( m/Framework/ ) {
				system("update-rc.d ossim-framework defaults  $stdout $stderr ");
				system("update-rc.d nagios3 defaults  $stdout $stderr ");
				system("update-rc.d apache2 defaults  $stdout $stderr ");
				system("update-rc.d nfsen defaults  $stdout $stderr ");
				if ( -x "/etc/init.d/asec-machete" ){
					system("update-rc.d asec-machete defaults  $stdout $stderr ");
				}
				if ( -x "/etc/init.d/asec-mixter" ){
					system("update-rc.d asec-mixter defaults  $stdout $stderr ");
				}
				system("update-rc.d rabbitmq-server defaults  $stdout $stderr ");
				system("update-rc.d redis-server defaults  $stdout $stderr ");
				system("update-rc.d alienvault-api defaults  $stdout $stderr ");
			}
			when ( m/Sensor/ ) {
                system("update-rc.d rsyslog defaults  $stdout $stderr ");
                system("update-rc.d ossim-agent defaults  $stdout $stderr ");

				if ($config{'netflow'} eq "yes" ){
                    system("update-rc.d fprobe defaults  $stdout $stderr ");
				}else{
                    system("update-rc.d -f fprobe remove  $stdout $stderr ");
                    system("/etc/init.d/fprobe stop  $stdout $stderr ");
				}
			}
		}
	}

	if ($config{'snmpd'} eq "yes" ){
		system("update-rc.d snmpd defaults  $stdout $stderr ");
	}else{
        system("update-rc.d -f snmpd remove  $stdout $stderr ");
		system("/etc/init.d/snmpd stop  $stdout $stderr ");
	}

	system("update-rc.d -f monit remove $stdout $stderr ");
	system("update-rc.d monit defaults  90 01 $stdout $stderr ");

}

###### first boot cd install function (dk version)

sub upgrade_ossim_ver(){

    my @comment_update;


    if ( ! -f $monit_file ){

        push(@comment_update,"File $monit_file not found");
        $UP_monit=1;
    }

    if ( ! -f $monitdefault_file ){

        push(@comment_update,"file $monitdefault_file not found");
        $UP_monit=1;


    }

    if ( ! -f "/usr/share/doc/ossim-mysql/contrib/create_mysql.sql.gz" ) { $UP_ossim_mysql=1;}
    if ( ! -f "/usr/share/doc/ossim-mysql/contrib/ossim_config.sql.gz" ) { $UP_ossim_mysql=1; }
    if ( ! -f "/usr/share/doc/ossim-mysql/contrib/ossim_data.sql.gz" ) { $UP_ossim_mysql=1;}

    if ( ! -f "/usr/share/doc/ossim-mysql/contrib/create_snort_tbls_mysql.sql.gz" ) { $UP_ossim_mysql=1;}


    if ( ! -f "/usr/share/ossim/include/upgrades/datawarehouse.sql" ) {$UP_ossim_mysql=1;}
    if ( ! -f "/usr/share/doc/ossim-mysql/contrib/create_mysql.sql.gz" ) {$UP_ossim_mysql=1;}
    if ( ! -f "/usr/share/ossim-installer/databases/plugin_reference.sql" ) {$UP_ossim_mysql=1;}


    if ( ! -f $nagiosapache_file ) {
		push(@comment_update,"File $nagiosapache_file not found");
		$UP_nagios3=1;

    }


    if ( ! -f $defaultapache_file ){
		push(@comment_update,"File $defaultapache_file not found");
		$UP_apache2=1;

    }

    if ( ! -f $frameworkapache_file ){
        push(@comment_update,"File $frameworkapache_file not found");
		$UP_framework=1;
    }


    if ( ! -f $framework_file ){
		push(@comment_update,"File $framework_file not found");
		$UP_framework=1;
    }

    if ( ! -f $servercfg ){
		push(@comment_update,"File $servercfg not found");
		$UP_server=1;
    }

    if ( ! -f $agentcfg ){
		push(@comment_update,"File $agentcfg not found");
		$UP_agent=1;
    }

    if ($UP_server == 1 ){ push(@comment_update,"Install package ossim-server");}
    if ($UP_agent == 1 ){ push(@comment_update,"Install package ossim-agent");}
    if ($UP_framework == 1 ){ push(@comment_update,"Install package ossim-framework and ossim-framework-daemon");}
    if ($UP_apache2 == 1 ){ push(@comment_update,"Install package apache2");}
    if ($UP_nagios3 == 1 ){ push(@comment_update,"Install package nagios3");}
    if ($UP_monit == 1 ){ push(@comment_update,"Install package monit");}
    if ($UP_ossim_mysql == 1 ){ push(@comment_update,"Install package ossim-mysql");}

}


