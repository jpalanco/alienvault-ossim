#!/usr/bin/perl

use v5.10;
use DBI;
use MIME::Base64;
use Time::Local;
no warnings 'experimental::smartmatch';

use lib '/usr/share/alienvault-center/lib';
use AV::ConfigParser;
use AV::Log;
use Avtools;
#set_output_descriptors_to_dev_null();


# Program version (DO NOT TOUCH THIS)
my $VER = "0.0.2 release 1";

%config               = AV::ConfigParser::current_config;
my $profile_server    = 0;
my $profile_framework = 0;
my $profile_sensor    = 0;
my $profile_database  = 0;

my $db_ip             = $config{'database_ip'};
my $db_pass           = $config{'database_pass'};
my $config_file       = "/etc/ossim/ossim_setup.conf";

$full = 0;
# Parse and check arguments
parse_argv();
if ( config_check() )
{
    main();
}
else
{
    error('Configuration check failed.');
}

# Main functions
sub main()
{
    # Get profile data
    if ($config{'profile'} eq "all-in-one")
    {
        @profiles_arr = ("Server","Database","Framework","sensor");
    }
    else
    {
        @profiles_arr = split( /,\s*/, $config{'profile'} );
    }

    # Set profile variables
    for my $profile (@profiles_arr)
    {
        given ($profile)
        {
            when ( m/Database/ )  { $profile_database  = 1; }
            when ( m/Server/ )    { $profile_server    = 1; }
            when ( m/Framework/ ) { $profile_framework = 1; }
            when ( m/Sensor/ )    { $profile_sensor    = 1; }
        }
    }

    verbose_log("Database profile: rebuild_database is enabled...");

    #stop_services();

    # we are not using $config{'innodb'} today
    # mysql restart to clean mysql process (db will be rebuilt)
    verbose_log("Database Profile: Starting MySQL");
    $command = "service mysql start";
    debug_log($command);
    system($command);

    console_log("Database Profile: Creating new databases (please wait)...");
    verbose_log("Database Profile: Creating new databases (please wait)...");
	print("Creating new databases ".gmtime()."...\n");

    # Check pro version and try to migrate to TokuDB if exists
    $is_pro  = system("dpkg -l alienvault-professional &> /dev/null");
    $is_toku = int(`echo "SELECT ENGINE FROM INFORMATION_SCHEMA.ENGINES" | ossim-db mysql | grep 'TokuDB' | wc -l`);

    if ($is_pro == 0 && not $is_toku)
    {
        $command = "echo \"INSTALL PLUGIN tokudb SONAME 'ha_tokudb.so';
INSTALL PLUGIN tokudb_file_map SONAME 'ha_tokudb.so';
INSTALL PLUGIN tokudb_fractal_tree_info SONAME 'ha_tokudb.so';
INSTALL PLUGIN tokudb_fractal_tree_block_map SONAME 'ha_tokudb.so';
INSTALL PLUGIN tokudb_trx SONAME 'ha_tokudb.so';
INSTALL PLUGIN tokudb_locks SONAME 'ha_tokudb.so';
INSTALL PLUGIN tokudb_lock_waits SONAME 'ha_tokudb.so';
SET GLOBAL default_storage_engine=TokuDB;\" | ossim-db mysql 2> /dev/null";
        system($command);
    }

    # alienvault struct (old ossim)
    verbose_log("Database Profile: Create alienvault database");
	print("Creating alienvault ".gmtime()."...\n");
	system("echo \"DROP DATABASE IF EXISTS alienvault; CREATE DATABASE alienvault DEFAULT CHARACTER SET utf8;\" | ossim-db mysql");
    system("zcat /usr/share/doc/ossim-mysql/contrib/00-create_alienvault_tbls_mysql.sql.gz | ossim-db alienvault");

    # alienvault data config
    debug_log("Database Profile: alienvault data");
    print("01 ".gmtime()."...\n");
    system("zcat /usr/share/doc/ossim-mysql/contrib/01-create_alienvault_data_data.sql.gz | ossim-db alienvault");

    if ($full)
    {
        print("01-02-03 ".gmtime()."...\n");
        system("zcat /usr/share/doc/ossim-mysql/contrib/01-create_alienvault_data_config.sql.gz | ossim-db alienvault");
        system("zcat /usr/share/doc/ossim-mysql/contrib/02-create_alienvault_data_data.sql.gz | ossim-db alienvault");
        system("zcat /usr/share/doc/ossim-mysql/contrib/03-create_alienvault_data_croscor_snort_nessus.sql.gz | ossim-db alienvault");
    }
    print("04 ".gmtime()."...\n");
    system("zcat /usr/share/doc/ossim-mysql/contrib/04-create_alienvault_data_vulnerabilities.sql.gz | ossim-db alienvault");

    # admin timezone
    my $tmz = `cat /etc/timezone`;
    $tmz =~ s/\n//g;
    $tmz =~ s/ //g;
    system("echo \"update alienvault.users set timezone='$tmz' where login='admin'\" | ossim-db alienvault");

    # alienvault_siem struct (old snort)
    debug_log("Database Profile: Create alienvault_siem");
    print("Creating alienvault_siem ".gmtime()."...\n");
    system("echo \"DROP DATABASE  IF EXISTS alienvault_siem; CREATE DATABASE alienvault_siem DEFAULT CHARACTER SET utf8;\" | ossim-db mysql");
    system("zcat /usr/share/doc/ossim-mysql/contrib/00-create_alienvault_siem_tbls_mysql.sql.gz | ossim-db alienvault_siem");

    # alienvault_siem struct (old snort)
    debug_log("Database Profile: alienvault siem data");
    print("01 ".gmtime()."...\n");
    system("zcat /usr/share/doc/ossim-mysql/contrib/01-create_alienvault_siem_data.sql.gz | ossim-db alienvault_siem");

    # Plugins
    debug_log("Database Profile: Update plugins");
    print("Loading plugins data (please wait) ".gmtime()."...\n");
    system("echo 'SET UNIQUE_CHECKS=0;' > /tmp/uc.sql;echo 'SET UNIQUE_CHECKS=0;' > /tmp/uc1.sql;gzip /tmp/uc1.sql");
    system("find /usr/share/doc/ossim-mysql/contrib/plugins/ -type f -iname \\*.sql -printf 'INSERT %f \n' -exec sh -c 'cat /tmp/uc.sql {}| ossim-db' \\;");
    system("find /usr/share/doc/ossim-mysql/contrib/plugins/ -type f -iname \\*.sql.gz -printf 'INSERT %f \n' -exec sh -c 'zcat /tmp/uc1.sql.gz {}| ossim-db' \\;");
    system("rm -f /tmp/uc.sql /tmp/uc1.sql.gz");
    if ( -s "/var/lib/dpkg/info/alienvault-cpe.postinst" )
    {
        verbose_log("Reconfiguring alienvault-cpe");
        print("alienvault-cpe.postinst ".gmtime()."...\n");
        system("/bin/bash /var/lib/dpkg/info/alienvault-cpe.postinst configure");
    }

    # alienvault_asec
    debug_log("Database Profile: Create alienvault_asec database");
    print("Creating alienvault_asec ".gmtime()."...\n");
	system( "echo \"DROP DATABASE IF EXISTS alienvault_asec; CREATE DATABASE alienvault_asec DEFAULT CHARACTER SET utf8;\" | ossim-db mysql");
	if ( -f "/usr/share/doc/ossim-mysql/contrib/00-create_alienvault_asec_tbls_mysql.sql.gz" )
	{
        system("zcat /usr/share/doc/ossim-mysql/contrib/00-create_alienvault_asec_tbls_mysql.sql.gz | ossim-db alienvault_asec");
	}
	elsif ( -f "/usr/share/doc/ossim-mysql/contrib/00-create_alienvault_asec_tbls_mysql.sql" )
    {
        system("cat /usr/share/doc/ossim-mysql/contrib/00-create_alienvault_asec_tbls_mysql.sql | ossim-db alienvault_asec");
	}

    # alienvault_asec data
    debug_log("Database Profile: alienvault asec data");
    print("01 ".gmtime()."...\n");
	if ( -f "/usr/share/doc/ossim-mysql/contrib/01-create_alienvault_asec_data.sql.gz" )
	{
    	system("zcat /usr/share/doc/ossim-mysql/contrib/01-create_alienvault_asec_data.sql.gz | ossim-db alienvault_asec");
	}
	elsif ( -f "/usr/share/doc/ossim-mysql/contrib/01-create_alienvault_asec_data.sql" )
	{
        system("cat /usr/share/doc/ossim-mysql/contrib/01-create_alienvault_asec_data.sql | ossim-db alienvault_asec");
	}

    # alienvault_api
    debug_log("Database Profile: Create alienvault_api database");
    print("Creating alienvault_api ".gmtime()."...\n");
    system( "echo \"DROP DATABASE IF EXISTS alienvault_api; CREATE DATABASE alienvault_api DEFAULT CHARACTER SET utf8;\" | ossim-db mysql" );

    if ( -f "/usr/share/doc/ossim-mysql/contrib/00-create_alienvault_api_tbls_mysql.sql.gz" )
    {
        system("zcat /usr/share/doc/ossim-mysql/contrib/00-create_alienvault_api_tbls_mysql.sql.gz | ossim-db alienvault_api");
    }
    elsif ( -f "/usr/share/doc/ossim-mysql/contrib/00-create_alienvault_api_tbls_mysql.sql" )
    {
        system("cat /usr/share/doc/ossim-mysql/contrib/00-create_alienvault_api_tbls_mysql.sql | ossim-db alienvault_api");
    }

    # alienvault_api data
    debug_log("Database Profile: alienvault api data");
    print("01 ".gmtime()."...\n");
    if ( -f "/usr/share/doc/ossim-mysql/contrib/01-create_alienvault_api_data.sql.gz" )
    {
          system("zcat /usr/share/doc/ossim-mysql/contrib/01-create_alienvault_api_data.sql.gz | ossim-db alienvault_api");
    }
    elsif ( -f "/usr/share/doc/ossim-mysql/contrib/01-create_alienvault_api_data.sql" )
    {
          system("cat /usr/share/doc/ossim-mysql/contrib/01-create_alienvault_api_data.sql | ossim-db alienvault_api");
    }

    debug_log("Database Profile: Create datewarehouse");
	print("Creating datawarehouse ".gmtime()."...\n");
    system("echo \"DROP DATABASE  IF EXISTS datawarehouse; CREATE DATABASE datawarehouse;\" | ossim-db mysql");
    system("zcat /usr/share/doc/ossim-mysql/contrib/00-create_datawarehouse_tbls_mysql.sql.gz | ossim-db datawarehouse");

    # suricata rules aditional data
    print("Suricata postinst ".gmtime()."...\n");
    if ( -s "/var/lib/dpkg/info/suricata-rules-default.postinst" )
    {
    	verbose_log("Updating suricata data");
    	system("/bin/bash /var/lib/dpkg/info/suricata-rules-default.postinst configure");
    }

    # custom reports data
    if ( $is_pro == 0 )
    {
        print("Alienvault-reporting postinst ".gmtime()."...\n");
        if ( -s "/var/lib/dpkg/info/alienvault-reporting.postinst" )
        {
            verbose_log("Updating reporting data");
            system("/bin/bash /var/lib/dpkg/info/alienvault-reporting.postinst configure");
        }
    }

    # compliance aditional data
    print("Compliance postinst ".gmtime()."...\n");
    if ( -s "/var/lib/dpkg/info/ossim-compliance.postinst" )
    {
        verbose_log("Reconfiguring ossim-compliance");
    	system("dpkg-reconfigure ossim-compliance");
    }

    print("Reconfiguring alienvault-wizard ".gmtime()."...\n");
    # wizard aditional data
    if ( -f "/var/lib/dpkg/info/alienvault-wizard.postinst" )
    {
    	verbose_log("Reconfiguring alienvault-wizard");
    	system("dpkg-reconfigure alienvault-wizard");
    }

    # KDB, taxonomy after plugin_sid
    print("06 ".gmtime()."...\n");
    debug_log("Database Profile: KDB, Taxonomy");
    system("zcat /usr/share/doc/ossim-mysql/contrib/06-create_alienvault_data_kb_taxonomy.sql.gz | ossim-db alienvault");

    # update fix if present
    if ( -d "/usr/share/doc/alienvault-directives-pro/contrib/" )
    {
        print("Update feed pro ".gmtime()."...\n");
    	verbose_log("Update feed pro info");
    	system("zcat /usr/share/doc/alienvault-directives-pro/contrib/datawarehouse_category.sql.gz | ossim-db datawarehouse");
    	system("zcat /usr/share/doc/alienvault-directives-pro/contrib/alienvault-kb.sql.gz | ossim-db ");
    }
    elsif ( -d "/usr/share/doc/alienvault-directives-free/contrib/" )
    {
		verbose_log("Update feed free info");
		system("zcat /usr/share/doc/alienvault-directives-free/contrib/datawarehouse_category.sql.gz | ossim-db datawarehouse");
		system("zcat /usr/share/doc/alienvault-directives-free/contrib/alienvault-kb.sql.gz | ossim-db ");
    }


    # Activate GTW
    if ( $profile_database == 1 && $profile_server == 1 && $profile_framework == 1 && $profile_sensor == 1 )
    {
        system("echo \"REPLACE INTO config VALUES('start_welcome_wizard',1);\" | ossim-db");
    }

    # Restore rebuild_database option
    verbose_log("Database Profile: Set lock create database");
    $command = "sed -i \"s:rebuild_database=yes:rebuild_database=no:\" $config_file";
    debug_log("$command");
    system($command);

    # Remove php sessions
    if ( $profile_framework == 1 )
    {
        print("Remove php sessions ".gmtime()."...\n");
        verbose_log("Database Profile (and Framework Profile): remove php sessions from /var/lib/php ");
        $command = "[ -d /var/lib/php ] && find /var/lib/php/ -type f -delete";
        debug_log("$command");
        system($command);
    }

    # Post process some databases
    if ($is_pro == 0 && $is_toku)
    {
        if ($is_pro == 0)
        {
            $command = "echo 'DROP TRIGGER IF EXISTS count_acid_event;' | ossim-db alienvault_siem 2>/dev/null";
            debug_log("$command");
            system($command);
            $command = 'echo "INSERT INTO config VALUES (\'backup_events\',\'40000000\') ON DUPLICATE KEY UPDATE value=IF(value<=4000000,\'40000000\',value);INSERT INTO config VALUES (\'backup_day\',\'90\') ON DUPLICATE KEY UPDATE value=IF(value<=5,\'90\',value);INSERT INTO config VALUES (\'frameworkd_backup_storage_days_lifetime\',\'30\') ON DUPLICATE KEY UPDATE value=IF(value<=5,\'30\',value);" | ossim-db alienvault 2>/dev/null';
            debug_log("$command");
            system($command);
        }
        @tables = ('datawarehouse.incidents_ssi', 'datawarehouse.ip2country', 'datawarehouse.report_data', 'datawarehouse.ssi', 'alienvault.sem_stats_events', 'alienvault.event', 'alienvault.extra_data', 'alienvault.otx_data', 'alienvault.idm_data', 'alienvault_siem.acid_event', 'alienvault_siem.extra_data', 'alienvault_siem.idm_data', 'alienvault_siem.otx_data', 'alienvault_siem.reputation_data', 'alienvault_siem.po_acid_event');
        foreach $table (@tables)
        {
            ($db, $table_name) = split(/\./, $table);
            # Test if the table is already in TokuDB
            $in_toku = int(`echo "SELECT ENGINE FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$db' AND TABLE_NAME='$table_name'" | ossim-db | grep 'TokuDB' | wc -l`);

            if ($in_toku)
            {
                verbose_log("$table is already moved");
                print("$table is already moved to toku ".gmtime()."...\n");
            }
            else
            {
                verbose_log("Moving $table database engine");
                print("Moving $table database engine to toku ".gmtime()."...\n");
                $command = "echo 'ALTER TABLE $table ENGINE=TokuDB;' | ossim-db 2>/dev/null";
                debug_log("$command");
                system($command);
            }
        }

    }
}

# stop services
sub stop_services()
{
    my $command = "test -x /etc/init.d/monit && /etc/init.d/monit stop";
    debug_log($command);
    system($command);

    if ( $profile_framework == 1 )
    {
        $command = "/etc/init.d/ossim-framework stop ; /etc/init.d/alienvault-api stop";
        debug_log($command);
        system($command);
    }
    if ( $profile_sensor == 1 )
    {
        $command = "/etc/init.d/ossim-agent stop";
        debug_log($command);
        system($command);
    }

    # kill server/idm if still there
    $command = "pgrep ossim-server && pkill -9 ossim-server";
    debug_log($command);
    system($command);

    #if ( $profile_sensor == 1 )
    #{
    #    $command = "/etc/init.d/ossim-agent stop";
    #    debug_log($command);
    #    system($command);
    #}
    ## additional sensor stop:
    #$command = "test -x /etc/init.d/ossim-agent && /etc/init.d/ossim-agent stop";
    #debug_log($command);
    #system($command);
}

# Scan command line arguments
sub parse_argv()
{
    foreach (@ARGV)
    {
        my @parms = split(/=/);

        if (($parms[0] eq "--help") || ($parms[0] eq "-h"))
        {
            help();
        }
        elsif ($parms[0] eq "--full")
        {
            $full = 1;
        }
        else
        {
            error("Unknown argument $_ from command line.");
        }

        undef @parms;
    }
}

# Safety checks
sub config_check()
{

    my $sts = `ps -feaww | grep \"/usr/bin/perl\" | egrep "ossim-reconfig\|rebuild_db\|alienvault-reconfig\" | grep -v vi | grep -v grep | grep -v in-target | grep -v postpone | grep -v "update_sensors" | wc -l`;

    if ( $sts > 1 )
    {
        console_log("$0 is already running ... exiting");
        return 0;
    }

	return 1;
}

# HELP
sub help()
{
always_log(<<"EOF");

alienvault-rebuild_db $VER Help ($^O, perl $])

Usage examples:
  alienvault-rebuild_db [options]

Command line options:

	--help (or -h)
      Displays this help message.

For more info, please visit https://cybersecurity.att.com/

EOF
exit;
}
