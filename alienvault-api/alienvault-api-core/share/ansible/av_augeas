#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, Tomasz Rybarczyk <paluho@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = '''
---
module: av_augeas
author: Tomasz Rybarczyk
short_description: Augeas support
description:
  - Augeas module which exposes simple API for "match", "set" and "rm". You can execute commands one by one or in chunk.
version_added: "1.1"
requirements:
  - augeas + lenses (augeas-lenses on Debian)
  - augeas python bindings (python-augeas on Debian)
options:
  command:
    required: false
    choices: [ set, rm, match ]
    description:
      - 'Whether given path should be modified, removed or matched. Command "match" passes results through "result" attribute - every item on this list is an object with "label" and "value" (check second example below). Other commands returns true if case of any modification (so this value is always equal to "changed" attribue - this make more sens in case of bulk execution)'
  path:
    required: false
    description:
      - 'Variable path.'
  value:
    required: false
    description:
      - 'Variable value (required for "set" command).'
  commands:
    required: false
    description:
      - 'Execute many commands at once (some configuration entries have to be created/updated at once - it is impossible to split them across multiple "set" calls). Standard shell quoting is allowed (rember to escape all quotes inside pahts/values - check last example). Expected formats: "set path value", "rm path" or "match path" (look into examples for more details). You can separate commands with any white chars (new lines, spaces etc.). Result is passed through "result" attribute and contains list of tuples: (command, command result).'
  root:
    required: false
    description:
      - 'The filesystem root - config files are searched realtively to this path (fallbacks to AUGEAS_ROOT or /).'
  loadpath:
    required: false
    description:
      - 'Colon-spearated list of directories that modules should be searched in.'
  validate_filepath:
    required: false
    default: yes
    description:
      - 'Check if given path matches any file in filesystem.'
examples:
  - code: 'augeas: path=/files/etc/sudoers/spec[user=\\"sudo\\"]/host_group/command/tag value=PASSWD'
    description: 'Simple value change'

  - code: |
      - name: Check wether given user is listed in sshd_config
        action: augeas command='match' path="/files/etc/ssh/sshd_config/AllowUsers/*[.=\\"${user}\\"]"
        register: user_entry
      - name: Allow user to login through ssh
        action: augeas command="set" path="/files/etc/ssh/sshd_config/AllowUsers/01" value="${user}"
        only_if: "not ${user_entry.result}"
    description: "Quite complex modification - fetch values lists and append new value only if it doesn't exists already in config"

  - code: |
      - name: Add new host to /etc/hosts
        action:  augeas commands=\'set /files/etc/hosts/01/ipaddr 192.168.0.1
                                  set /files/etc/hosts/01/canonical pigiron.example.com
                                  set /files/etc/hosts/01/alias[1] pigiron
                                  set /files/etc/hosts/01/alias[2] piggy\'
    description: "Bulk command execution."

  - code: |
      - name: Redifine eth0 interface
        action:  augeas commands=\'rm /files/etc/network/interfaces/iface[.=\\"eth0\\"]
                                  set /files/etc/network/interfaces/iface[last()+1] eth0
                                  set /files/etc/network/interfaces/iface[.=\\"eth0\\"]/family inet
                                  set /files/etc/network/interfaces/iface[.=\\"eth0\\"]/method manual
                                  set /files/etc/network/interfaces/iface[.=\\"eth0\\"]/pre-up "ifconfig $IFACE up"
                                  set /files/etc/network/interfaces/iface[.=\\"eth0\\"]/pre-down "ifconfig $IFACE down"\'
    description: "Correct quoting in commands expressions (augeas requires quotes in path matching expressions: iface[.=\\"eth0\\"])"
'''

try:
    import augeas
except ImportError:
    augeas = None
import ctypes
import shlex

if augeas:
    # Augeas C API `aug_span` function was introduced on the begining of 2011
    # but python-augeas 0.4 was released month before and doesn't contain bindings for it
    # This code is copied from current devel branch of python-augeas

    # check whether augeas library supports span
    if augeas.Augeas().match('/augeas/span'):
        if not hasattr(augeas.Augeas, 'span'):
            class Augeas(augeas.Augeas):

                ENABLE_SPAN = 128

                def span(self, path):
                    """Get the span according to input file of the node associated with
                    PATH. If the node is associated with a file, un tuple of 5 elements is
                    returned: (filename, label_start, label_end, value_start, value_end,
                    span_start, span_end). If the node associated with PATH doesn't
                    belong to a file or is doesn't exists, ValueError is raised."""

                    if not isinstance(path, basestring):
                        raise TypeError("path MUST be a string!")
                    if not self.__handle:
                        raise RuntimeError("The Augeas object has already been closed!")

                    filename = ctypes.c_char_p()
                    label_start = ctypes.c_uint()
                    label_end = ctypes.c_uint()
                    value_start = ctypes.c_uint()
                    value_end = ctypes.c_uint()
                    span_start = ctypes.c_uint()
                    span_end = ctypes.c_uint()

                    r = ctypes.byref

                    ret = Augeas._libaugeas.aug_span(self.__handle, path, r(filename),
                                                     r(label_start), r(label_end),
                                                     r(value_start), r(value_end),
                                                     r(span_start), r(span_end))
                    if ret < 0:
                        raise ValueError("Error during span procedure")

                    return (filename.value, label_start.value, label_end.value,
                            value_start.value, value_end.value,
                            span_start.value, span_end.value)
        else:
            Augeas = augeas.Augeas


class CommandsParseError(Exception):

    def __init__(self, msg):
        self.msg = msg
        super(CommandsParseError, self).__init__(msg)

    def format_commands(self, commands):
        return '\n'.join('%s %s' % (c, ' '.join(a if a else "''" for a in args.values())) for c, args in commands)


class MissingArgument(CommandsParseError):

    def __init__(self, command, value, already_parsed):
        if already_parsed:
            msg = ('Missing argument "%s" in "%s" statement - already parsed statements:\n%s' %
                    (value, command, self.format_commands(already_parsed)))
        else:
            msg = 'Missing argument "%s" in "%s" statement' % (value, command)
        super(MissingArgument, self).__init__(msg)


class UnknownCommand(CommandsParseError):

    def __init__(self, token, already_parsed):
        if already_parsed:
            msg = ('Incorrect command or previous command quoting:\n'
                   'invalid token: %s\n'
                   'already parsed:\n%s' % (token, self.format_commands(already_parsed)))
        else:
            msg = 'Incorrect command: "%s"' % token
        self.msg = msg
        return super(UnknownCommand, self).__init__(msg)


class TokenizerError(CommandsParseError):

    pass


def parse_commands(commands):
    """
    Basic tests (if you are going to modify this function update/check tests too
                 - the easiest way is to copy them to separate module):

    >>> assert (parse_commands("set '/path/containing/ /space/' 'value with spaces'") == \
                [('set', {'path': '/path/containing/ /space/', 'value': 'value with spaces'})])
    >>> assert (parse_commands("set '/path' 'value\\\\nwith\\\\nnew\\\\nlines'") == \
                [('set', {'path': '/path', 'value': 'value\\\\nwith\\\\nnew\\\\nlines'})])
    >>> assert (parse_commands("set '/path' '\\"\\"'") == \
                [('set', {'path': '/path', 'value': '""'})])
    >>> assert (parse_commands("set '/path' ''") == \
                [('set', {'path': '/path', 'value': ''})])
    >>> assert (parse_commands("set '/path[.=\\"pattern\\"]' ''") == \
                [('set', {'path': '/path[.="pattern"]', 'value': ''})])
    >>> parse_commands("set '/path'")
    Traceback (most recent call last):
    ...
    MissingArgument: Missing argument "value" in "set" statement
    >>> parse_commands("set '/path' '' rm")
    Traceback (most recent call last):
    ...
    MissingArgument: Missing argument "path" in "rm" statement - already parsed statements:
    set /path ''

    """
    COMMANDS = {
        'set': ['path', 'value'],
        'rm': ['path'],
        'match': ['path'],
    }
    try:
        tokens = iter(shlex.split(commands, comments=False))
    except ValueError, e:
        raise TokenizerError("Commands parser error (commands should be correctly quoted strings): %s" % e.args[0])
    parsed = []
    _missing = object()
    command = next(tokens, _missing)
    while command is not _missing:
        if command not in COMMANDS:
            raise UnknownCommand(command, parsed)
        params = {}
        for name in COMMANDS[command]:
            try:
                value = tokens.next()
            except StopIteration:
                raise MissingArgument(command, name, parsed)
            params[name] = value
        parsed.append((command, params))
        command = next(tokens, _missing)
    return parsed


class FileNotFound(Exception):

    def __init__(self, augeas_instance, path, command, params):
        path_parts = path.split('/')
        if not path.startswith('/files/'):
            msg = ('File path has to start with /files/ prefix. '
                   'Augeas was not able to match any file for given path: %s (in: command=%s, params=%s') % (path, command, params)
        else:
            path_parts = path.replace('/files/', '').split('/')
            augeas_path = '/files'
            file_path = ''
            for part in path_parts:
                augeas_path = augeas_path + '/' + part
                if augeas_instance.match(augeas_path):
                    file_path = file_path + '/' + part
            if file_path:
                msg = ('Augeas was not able to match any file for given path: %s (in: command=%s params=%s). '
                       '\nClosest path in augeas tree is: %s') % (path, command, params, file_path)
            else:
                msg = 'Augeas was not able to match any file for given path: %s (in: command=%s params=%s).' % (path, command, params)
        msg += ('\n\nYou can check files managed by augeas through "match" command:\n\n'
                'ansible all -u USERNAME -i INVENTORY_FILE -m augeas -a \'command="match" path="/augeas/files//*" validate_filepath="no"\n\n')
        self.msg = msg
        super(FileNotFound, self).__init__(msg)


class AugeasError(Exception):

    path = None
    error_type = None

    def __init__(self, msg):
        self.msg = msg
        super(AugeasError, self).__init__(msg)

    def format_augeas_errors(self, augeas_instance):
        errors = []
        for error in augeas_instance.match('/augeas//error'):
            error_type = augeas_instance.get(error)
            if not self.error_type or not error_type or self.error_type == error_type:
                errors.append([(p, augeas_instance.get(p)) for p in augeas_instance.match(error + '/' + '*')])

        if errors:
            errors = '\n\n'.join('\n'.join('%s: %s'%(p, v) for p,v in error) for error in errors)
            return ('Augeas has reported following problems '
                    ' (it\'s possible that some of them are unrelated to your action):\n\n%s' % errors)
        if self.error_type is not None:
            return 'Augeas hasn\'t provided any additional info for action type (%s)' % self.error_type
        return 'Augeas hasn\'t provided any additional info'


class PathParseError(AugeasError):

    def __init__(self, augeas_instance, path, correct_subpath):
        msg = ('Path parsing error:\nfull path: %s\n'
               'correct subpath: %s\n\n%s') % (path, correct_subpath,
                                               self.format_augeas_errors(augeas_instance))
        super(PathParseError, self).__init__(msg)


class SaveError(AugeasError):

    def __init__(self, augeas_instance):
        msg = 'Augeas refused to save changes. %s' % self.format_augeas_errors(augeas_instance)
        super(SaveError, self).__init__(msg)


class CommandError(AugeasError):

    def __init__(self, command, params, augeas_instance):
        msg = 'Augeas command execution error (command=%s, params=%s). %s' % (command, params,
                                                                              self.format_augeas_errors(augeas_instance))
        super(CommandError, self).__init__(msg)


class SetError(CommandError):

    error_type = 'put_failed'


def validate_path(augeas_instance, path):
    subpath = correct_subpath = ''
    for part in filter(None, path.split('/')):
        subpath = subpath + '/' + part
        try:
            augeas_instance.match(subpath)
        except RuntimeError:
            raise PathParseError(augeas_instance, path, correct_subpath)
        correct_subpath = subpath


def get_file_for_path(augeas_instance, path):
    subpath = ''
    filename = None
    # this is safe as all '/' chars in augeas paths are separators
    for part in filter(None, path.split('/')):
        subpath = subpath + '/' + part
        if augeas_instance.match(subpath):
            if not filename:
                try:
                    filename = augeas_instance.span(subpath)[0]
                except ValueError:
                    pass
    return filename


def execute(augeas_instance, commands, validate_filepath=True):
    # validate paths
    for command, params in commands:
        if not 'path' in params:
            continue
        path = params['path']
        validate_path(augeas_instance, path)
        if validate_filepath:
            r = get_file_for_path(augeas_instance, path)
            if not r:
                raise FileNotFound(augeas_instance, path, command, params)
    results = []
    changed = False
    for command, params in commands:
        result = None
        if command == 'set':
            path = params['path']
            value = params['value']
            if augeas_instance.get(path) != value:
                try:
                    augeas_instance.set(path, value)
                except ValueError:
                    raise SetError(command, params, augeas_instance)
                result = changed = True
            else:
                result = False
        elif command == 'rm':
            path = params['path']
            if augeas_instance.match(path):
                augeas_instance.remove(path)
                result = changed = True
            else:
                result = False
        else: # match
            result = [{'label': s, 'value': augeas_instance.get(s)} for s in augeas_instance.match(**params)]
        results.append((command + ' ' + ' '.join(p if p else '""' for p in params.values()), result))

    try:
        augeas_instance.save()
    except IOError:
        raise SaveError(augeas_instance)
    return results, changed


def main():
    module = AnsibleModule(
        argument_spec=dict(
            loadpath=dict(default=None),
            root=dict(default=None),
            validate_filepath=dict(default='yes', type='bool'),
            command=dict(required=False, choices=['set', 'rm', 'match']),
            path=dict(aliases=['name', 'context']),
            value=dict(default=None),
            commands=dict(default=None),
        ),
        mutually_exclusive=[['commands', 'command'], ['commands', 'value'],
                            ['commands', 'path']],
        required_together=[('command', 'path')],
        required_one_of=[('command', 'commands')],
    )
    if augeas is None:
        module.fail_json(msg='Could not import python augeas module.'
                             ' Please install augeas related packages and '
                             'augeas python bindings.')
    if module.params['validate_filepath'] and not augeas.Augeas().match('/augeas/span'):
        module.fail_json(msg='Installed augeas library version doesn\'t support `span` functionality.'
                             ' You have to switch off filepath validation (pass validate_filepath=no) '
                             'if you want to proceed.')

    augeas_instance = augeas.Augeas(root=module.params['root'], loadpath=module.params['loadpath'],
                             flags=getattr(augeas.Augeas, 'ENABLE_SPAN', 0))
    commands = None
    if module.params['command'] is not None:
        command = module.params['command']
        if (command == 'set') != (module.params['value'] is not None):
            module.fail_json(msg='You should use "value" argument with "set" command.')
        if command == 'set':
            params = {'path': module.params['path'], 'value': module.params['value']}
        else: # rm or match
            params = {'path': module.params['path']}
        commands = [(command, params)]
    else:
        try:
            commands = parse_commands(module.params['commands'])
        except CommandsParseError, e:
            module.fail_json(msg=e.msg)
    try:
        results, changed = execute(augeas_instance, commands,
                                   validate_filepath=module.params['validate_filepath'])
    except (AugeasError, FileNotFound), e:
        module.fail_json(msg=e.msg)

    # in case of single command execution return only one result
    # in case of multpile commands return list of (command, result) tuples
    if module.params['command'] is not None:
        results = results[0][1]
    module.exit_json(changed=changed, result=results)


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
