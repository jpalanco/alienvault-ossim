#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# License:
#
#    Copyright (c) 2003-2006 ossim.net
#    Copyright (c) 2007-2013 AlienVault
#    All rights reserved.
#
#    This package is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; version 2 dated June, 1991.
#    You may not use, modify or distribute this program under any other version
#    of the GNU General Public License.
#
#    This package is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this package; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#    MA  02110-1301  USA
#
#
# On Debian GNU/Linux systems, the complete text of the GNU General
# Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
# Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt

VERSION = "0.0.1"
DOCUMENTATION = """
author: Manuel Abeledo <mabeledo@alienvault.com>
module: ossec_agent
short_description: queries the OSSEC agent subsystem.
description:
    - This module queries the OSSEC agent subsystem for plenty of crap.
version_added: "%s"
options:
  command:
    description:
      - The agent related OSSEC command to run.
    default: ''
    choices: ['agent_auth', 'agent_control', 'manage_agents', 'verify_agent_conf']
    required: True
  list_available_agents:
    description:
      - List all available agents.
    depends: {'command': [('agent_control', '-l -s')]}
    required: false
  list_online_agents:
    description:
      - List connected agents.
    depends: {'command': [('agent_control', '-lc -s')]}
    required: false
  list_offline_agents:
    description:
      - List non connected agents.
    depends: {'command': [('list_agents', '-n')]}
    required: false
  get_info:
    description:
      - Get information from remote agents.
    default: 'all'
    accepted: available agent ID
    depends: {'command': [('agent_control', '-i')]}
    required: false
  restart_agent:
    description:
      - Restart remote agents.
    default: 'all'
    accepted: available agent ID
    depends: {'command': [('agent_control', '-R')]}
    required: false
  integrity_check:
    description:
      - Run a integrity/rootkit check
    accepted: available agent ID
    depends: {'command': [('agent_control', '-r -u')]}
    required: false

    



""" % VERSION
EXAMPLES= """
"""

import json

# Each parameter requires one command to be called.
REQUIREMENTS = {
    'list_available_agents': {'command': [('agent_control', 'agent_control -s -l')]},
    'list_online_agents': {'command': [('agent_control', 'agent_control -lc -s')]},
    'list_offline_agents': {'command': [('list_agents', 'list_agents -n')]},
    'get_info': {'command': [('agent_control', 'agent_control -i')]},
    'restart_agent': {'command': [('agent_control', 'agent_control -R')]},
    'integrity_check': {'command': [('agent_control', 'agent_control -r -u')]},
}


# Check if the parameters are consistent and return the command argument.
def build_cmd(params):
    cmd = params.get('command')
    args = ''
    for key in params.iterkeys():
        if key == 'command':
            continue
        else:
            if params.get(key) is not None:
                req = REQUIREMENTS[key]
                for req_key in req.iterkeys():
                    req_key_list = req[req_key]
                    for (x, y) in req_key_list:
                        if x == cmd:
                            args += y
                            if params.get(key) is not None and (params.get(key) not in ['true', 'false']):
                                args += ' ' + params.get(key)
                            break

    if args == '':
        return None

    return args


def main():
    # All parameters except 'commands' are mutually exclusive.
    module = AnsibleModule(
        argument_spec=dict(
            command=dict(choices=['agent_auth', 'agent_control', 'manage_agents', 'verify_agent_conf'], required=True),
            list_available_agents=dict(default=None, required=False, choices=BOOLEANS),
            list_online_agents=dict(default=None, required=False, choices=BOOLEANS),
            list_offline_agents=dict(default=None, required=False, choices=BOOLEANS),
            get_info=dict(default=None, required=False),
            restart_agent=dict(default=None, required=False),
            integrity_check=dict(default=None, required=False),
        ),
        required_one_of=[
            [
                'list_available_agents', 'list_online_agents', 'list_offline_agents', 'get_info', 'restart_agent',
                'integrity_check'
            ]
        ],
    )

    path = '/var/ossec/bin/'
    cmd = build_cmd(module.params)
    if cmd is None:
        module.fail_json(rc=1, msg="Command and parameters don't match")
    cmd = path + cmd

    try:
        rc, out, err = module.run_command(cmd)
    except Exception, e:
        module.fail_json(rc=1, msg=str(e))
    else:
        module.exit_json(changed=True, data=out, err=err, rc=rc, cmd=cmd)


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
