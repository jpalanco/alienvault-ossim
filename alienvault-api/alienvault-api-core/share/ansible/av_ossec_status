#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# License:
#
#    Copyright (c) 2003-2006 ossim.net
#    Copyright (c) 2007-2013 AlienVault
#    All rights reserved.
#
#    This package is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; version 2 dated June, 1991.
#    You may not use, modify or distribute this program under any other version
#    of the GNU General Public License.
#
#    This package is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this package; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#    MA  02110-1301  USA
#
#
# On Debian GNU/Linux systems, the complete text of the GNU General
# Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
# Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt
#
# Error:
# 800 - Attachment file doesn't exit
# 801 - Unknown error sending the email
# 802 - Attachament Error.
# Install module at:/usr/share/ansible/
VERSION="0.0.1"
DOCUMENTATION = """
author: Crist√≥bal Rosa <crosa@alienvault.com>
module: av_ossec_status
short_description: Retrieves the ossec process status
description:
    - This module is useful for get information about the ossec status
version_added: "%s"
""" % VERSION
EXAMPLES= """
"""

import subprocess as sub
import json
import os
import re

OSSEC_CONTROL_BIN = "/var/ossec/bin/ossec-control"
OSSEC_MANAGE_AGENTS_BIN = "/var/ossec/bin/manage_agents"


def _run_command(command, args):
    """Run the given command and returns the return code, the output and the stderr"""
    try:
        pipe = sub.Popen([command, args], stdout=sub.PIPE,stdin=sub.PIPE,stderr=sub.PIPE)
        output,error = pipe.communicate()
        return_code = pipe.returncode
    except Exception as exp:
        return_code = 1
        output = ""
        error = str(exp)
    return return_code, output, error


def _get_number_of_agents():
    """Parses the manage agents output and returns the number of agents"""
    nagents = 0
    rc, output,error = _run_command(OSSEC_MANAGE_AGENTS_BIN,"-l")
    if rc != 0:
        return False, error
    for line in output.split('\n'):
        print line
        if line.find("ID:") > 0:
            nagents += 1
    return True, nagents


def _get_ossec_status():
    rc, output,error = _run_command(OSSEC_CONTROL_BIN,"status")
    # Do not check the rc. If one of the ossec process is not running the return code will be != 0
    general_status = {}
    for line in output.split('\n'):
        matchobj = re.match("(?P<process>ossec-\S+) (?P<status>is|not) running...",line)
        if matchobj is None:
           continue
        data = matchobj.groupdict()
        general_status[data['process']] = "UP" if data['status'] == "is" else "DOWN"

    return True, general_status, output


def _is_debug_enabled():
    ossec_plist ="/var/ossec/bin/.process_list"
    if not os.path.exists(ossec_plist):
        return False
    f = open(ossec_plist, 'r')
    debug = False
    for line in f.readlines():
        if line.rstrip() == "DEBUG_CLI=\"-d\"":
            debug = True
        if line.rstrip() == "DEBUG_CLI=\"\"":
            debug = False
    return debug


def get_general_status():
    rc, nagents = _get_number_of_agents()
    if not rc:
        return False,nagents
    rc, general_status, raw_output = _get_ossec_status()
    if not rc:
        return False, "An error occurred while retrieving the ossec status"

    service_status = {
        'database': "DOWN",
        'syslog': "DOWN",
        'debug': "DOWN",
        'agentless': "DOWN",
        'service': "DOWN"
    }

    if 'ossec-dbd' in general_status:
        service_status['database'] = general_status['ossec-dbd']
    if 'ossec-csyslogd' in general_status:
        service_status['syslog'] = general_status['ossec-csyslogd']
    if 'ossec-agentlessd' in general_status:
        service_status['agentless'] = general_status['ossec-agentlessd']

    # Check service status:
    ossec_service_status = "DOWN"
    if 'ossec-analysisd' not in general_status:
        return False, general_status
    if nagents < 1:
        if general_status['ossec-analysisd'] == "UP" and \
                general_status['ossec-syscheckd'] == "UP" and \
                general_status['ossec-logcollector'] == "UP" and \
                general_status['ossec-monitord'] == "UP":
            ossec_service_status = "UP"
    elif general_status['ossec-analysisd'] == "UP" and \
            general_status['ossec-syscheckd'] == "UP" and \
            general_status['ossec-remoted'] == "UP" and \
            general_status['ossec-monitord'] == "UP":
        ossec_service_status = "UP"
    service_status['service'] = ossec_service_status
    service_status['debug'] = "UP" if _is_debug_enabled() else "DOWN"
    return True, {'general_status': general_status, 'service_status': service_status, 'raw_output_status': raw_output}


def main():
    module = AnsibleModule(argument_spec=dict())
    result, data = get_general_status()
    if not result:
        module.fail_json(msg=data)
    module.exit_json(changed=True, data=data)
# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()

# vim:ts=4 sts=4 tw=79 expandtab:
