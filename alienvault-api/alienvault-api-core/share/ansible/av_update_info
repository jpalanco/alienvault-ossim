#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# License:
#
#    Copyright (c) 2003-2006 ossim.net
#    Copyright (c) 2007-2013 AlienVault
#    All rights reserved.
#
#    This package is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; version 2 dated June, 1991.
#    You may not use, modify or distribute this program under any other version
#    of the GNU General Public License.
#
#    This package is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this package; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
#    MA  02110-1301  USA
#
#
# On Debian GNU/Linux systems, the complete text of the GNU General
# Public License can be found in `/usr/share/common-licenses/GPL-2'.
#
# Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt

import subprocess as sub
import os
import pytz
import datetime

VERSION="0.0.1"
DOCUMENTATION="""
author: Cristobal Rosa Galisteo <crosa@alienvault.com>
module: av_update_info
short_description: Retrieves information about available updates.
description:
    - Module that retrieves available package updates an current packages information from a given system.
version_added: "%s"
options:

""" % VERSION
EXAMPLES="""
ansible 10.80.50.119 -s -m av_update_info
"""


def _run_command(command, args=None):
    """Run the given command and returns the return code, the output and the stderr"""
    try:
        pipe = sub.Popen(command, stdout=sub.PIPE, stdin=sub.PIPE, stderr=sub.PIPE, shell=True)
        if args is not None:
            pipe = sub.Popen([command, args], stdout=sub.PIPE, stdin=sub.PIPE, stderr=sub.PIPE, shell=True)

        output, error = pipe.communicate()
        return_code = pipe.returncode
    except Exception as exp:
        return_code = 1
        output = ""
        error = str(exp)

    return return_code, output, error


def run_apt_get_update():
    cmd = "apt-get update"
    try:
        return_code, output, error_str = _run_command(cmd)
    except Exception as exp:
        return_code = 1
        output = "Error while doing '{}'.".format(cmd)
        error_str = str(exp)
    return return_code, output, error_str


def get_available_updates():

    delimiter = "@@@@"
    # Retrieve all the upgradable packages (~U) and omit the hold ones (\!~aHold).
    cmd = "aptitude -F '%p" + delimiter + "%v" + delimiter + "%V" + delimiter + "%D" + delimiter + "%o' --disable-columns search ~U\!~aHold"
    try:
        """ Aptitude Format: 
        %p -> package name
        %v -> current version
        %V -> candidate version
        %D -> package size
        %o -> download size
        """
        return_code, output, error_str = _run_command(cmd)
        if return_code == 0:
            packages = []
            for line in output.split('\n'):
                data = line.split(delimiter)
                if len(data) == 5:
                    package_data = {
                        'package-name': data[0],
                        'package-current-version': data[1],
                        'package-candidate-version': data[2],
                        'package-size': data[3]
                    }
                    packages.append(package_data)
            output = packages
    except Exception as exp:
        return_code = 1
        output = "Error while doing '{}'.".format(cmd)
        error_str = str(exp)
    return return_code, output, error_str


def get_total_packages():
    cmd = "aptitude search '~i' |wc -l"
    try:
        npackages = 0
        return_code, output, error_str = _run_command(cmd)
        if return_code == 0:
            npackages = int(output)
    except Exception:
        npackages = 0
    return npackages


def get_my_timezone():
    # We set the timezone at /etc/timezone
    try:
        if os.path.exists('/etc/timezone'):
            with open('/etc/timezone', 'rb') as timezonefile:
                timezone = timezonefile.read().rstrip()
                if timezone not in pytz.all_timezones_set:
                    return None
                return pytz.timezone(timezone)
    except Exception as err:
        pass
    # If no timezone found return None
    return None


def get_last_time_update():
    last_time_str = "unknown"
    try:
        cmd = "tail -1 /var/log/dpkg.log | awk {'print $1,$2'}"
        return_code, output, error_str = _run_command(cmd)
        if return_code == 0:
            last_time_str = output.rstrip()
            # Convert the date to UTC:
            mytimezone = get_my_timezone()
            if mytimezone is not None:
                formatted_local_datetime = datetime.datetime.strptime(last_time_str, "%Y-%m-%d %H:%M:%S")
                local_dt = mytimezone.localize(formatted_local_datetime, is_dst=None)
                utc_dt = local_dt.astimezone(pytz.utc)
                last_time_str = utc_dt.strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        last_time_str = "unknown"
    return last_time_str


def get_current_version():
    cmd = "dpkg -l | grep ossim-cd-tools | awk '{print $3}' | awk -F'-' '{ print $1 }'"
    try:
        version = "Unknown"
        return_code, output, error_str = _run_command(cmd)
        if return_code == 0:
            version = output.rstrip()
    except Exception:
        version = "Unknown"
    return version


def get_packages_info():
    state = {
        'total_packages': get_total_packages(),
        'total_packages_with_updates_available': 0,
        'pending_updates': False,
        'last_update_status': get_last_update_status(),
        'pending_feed_updates': False,
        'pending_system_updates': False,
        'last_feed_update_status': get_last_update_status(feed_only=True),
        'current_version': get_current_version(),
        'last_update': get_last_time_update(),
        'available_updates': [],
        'success': True,
        'error': "",
    }
    rc, output, error = run_apt_get_update()
    if rc != 0:
        state['success'] = False
        state['error'] = error
        return True, state

    rc, output, error = get_available_updates()
    if rc != 0:
        state['success'] = False
        state['error'] = error
        return True, state
    state['available_updates'] = output
    if len(output) > 0:
        state['pending_updates'] = True
        state['total_packages_with_updates_available'] = len(output)
        package_name_list = [x['package-name'] for x in state['available_updates']]
        feed = [
            "alienvault-crosscorrelation",
            "alienvault-directives",
            "suricata-rules-default",
            "alienvault-cpe",
            "alienvault-plugins",
            "alienvault-plugin-sids",
            "alienvault-gvm11-feed",
            "alienvault-reporting",
            "alienvault-ossec-rules"
        ]
        state['pending_feed_updates'] = any(x in feed for x in package_name_list)

        system = [ "ossim-cd-tools" ]
        state['pending_system_updates'] = any(x in system for x in package_name_list)

    return True, state


def get_last_update_status(feed_only=False):
    """Returns last update status from *.log.rc files
    Args:
      feed_only(bool): True for feed updates

    Returns:
      True if return code from *.log.rc is 0
      Otherwise returns False

    Examples:
      get_last_update_status(feed_only=False)
      "awk 'NR==1' $(find /var/log/alienvault/update -name 'system_update_*.log.rc' | sort -V | grep -v feed | tail -1)"

      get_last_update_status(feed_only=True)
      "awk 'NR==1' $(find /var/log/alienvault/update -name 'system_update_feed*.log.rc' | sort -V | tail -1)"
    """
    logs_path = "/var/log/alienvault/update"
    feed_rc = "system_update_feed*.log.rc"
    update_rc = "system_update_*.log.rc"
    exclude_feed = "| grep -v feed "

    cmd = "awk 'NR==1' $(find {} -name '{}' | sort -V {}| tail -1)".format(
        logs_path,
        feed_rc if feed_only else update_rc,
        "" if feed_only else exclude_feed
    )
    try:
        return_code, output, error_str = _run_command(cmd)
        if return_code == 0:
            status = int(output.rstrip())
    except Exception:
        status = "Unknown"
    return True if status < 1 else False


def main():
    module = AnsibleModule(argument_spec=dict())

    success, data = get_packages_info()
    if not success:
        module.fail_json(msg=data)

    module.exit_json(changed=True, data=data)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
