#!/bin/sh
### BEGIN INIT INFO
# Provides:          alienvault-api
# Required-Start:    $remote_fs $syslog rabbitmq-server redis-server alienvault-redis-server-otx
# Required-Stop:     $remote_fs $syslog rabbitmq-server redis-server alienvault-redis-server-otx
# Should-Start:      mysql ossim-server ossim-agent
# Should-Stop:       mysql ossim-server ossim-agent
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: AlienVault API init script
# Description:       AlienVault API init script
### END INIT INFO

#set -e
# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

NAME=api
DESC="AlienVault API"

CELERYD="/usr/share/python/alienvault-api/scripts/venv_celeryd.sh"
CELERYBEAT="/usr/share/python/alienvault-api/scripts/venv_celerybeat.sh"

#
# Function to cleanup rabbit queues.
#
cleanup_rabbit_queues() {
  log_daemon_msg "Clean up rabbit queues"
  rabbitmqctl stop_app > /dev/null 2>&1
  rabbitmqctl reset > /dev/null 2>&1
  rabbitmqctl start_app > /dev/null 2>&1
}


#
# Function that starts the daemon/service
#
do_start() {
  # we ensure rabbitmq-server is already started
  service rabbitmq-server start &> /dev/null
  # We don't want to process old tasks, so reset our rabbitapp.
  cleanup_rabbit_queues

  if [ -d "/var/log/alienvault/api" ]; then
      chown avapi:alienvault /var/log/alienvault/api -R
      for logfile in /var/log/alienvault/api/*; do chmod 644 $logfile; done
  fi

  log_daemon_msg "Starting CeleryBeat" "celerybeat"
  start-stop-daemon --quiet --start --exec $CELERYBEAT start
  # ($CELERYBEAT start > /dev/null 2>&1 && log_success_msg) || (log_failure_msg && return $?)

  log_daemon_msg "Starting CeleryD" "celeryd"
  start-stop-daemon --quiet --start --exec $CELERYD start
  # ($CELERYD start > /dev/null 2>&1 && log_success_msg) || (log_failure_msg && return $?)
}

#
# Function that stops the daemon/service
#
do_stop() {
  # Exit
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred

  # Just try to kill stunnel4

  log_daemon_msg "Stopping CeleryD" "celeryd"
  ($CELERYD stop > /dev/null 2>&1 && log_success_msg) || (log_failure_msg && return $?)
  kill -9 `ps aux|grep celery.bin.celeryd | awk '{print $2}'`  > /dev/null 2>&1 || true
  log_daemon_msg "Stopping CeleryBeat" "celerybeat"
  ($CELERYBEAT stop > /dev/null 2>&1 && log_success_msg) || (log_failure_msg && return $?)

  service rabbitmq-server stop &> /dev/null
  RABITMQ_SERVER=$(ps uax | grep rabbitmq | grep -v grep | awk '{print $2}')
  if [ "$RABITMQ_SERVER" != "" ]; then
    echo "$RABITMQ_SERVER" | xargs kill -9
  fi


  return 0
}

do_reload() {
  exit 0
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  log_success_msg
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  log_success_msg
  do_stop
  case "$?" in
    0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  restart|force-reload)
  log_daemon_msg "Restarting $DESC" "$NAME"
  log_success_msg
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  reload)
  log_daemon_msg "Reloading $DESC" "$NAME"
  log_success_msg
  do_reload
  case "$?" in
    0) log_end_msg 0 ;;
    *) log_end_msg 1 ;;
  esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
  ;;
esac

#if [ -e /proc/$$/fd/3 ]; then
#    echo STOP  2>&1 >/dev/null  >&3 || /bin/true
#fi
exit 0
