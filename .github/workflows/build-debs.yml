name: Build and Deploy DEB Packages

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Build the DEB packages on Debian Stretch.
      # This step runs a container based on debian:stretch.
      # It replaces the default sources list with legacy archive entries,
      # enables deb-src lines, and installs a broad set of build dependencies.
      # The dpkg-buildpackage command is forced (with -d) to ignore unmet build dependencies.
      - name: Build DEB Packages on Stretch
        run: |
          echo "Running build in custom container..."
          docker run --rm -v "$PWD":/workspace debian:stretch bash -c "\
            # Replace sources list with legacy archive entries
            echo 'deb http://archive.debian.org/debian stretch main contrib non-free' > /etc/apt/sources.list && \
            echo 'deb http://archive.debian.org/debian-security stretch/updates main' >> /etc/apt/sources.list && \
            # Disable the Check-Valid-Until option for archived repos
            echo 'Acquire::Check-Valid-Until \"false\";' > /etc/apt/apt.conf.d/99no-check-valid-until && \
            apt-get update && \
            apt-get install -y \
              build-essential \
              devscripts \
              debhelper \
              dpkg-dev \
              apt-utils \
              python-dev \
              python-sphinx \
              python2.7-dev \
              python-setuptools \
              dh-virtualenv \
              libglib2.0-dev \
              librrd-dev \
              libmariadbclient-dev \
              libssl-dev \
              libffi-dev \
              libxml2-dev \
              libcairo2-dev \
              libpango1.0-dev \
              python-mysqldb \
              python-all-dev \
              libjson-glib-dev \
              docbook-to-man \
              pkg-config \
              libhiredis-dev \
              libbson-dev \
              libmaxminddb-dev \
              libgnet2-dev \
              dpatch \
              uuid-dev \
              libsoup2.4-dev \
              php-dev \
              php-mbstring \
              config-package-dev && \
            for pkg in \$(find . -type d -name debian -printf '%h\n' | sort -u); do \
              echo '-----------------------------'; \
              echo \"Building package in: \$pkg\"; \
              cd \$pkg; \
              if [ -f debian/control ]; then \
                dpkg-buildpackage -uc -us -d || echo \"⚠️  Build failed in \$pkg\"; \
              else \
                echo \"No debian/control file found in \$pkg, skipping...\"; \
              fi; \
              cd - > /dev/null; \
            done"
        id: build

      # 3. Upload all generated .deb files as an artifact for use in the deploy job.
      - name: Upload DEB Files Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: "*.deb"

  deploy:
    needs: build-deb
    runs-on: ubuntu-latest
    steps:
      # 4. Download the artifact generated in the build job.
      - name: Download DEB Package Artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          path: output

      # 5. Generate the APT repository index file (Packages.gz) in the output directory.
      - name: Create APT Repository Index
        run: |
          cd output
          echo "Generating Packages.gz index..."
          dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
          ls -la
          cd ..

      # 6. Deploy the output folder to GitHub Pages.
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: output

