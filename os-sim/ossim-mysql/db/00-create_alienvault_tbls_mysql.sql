-- MySQL Script generated by MySQL Workbench
-- Tue Sep 15 12:31:21 2015
-- Model: AlienVault    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='STRICT_ALL_TABLES,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema alienvault
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `acl_perm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_perm` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `type` ENUM('MENU') NULL DEFAULT NULL,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  `value` VARCHAR(255) NULL DEFAULT NULL,
  `description` VARCHAR(128) NOT NULL,
  `granularity_sensor` TINYINT(1) NOT NULL,
  `granularity_net` TINYINT(1) NOT NULL,
  `enabled` TINYINT(4) NULL DEFAULT '1',
  `ord` VARCHAR(5) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `acl_templates`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_templates` (
  `id` BINARY(16) NOT NULL,
  `name` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `acl_templates_perms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_templates_perms` (
  `ac_templates_id` BINARY(16) NOT NULL,
  `ac_perm_id` INT(11) NOT NULL,
  PRIMARY KEY (`ac_templates_id`, `ac_perm_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `action_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `action_type` (
  `type` INT NOT NULL,
  `descr` VARCHAR(255) NOT NULL,
  `name` ENUM('email','exec','ticket') NOT NULL,
  PRIMARY KEY (`type`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `server`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `server` (
  `id` BINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `ip` VARBINARY(16) NULL DEFAULT NULL,
  `port` INT(11) NOT NULL,
  `descr` VARCHAR(255) NOT NULL,
  `remoteadmin` VARCHAR(64) NOT NULL,
  `remotepass` VARCHAR(128) CHARACTER SET 'latin1' COLLATE 'latin1_general_ci' NOT NULL,
  `remoteurl` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `user_ctx_perm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user_ctx_perm` (
  `login` VARCHAR(64) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  PRIMARY KEY (`login`, `ctx`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `acl_entities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_entities` (
  `id` BINARY(16) NOT NULL,
  `server_id` BINARY(16) NOT NULL DEFAULT 0x0,
  `name` VARCHAR(128) NULL DEFAULT NULL,
  `admin_user` VARCHAR(64) NOT NULL,
  `address` TINYTEXT NULL DEFAULT NULL,
  `timezone` VARCHAR(64) NOT NULL DEFAULT 'GMT',
  `parent_id` BINARY(16) NOT NULL DEFAULT 0x0,
  `entity_type` ENUM('logical','context','engine') NOT NULL DEFAULT 'logical',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `action`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `action` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `action_type` INT NOT NULL,
  `cond` VARCHAR(255) NOT NULL,
  `on_risk` TINYINT(1) NOT NULL,
  `descr` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `action_email`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `action_email` (
  `action_id` BINARY(16) NOT NULL,
  `_from` VARCHAR(255) NOT NULL,
  `_to` VARCHAR(255) NOT NULL,
  `subject` TEXT NULL DEFAULT NULL,
  `message` TEXT NULL DEFAULT NULL,
  `message_suffix` tinyint unsigned NOT NULL default 1,
  PRIMARY KEY (`action_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `action_exec`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `action_exec` (
  `action_id` BINARY(16) NOT NULL,
  `command` TEXT NOT NULL,
  PRIMARY KEY (`action_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `alarm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `alarm` (
  `backlog_id` BINARY(16) NOT NULL,
  `event_id` BINARY(16) NOT NULL,
  `corr_engine_ctx` BINARY(16) NOT NULL,
  `timestamp` TIMESTAMP NULL DEFAULT NULL,
  `status` ENUM('open','closed') NULL DEFAULT 'open',
  `plugin_id` INT(11) NOT NULL,
  `plugin_sid` INT(11) NOT NULL,
  `protocol` INT(11) NULL DEFAULT NULL,
  `src_ip` VARBINARY(16) NULL DEFAULT NULL,
  `dst_ip` VARBINARY(16) NULL DEFAULT NULL,
  `src_port` INT(11) NULL DEFAULT NULL,
  `dst_port` INT(11) NULL DEFAULT NULL,
  `risk` INT(11) NULL DEFAULT NULL,
  `efr` INT(11) NOT NULL DEFAULT 0,
  `similar` VARCHAR(40) NOT NULL DEFAULT '0000000000000000000000000000000000000000',
  `stats` MEDIUMTEXT NOT NULL,
  `removable` TINYINT(1) NOT NULL DEFAULT 0,
  `in_file` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`backlog_id`),
  INDEX `src_ip` (`src_ip` ASC),
  INDEX `dst_ip` (`dst_ip` ASC),
  INDEX `status` (`status` ASC, `timestamp` ASC),
  INDEX `similar` (`status` ASC, `similar` ASC),
  INDEX `risk` (`status` ASC, `risk` ASC),
  INDEX `event_id` (`event_id` ASC),
  INDEX `plugins` (`plugin_id` ASC, `plugin_sid` ASC),
  INDEX `removable` (`removable` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `action_risk`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `action_risk` (
  `action_id` BINARY(16) NOT NULL,
  `backlog_id` BINARY(16) NOT NULL,
  `risk` INT NOT NULL,
  PRIMARY KEY (`action_id`, `backlog_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `alarm_groups`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `alarm_groups` (
  `group_id` VARCHAR(255) NOT NULL,
  `description` TEXT NOT NULL,
  `status` ENUM('open','closed') NOT NULL,
  `timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `owner` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`group_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tag` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `type` VARCHAR(32) NOT NULL,
  `class` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `type` (`type` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `component_tags`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `component_tags` (
  `id_component` BINARY(16) NOT NULL,
  `id_tag` BINARY(16) NOT NULL,
  PRIMARY KEY (`id_component`, `id_tag`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `backlog`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `backlog` (
  `id` BINARY(16) NOT NULL DEFAULT '0',
  `corr_engine_ctx` BINARY(16) NOT NULL,
  `directive_id` INT(11) NOT NULL,
  `timestamp` DATETIME NULL DEFAULT NULL,
  `last` DATETIME NULL DEFAULT NULL,
  `matched` TINYINT(4) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `directive_id` (`directive_id` ASC),
  INDEX `timestamp` (`timestamp` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `event` (
  `id` BINARY(16) NOT NULL,
  `agent_ctx` BINARY(16) NOT NULL,
  `timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `tzone` FLOAT NOT NULL DEFAULT '0',
  `sensor_id` BINARY(16) NULL,
  `interface` VARCHAR(32) NOT NULL,
  `type` INT(11) NOT NULL,
  `plugin_id` INT(11) NOT NULL,
  `plugin_sid` INT(11) NOT NULL,
  `protocol` INT(11) NULL DEFAULT NULL,
  `src_ip` VARBINARY(16) NULL DEFAULT NULL,
  `dst_ip` VARBINARY(16) NULL DEFAULT NULL,
  `src_port` INT(11) NULL DEFAULT NULL,
  `dst_port` INT(11) NULL DEFAULT NULL,
  `event_condition` INT(11) NULL DEFAULT NULL,
  `value` TEXT NULL DEFAULT NULL,
  `time_interval` INT(11) NULL DEFAULT NULL,
  `absolute` TINYINT(4) NULL DEFAULT NULL,
  `priority` INT(11) NULL DEFAULT 1,
  `reliability` INT(11) NULL DEFAULT 1,
  `asset_src` INT(11) NULL DEFAULT 1,
  `asset_dst` INT(11) NULL DEFAULT 1,
  `risk_a` INT(11) NULL DEFAULT 0,
  `risk_c` INT(11) NULL DEFAULT 0,
  `alarm` TINYINT(4) NULL DEFAULT 0,
  `filename` VARCHAR(256) NULL DEFAULT NULL,
  `username` VARCHAR(64) NULL DEFAULT NULL,
  `password` VARCHAR(64) NULL DEFAULT NULL,
  `userdata1` VARCHAR(1024) NULL DEFAULT NULL,
  `userdata2` VARCHAR(1024) NULL DEFAULT NULL,
  `userdata3` VARCHAR(1024) NULL DEFAULT NULL,
  `userdata4` VARCHAR(1024) NULL DEFAULT NULL,
  `userdata5` VARCHAR(1024) NULL DEFAULT NULL,
  `userdata6` VARCHAR(1024) NULL DEFAULT NULL,
  `userdata7` VARCHAR(1024) NULL DEFAULT NULL,
  `userdata8` VARCHAR(1024) NULL DEFAULT NULL,
  `userdata9` VARCHAR(1024) NULL DEFAULT NULL,
  `rulename` TEXT NULL DEFAULT NULL,
  `rep_prio_src` INT(10) UNSIGNED NULL DEFAULT NULL,
  `rep_prio_dst` INT(10) UNSIGNED NULL DEFAULT NULL,
  `rep_rel_src` INT(10) UNSIGNED NULL DEFAULT NULL,
  `rep_rel_dst` INT(10) UNSIGNED NULL DEFAULT NULL,
  `rep_act_src` VARCHAR(64) NULL DEFAULT NULL,
  `rep_act_dst` VARCHAR(64) NULL DEFAULT NULL,
  `src_hostname` VARCHAR(64) NULL DEFAULT NULL,
  `dst_hostname` VARCHAR(64) NULL DEFAULT NULL,
  `src_mac` BINARY(6) NULL DEFAULT NULL,
  `dst_mac` BINARY(6) NULL DEFAULT NULL,
  `src_host` BINARY(16) NULL DEFAULT NULL,
  `dst_host` BINARY(16) NULL DEFAULT NULL,
  `src_net` BINARY(16) NULL DEFAULT NULL,
  `dst_net` BINARY(16) NULL DEFAULT NULL,
  `refs` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `event_idx` (`timestamp` ASC),
  INDEX `src_ip` (`src_ip` ASC),
  INDEX `dst_ip` (`dst_ip` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `backlog_event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `backlog_event` (
  `backlog_id` BINARY(16) NOT NULL,
  `event_id` BINARY(16) NOT NULL,
  `time_out` INT(11) NULL DEFAULT NULL,
  `occurrence` INT(11) NULL DEFAULT NULL,
  `rule_level` INT(11) NULL DEFAULT NULL,
  `matched` TINYINT(4) NULL DEFAULT NULL,
  PRIMARY KEY (`backlog_id`, `event_id`),
  INDEX `event_idx` (`event_id` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `user_host_perm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user_host_perm` (
  `login` VARCHAR(64) NOT NULL,
  `asset_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`login`, `asset_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `user_host_filter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user_host_filter` (
  `session_id` VARCHAR(64) NOT NULL,
  `asset_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`session_id`, `asset_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `hostname` VARCHAR(128) NOT NULL,
  `fqdns` VARCHAR(255) NOT NULL,
  `asset` SMALLINT(6) NOT NULL,
  `threshold_c` INT(11) NOT NULL,
  `threshold_a` INT(11) NOT NULL,
  `alert` INT(11) NOT NULL,
  `persistence` INT(11) NOT NULL,
  `nat` VARCHAR(15) NULL DEFAULT NULL,
  `rrd_profile` VARCHAR(64) NULL DEFAULT NULL,
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  `lat` VARCHAR(255) NULL DEFAULT '0',
  `lon` VARCHAR(255) NULL DEFAULT '0',
  `icon` MEDIUMBLOB NULL DEFAULT NULL,
  `country` VARCHAR(64) NULL,
  `external_host` TINYINT(1) NOT NULL DEFAULT FALSE,
  `permissions` BINARY(8) NOT NULL DEFAULT 0x0,
  `av_component` TINYINT(1) NOT NULL DEFAULT FALSE,
  `created` DATETIME NULL DEFAULT NULL,
  `updated` DATETIME NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `search` (`hostname` ASC, `fqdns` ASC),
  INDEX `ctx` (`ctx` ASC),
  INDEX `created` (`created` ASC),
  INDEX `updated` (`updated` ASC),
  INDEX `asset` (`asset` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `user_net_perm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user_net_perm` (
  `login` VARCHAR(64) NOT NULL,
  `asset_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`login`, `asset_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `net`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `ips` TEXT NOT NULL,
  `asset` INT(11) NOT NULL,
  `threshold_c` INT(11) NOT NULL,
  `threshold_a` INT(11) NOT NULL,
  `alert` INT(11) NOT NULL,
  `persistence` INT(11) NOT NULL,
  `rrd_profile` VARCHAR(64) NULL DEFAULT NULL,
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  `icon` MEDIUMBLOB NULL DEFAULT NULL,
  `external_net` TINYINT(1) NOT NULL DEFAULT FALSE,
  `permissions` BINARY(8) NOT NULL DEFAULT 0x0,
  `owner` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `name` (`name` ASC),
  INDEX `ctx` (`ctx` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `asset_filter_types`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `asset_filter_types` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `filter` VARCHAR(128) NULL,
  `type` VARCHAR(128) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `asset_filters`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `asset_filters` (
  `group_id` BINARY(16) NOT NULL,
  `filter_id` INT(11) NOT NULL,
  `value_from` INT(11) NOT NULL DEFAULT 0,
  `value_to` INT(11) NOT NULL DEFAULT 0,
  `value` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`group_id`, `filter_id`, `value_from`, `value_to`, `value`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `hids_agents`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `hids_agents` (
  `sensor_id` BINARY(16) NOT NULL,
  `agent_id` VARCHAR(5) NOT NULL,
  `agent_name` VARCHAR(128) NULL,
  `agent_ip` VARCHAR(32) NULL,
  `agent_status` TINYINT(1) NULL,
  `host_id` BINARY(16) NULL,
  PRIMARY KEY (`sensor_id`, `agent_id`),
  INDEX `status` (`agent_status` ASC),
  INDEX `host_id` (`host_id` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_group` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `same_host` TINYINT(1) NOT NULL DEFAULT FALSE,
  `name` VARCHAR(128) NOT NULL,
  `threshold_c` INT(11) NOT NULL,
  `threshold_a` INT(11) NOT NULL,
  `rrd_profile` VARCHAR(64) NULL DEFAULT NULL,
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  `permissions` BINARY(8) NOT NULL DEFAULT 0x0,
  `owner` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `net_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net_group` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `threshold_c` INT(11) NOT NULL,
  `threshold_a` INT(11) NOT NULL,
  `rrd_profile` VARCHAR(64) NULL DEFAULT NULL,
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  `permissions` BINARY(8) NOT NULL DEFAULT 0x0,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sensor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sensor` (
  `id` BINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `ip` VARBINARY(16) NULL DEFAULT NULL,
  `priority` SMALLINT(6) NOT NULL,
  `port` INT(11) NOT NULL,
  `connect` SMALLINT(6) NOT NULL,
  `descr` VARCHAR(255) NOT NULL,
  `tzone` FLOAT NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `category` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `category_changes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `category_changes` (
  `id` INT NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `classification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `classification` (
  `id` INT(11) NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `priority` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `config`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `config` (
  `conf` VARCHAR(255) NOT NULL,
  `value` TEXT CHARACTER SET 'latin1' COLLATE 'latin1_general_ci' NULL DEFAULT NULL,
  PRIMARY KEY (`conf`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `control_panel`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `control_panel` (
  `id` VARCHAR(128) NOT NULL,
  `rrd_type` VARCHAR(6) NOT NULL DEFAULT 'host',
  `time_range` VARCHAR(5) NOT NULL DEFAULT 'day',
  `max_c` INT(11) NOT NULL,
  `max_a` INT(11) NOT NULL,
  `max_c_date` DATETIME NULL DEFAULT NULL,
  `max_a_date` DATETIME NULL DEFAULT NULL,
  `c_sec_level` FLOAT NULL DEFAULT NULL,
  `a_sec_level` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`id`, `rrd_type`, `time_range`),
  INDEX `type_time` (`rrd_type` ASC, `time_range` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `credential_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `credential_type` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `credentials`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `credentials` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `type` INT(11) NULL DEFAULT NULL,
  `username` TEXT NULL DEFAULT NULL,
  `password` TEXT CHARACTER SET 'latin1' COLLATE 'latin1_general_ci' NULL DEFAULT NULL,
  `extra` TEXT NULL DEFAULT NULL,
  `sensor_ip` VARBINARY(16) NOT NULL,
  `host_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `custom_report_profiles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `custom_report_profiles` (
  `id` INT(5) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `creator` VARCHAR(64) NOT NULL,
  `permissions` VARCHAR(64) NULL DEFAULT NULL,
  `header` VARCHAR(64) NOT NULL,
  `lfooter` VARCHAR(64) NOT NULL,
  `rfooter` VARCHAR(64) NOT NULL,
  `color1` VARCHAR(64) NOT NULL,
  `color2` VARCHAR(64) NOT NULL,
  `color3` VARCHAR(64) NOT NULL,
  `color4` VARCHAR(64) NOT NULL,
  `header_title_possition` ENUM('left','right','center') NOT NULL DEFAULT 'right',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name` (`name` ASC, `creator` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `custom_report_scheduler`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `custom_report_scheduler` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `schedule_type` VARCHAR(5) NOT NULL,
  `schedule_name` VARCHAR(20) NOT NULL,
  `schedule` TEXT NOT NULL,
  `next_launch` DATETIME NOT NULL,
  `id_report` VARCHAR(512) NOT NULL,
  `name_report` VARCHAR(512) NOT NULL,
  `user` VARCHAR(64) NOT NULL,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `date_from` DATE NULL DEFAULT NULL,
  `date_to` DATE NULL DEFAULT NULL,
  `date_range` VARCHAR(30) NULL DEFAULT NULL,
  `assets` TINYTEXT NULL DEFAULT NULL,
  `save_in_repository` TINYINT(1) NOT NULL,
  `file_type` varchar(8) NOT NULL DEFAULT 'pdf',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `custom_report_types`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `custom_report_types` (
  `id` INT(11) NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `type` VARCHAR(128) NOT NULL,
  `file` VARCHAR(128) NOT NULL,
  `inputs` TEXT NOT NULL,
  `sql` LONGTEXT NOT NULL,
  `dr` INT(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `databases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `databases` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `ip` VARBINARY(16) NOT NULL,
  `port` INT(11) NOT NULL DEFAULT '3306',
  `user` VARCHAR(64) NOT NULL,
  `pass` VARCHAR(64) CHARACTER SET 'latin1' COLLATE 'latin1_general_ci' NOT NULL,
  `icon` MEDIUMBLOB NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_agentless`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_agentless` (
  `ip` VARCHAR(15) NOT NULL,
  `sensor_id` VARCHAR(36) NOT NULL,
  `hostname` VARCHAR(128) NOT NULL,
  `user` VARCHAR(128) NOT NULL,
  `pass` VARCHAR(128) CHARACTER SET 'latin1' COLLATE 'latin1_general_ci' NOT NULL,
  `ppass` VARCHAR(128) CHARACTER SET 'latin1' COLLATE 'latin1_general_ci' NULL DEFAULT NULL,
  `use_su` TINYINT(1) NOT NULL DEFAULT '0',
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  `status` INT(2) NOT NULL DEFAULT '1',
  PRIMARY KEY (`ip`, `sensor_id`),
  INDEX `search` (`hostname` ASC, `user` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_agentless_entries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_agentless_entries` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ip` VARCHAR(15) NOT NULL,
  `sensor_id` VARCHAR(36) NOT NULL,
  `type` VARCHAR(64) CHARACTER SET 'utf8' COLLATE 'utf8_general_ci' NOT NULL,
  `frequency` INT(10) NOT NULL,
  `state` VARCHAR(20) CHARACTER SET 'utf8' COLLATE 'utf8_general_ci' NOT NULL,
  `arguments` TEXT CHARACTER SET 'utf8' COLLATE 'utf8_general_ci' NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `ip` (`ip` ASC, `type` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_group_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_group_reference` (
  `host_group_id` BINARY(16) NOT NULL,
  `host_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`host_group_id`, `host_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_group_scan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_group_scan` (
  `host_group_id` BINARY(16) NOT NULL,
  `plugin_id` INT(11) NOT NULL,
  `plugin_sid` INT(11) NOT NULL,
  `status` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`host_group_id`, `plugin_id`, `plugin_sid`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_mac_vendors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_mac_vendors` (
  `mac` BINARY(3) NOT NULL,
  `vendor` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`mac`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_group` (
  `group_id` BINARY(16) NOT NULL,
  `group_ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(125) NOT NULL,
  `descr` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`group_id`, `group_ctx`),
  INDEX `name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_group_descr`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_group_descr` (
  `group_id` BINARY(16) NOT NULL,
  `group_ctx` BINARY(16) NOT NULL,
  `plugin_id` INT(11) NOT NULL,
  `plugin_ctx` BINARY(16) NOT NULL,
  `plugin_sid` TEXT NOT NULL,
  PRIMARY KEY (`group_id`, `group_ctx`, `plugin_id`, `plugin_ctx`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `product_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `product_type` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin` (
  `ctx` BINARY(16) NOT NULL,
  `id` INT NOT NULL,
  `type` SMALLINT(6) NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `product_type` INT(11) NOT NULL DEFAULT '0',
  `vendor` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`, `ctx`),
  INDEX `product_type` (`product_type` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_sid_changes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_sid_changes` (
  `plugin_ctx` BINARY(16) NOT NULL,
  `plugin_id` INT NOT NULL,
  `sid` INT NOT NULL,
  `class_id` INT(11) NULL DEFAULT NULL,
  `reliability` INT(11) NULL DEFAULT '1',
  `priority` INT(11) NULL DEFAULT '1',
  `name` VARCHAR(255) NOT NULL,
  `aro` DECIMAL(11,4) NOT NULL DEFAULT '0.0000',
  `subcategory_id` INT(11) NULL DEFAULT NULL,
  `category_id` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`plugin_ctx`, `plugin_id`, `sid`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `subcategory_changes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `subcategory_changes` (
  `id` INT NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `cat_id` INT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `subcategory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `subcategory` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `cat_id` INT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `cat_id` (`cat_id` ASC, `name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_sid`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_sid` (
  `plugin_ctx` BINARY(16) NOT NULL,
  `plugin_id` INT NOT NULL,
  `sid` INT NOT NULL,
  `class_id` INT(11) NULL DEFAULT NULL,
  `reliability` INT(11) NULL DEFAULT '1',
  `priority` INT(11) NULL DEFAULT '1',
  `name` VARCHAR(512) NOT NULL,
  `aro` DECIMAL(11,4) NOT NULL DEFAULT '0.0000',
  `subcategory_id` INT NULL DEFAULT NULL,
  `category_id` INT NULL DEFAULT NULL,
  INDEX `search` (`plugin_id` ASC, `name`(255) ASC),
  PRIMARY KEY (`plugin_id`, `sid`, `plugin_ctx`),
  INDEX `category_id` (`category_id` ASC, `subcategory_id` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_plugin_sid`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_plugin_sid` (
  `host_ip` VARBINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `plugin_id` INT(11) NOT NULL,
  `plugin_sid` INT(11) NOT NULL,
  PRIMARY KEY (`host_ip`, `ctx`, `plugin_id`, `plugin_sid`),
  INDEX `plugin` (`plugin_id` ASC, `plugin_sid` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_property_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_property_reference` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NULL DEFAULT NULL,
  `ord` INT(11) NOT NULL DEFAULT '0',
  `description` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_source_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_source_reference` (
  `id` INT NOT NULL,
  `name` VARCHAR(100) NULL DEFAULT NULL,
  `relevance` SMALLINT NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_properties`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_properties` (
  `host_id` BINARY(16) NOT NULL,
  `property_ref` INT NOT NULL,
  `last_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `source_id` INT NULL DEFAULT NULL,
  `value` TEXT NOT NULL,
  `extra` TEXT NULL DEFAULT NULL,
  `tzone` FLOAT NOT NULL DEFAULT 0,
  INDEX `date` (`last_modified` ASC),
  INDEX `property_ref` (`property_ref` ASC, `value`(255) ASC),
  PRIMARY KEY (`host_id`, `property_ref`, `value`(255)))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_qualification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_qualification` (
  `host_id` BINARY(16) NOT NULL,
  `compromise` INT(11) NOT NULL DEFAULT '1',
  `attack` INT(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`host_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_scan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_scan` (
  `host_id` BINARY(16) NOT NULL,
  `plugin_id` INT(11) NOT NULL,
  `plugin_sid` INT(11) NOT NULL,
  `status` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`host_id`, `plugin_id`, `plugin_sid`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_type` (
  `id` VARCHAR(64) NOT NULL,
  `descr` VARCHAR(255) NOT NULL DEFAULT '',
  `keywords` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `uuid` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `title` VARCHAR(512) NOT NULL,
  `date` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `ref` ENUM('Alarm','Alert','Event','Metric','Anomaly','Vulnerability','Custom') NOT NULL DEFAULT 'Alarm',
  `type_id` VARCHAR(64) NOT NULL DEFAULT 0,
  `priority` INT(2) UNSIGNED NOT NULL DEFAULT 1,
  `status` ENUM('Open','Assigned','Studying','Waiting','Testing','Closed') NOT NULL DEFAULT 'Open',
  `last_update` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `in_charge` VARCHAR(64) NOT NULL,
  `submitter` VARCHAR(64) NOT NULL,
  `event_start` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `event_end` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  INDEX `in_charge` (`in_charge` ASC),
  INDEX `status` (`status` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_alarm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_alarm` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `incident_id` INT NOT NULL,
  `src_ips` VARCHAR(255) NOT NULL,
  `src_ports` VARCHAR(255) NOT NULL,
  `dst_ips` VARCHAR(255) NOT NULL,
  `dst_ports` VARCHAR(255) NOT NULL,
  `backlog_id` BINARY(16) NOT NULL,
  `event_id` BINARY(16) NOT NULL,
  `alarm_group_id` BINARY(16) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_anomaly`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_anomaly` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `incident_id` INT NOT NULL,
  `anom_type` ENUM('mac','service','os') NOT NULL DEFAULT 'mac',
  `ip` VARCHAR(255) NOT NULL,
  `data_orig` VARCHAR(255) NOT NULL,
  `data_new` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_custom_types`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_custom_types` (
  `id` VARCHAR(64) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `type` VARCHAR(255) NOT NULL,
  `options` TEXT NOT NULL,
  `required` INT(1) NOT NULL,
  `ord` INT(11) NOT NULL,
  PRIMARY KEY (`id`, `name`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_custom`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_custom` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `incident_id` INT NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `incident_custom_type_id` VARCHAR(64) NOT NULL,
  `content` BLOB NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_event` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `incident_id` INT NOT NULL,
  `src_ips` VARCHAR(255) NOT NULL,
  `src_ports` VARCHAR(255) NOT NULL,
  `dst_ips` VARCHAR(255) NOT NULL,
  `dst_ports` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_ticket` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `incident_id` INT NOT NULL,
  `date` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `status` ENUM('Open','Assigned','Studying','Waiting','Testing','Closed') NOT NULL DEFAULT 'Open',
  `priority` INT(11) NOT NULL,
  `users` VARCHAR(64) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `action` TEXT NULL DEFAULT NULL,
  `in_charge` VARCHAR(64) NULL DEFAULT NULL,
  `transferred` VARCHAR(64) NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `users` (`incident_id` ASC, `users` ASC, `in_charge` ASC, `transferred` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_file`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_file` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `incident_id` INT NOT NULL,
  `incident_ticket` INT NOT NULL,
  `name` VARCHAR(50) NULL DEFAULT NULL,
  `type` VARCHAR(50) NULL DEFAULT NULL,
  `content` MEDIUMBLOB NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_metric`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_metric` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `incident_id` INT NOT NULL,
  `target` VARCHAR(255) NOT NULL,
  `metric_type` ENUM('Compromise','Attack','Level') NOT NULL DEFAULT 'Compromise',
  `metric_value` INT(11) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_subscrip`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_subscrip` (
  `login` VARCHAR(64) NOT NULL,
  `incident_id` INT NOT NULL,
  PRIMARY KEY (`login`, `incident_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_tag_descr`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_tag_descr` (
  `id` INT NOT NULL,
  `name` VARCHAR(64) NULL DEFAULT NULL,
  `descr` TEXT NULL DEFAULT NULL,
  `class` text NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_tag` (
  `tag_id` INT NOT NULL,
  `incident_id` INT NOT NULL,
  PRIMARY KEY (`tag_id`, `incident_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_tag_descr_seq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_tag_descr_seq` (
  `id` INT(11) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_ticket_seq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_ticket_seq` (
  `id` INT(11) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_vulns`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_vulns` (
  `id` INT NOT NULL,
  `incident_id` INT NOT NULL,
  `ip` VARCHAR(40) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `port` VARCHAR(255) NOT NULL,
  `nessus_id` VARCHAR(255) NOT NULL,
  `risk` VARCHAR(255) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`, `incident_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_vulns_seq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_vulns_seq` (
  `id` INT(11) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `log_action`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `log_action` (
  `ctx` BINARY(16) NOT NULL,
  `date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `code` INT(10) UNSIGNED NOT NULL,
  `info` VARCHAR(255) NOT NULL,
  `login` VARCHAR(255) NOT NULL,
  `ipfrom` VARBINARY(16) NOT NULL,
  PRIMARY KEY (`ctx`, `date`, `code`, `info`),
  INDEX `info` (`info` ASC, `date` ASC),
  INDEX `date` (`date` DESC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `log_config`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `log_config` (
  `ctx` BINARY(16) NOT NULL,
  `code` INT(10) UNSIGNED NOT NULL,
  `log` TINYINT(1) NULL DEFAULT '0',
  `descr` VARCHAR(255) NOT NULL,
  `priority` INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`ctx`, `code`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `map`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `map` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `engine` ENUM('openlayers_op','openlayers_ve','openlayers_yahoo','openlayers_image') NULL DEFAULT NULL,
  `engine_data1` MEDIUMTEXT NULL DEFAULT NULL,
  `engine_data2` TEXT NULL DEFAULT NULL,
  `engine_data3` TEXT NULL DEFAULT NULL,
  `engine_data4` TEXT NULL DEFAULT NULL,
  `center_x` VARCHAR(255) NULL DEFAULT NULL,
  `center_y` VARCHAR(255) NULL DEFAULT NULL,
  `zoom` INT(11) NULL DEFAULT NULL,
  `show_controls` TINYINT(1) NULL DEFAULT '1',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table `net_cidrs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net_cidrs` (
  `net_id` BINARY(16) NOT NULL,
  `cidr` VARCHAR(20) NOT NULL,
  `begin` VARBINARY(16) NOT NULL,
  `end` VARBINARY(16) NOT NULL,
  PRIMARY KEY (`net_id`, `cidr`, `begin`, `end`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `net_group_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net_group_reference` (
  `net_group_id` BINARY(16) NOT NULL,
  `net_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`net_group_id`, `net_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `net_group_scan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net_group_scan` (
  `net_group_id` BINARY(16) NOT NULL,
  `plugin_id` INT(11) NOT NULL,
  `plugin_sid` INT(11) NOT NULL,
  PRIMARY KEY (`net_group_id`, `plugin_id`, `plugin_sid`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `net_qualification`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net_qualification` (
  `net_id` BINARY(16) NOT NULL,
  `compromise` INT(11) NOT NULL DEFAULT '1',
  `attack` INT(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`net_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `net_scan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net_scan` (
  `net_id` BINARY(16) NOT NULL,
  `plugin_id` INT(11) NOT NULL,
  `plugin_sid` INT(11) NOT NULL,
  PRIMARY KEY (`net_id`, `plugin_id`, `plugin_sid`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `net_vulnerability`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net_vulnerability` (
  `net_id` BINARY(16) NOT NULL,
  `scan_date` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `vulnerability` INT(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`net_id`, `scan_date`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `pass_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pass_history` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `user` VARCHAR(64) NOT NULL,
  `hist_number` INT(11) NULL DEFAULT NULL,
  `pass` VARCHAR(64) NOT NULL,
  `salt` text NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_reference` (
  `plugin_id` INT(11) NOT NULL,
  `plugin_sid` INT(11) NOT NULL,
  `reference_id` INT(11) NOT NULL,
  `reference_sid` INT(11) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  PRIMARY KEY (`plugin_id`, `plugin_sid`, `reference_id`, `reference_sid`, `ctx`),
  INDEX `reference` (`reference_id` ASC, `reference_sid` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_scheduler`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_scheduler` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `plugin` VARCHAR(255) NOT NULL,
  `plugin_minute` VARCHAR(255) NOT NULL,
  `plugin_hour` VARCHAR(255) NOT NULL,
  `plugin_day_month` VARCHAR(255) NOT NULL,
  `plugin_month` VARCHAR(255) NOT NULL,
  `plugin_day_week` VARCHAR(255) NOT NULL,
  `type_scan` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_scheduler_host_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_scheduler_host_reference` (
  `plugin_scheduler_id` BINARY(16) NOT NULL,
  `host_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`plugin_scheduler_id`, `host_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_scheduler_hostgroup_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_scheduler_hostgroup_reference` (
  `plugin_scheduler_id` BINARY(16) NOT NULL,
  `hostgroup_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`plugin_scheduler_id`, `hostgroup_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_scheduler_net_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_scheduler_net_reference` (
  `plugin_scheduler_id` BINARY(16) NOT NULL,
  `net_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`plugin_scheduler_id`, `net_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_scheduler_netgroup_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_scheduler_netgroup_reference` (
  `plugin_scheduler_id` BINARY(16) NOT NULL,
  `netgroup_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`plugin_scheduler_id`, `netgroup_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_scheduler_sensor_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_scheduler_sensor_reference` (
  `plugin_scheduler_id` BINARY(16) NOT NULL,
  `sensor_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`plugin_scheduler_id`, `sensor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_scheduler_seq`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_scheduler_seq` (
  `id` INT(11) NOT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_group` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `descr` VARCHAR(255) NOT NULL,
  `order` INT NOT NULL,
  `permissions` BINARY(8) NOT NULL DEFAULT 0x0,
  PRIMARY KEY (`id`, `ctx`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `priority` SMALLINT(6) NOT NULL,
  `active` INT(11) NOT NULL,
  `group` BINARY(16) NOT NULL,
  `order` INT NOT NULL,
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  `permissions` BINARY(8) NOT NULL DEFAULT 0x0,
  PRIMARY KEY (`id`),
  INDEX `group` (`group` ASC),
  INDEX `order` (`order` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_actions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_actions` (
  `policy_id` BINARY(16) NOT NULL,
  `action_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`policy_id`, `action_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_extra_data_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_extra_data_reference` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `policy_id` BINARY(16) NOT NULL,
  `filename` VARCHAR(128) NULL DEFAULT NULL,
  `username` VARCHAR(128) NULL DEFAULT NULL,
  `password` VARCHAR(128) NULL DEFAULT NULL,
  `userdata1` VARCHAR(128) NULL DEFAULT NULL,
  `userdata2` VARCHAR(128) NULL DEFAULT NULL,
  `userdata3` VARCHAR(128) NULL DEFAULT NULL,
  `userdata4` VARCHAR(128) NULL DEFAULT NULL,
  `userdata5` VARCHAR(128) NULL DEFAULT NULL,
  `userdata6` VARCHAR(128) NULL DEFAULT NULL,
  `userdata7` VARCHAR(128) NULL DEFAULT NULL,
  `userdata8` VARCHAR(128) NULL DEFAULT NULL,
  `userdata9` VARCHAR(128) NULL DEFAULT NULL,
  `data_payload` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_forward_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_forward_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `child_id` BINARY(16) NOT NULL,
  `parent_id` BINARY(16) NOT NULL,
  `priority` SMALLINT(5) UNSIGNED NOT NULL,
  PRIMARY KEY (`policy_id`, `child_id`, `parent_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_host_group_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_host_group_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `host_group_id` BINARY(16) NOT NULL,
  `direction` ENUM('source','dest') NOT NULL,
  PRIMARY KEY (`policy_id`, `host_group_id`, `direction`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_host_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_host_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `host_id` BINARY(16) NOT NULL,
  `direction` ENUM('source','dest') NOT NULL,
  PRIMARY KEY (`policy_id`, `host_id`, `direction`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_idm_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_idm_reference` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `policy_id` BINARY(16) NOT NULL,
  `from_src` TINYINT(1) NOT NULL DEFAULT FALSE,
  `username` VARCHAR(64) NULL DEFAULT NULL,
  `domain` VARCHAR(64) NULL DEFAULT NULL,
  `hostname` VARCHAR(64) NULL DEFAULT NULL,
  `mac` BINARY(6) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_net_group_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_net_group_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `net_group_id` BINARY(16) NOT NULL,
  `direction` ENUM('source','dest') NOT NULL,
  PRIMARY KEY (`policy_id`, `net_group_id`, `direction`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_net_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_net_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `net_id` BINARY(16) NOT NULL,
  `direction` ENUM('source','dest') NOT NULL,
  PRIMARY KEY (`policy_id`, `net_id`, `direction`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_plugin_group_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_plugin_group_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `plugin_group_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`policy_id`, `plugin_group_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `port_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `port_group` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_port_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_port_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `port_group_id` INT(10) UNSIGNED NOT NULL DEFAULT '0',
  `direction` ENUM('source','dest') NOT NULL,
  PRIMARY KEY (`policy_id`, `port_group_id`, `direction`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `reputation_activities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `reputation_activities` (
  `id` SMALLINT NOT NULL AUTO_INCREMENT,
  `descr` VARCHAR(128) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_reputation_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_reputation_reference` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `policy_id` BINARY(16) NOT NULL,
  `from_src` TINYINT(1) NOT NULL DEFAULT FALSE,
  `rep_prio` TINYINT NOT NULL DEFAULT -1,
  `rep_rel` TINYINT NOT NULL DEFAULT -1,
  `rep_act` SMALLINT NOT NULL DEFAULT -1,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_risk_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_risk_reference` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `policy_id` BINARY(16) NOT NULL,
  `priority` SMALLINT UNSIGNED NULL DEFAULT NULL,
  `reliability` SMALLINT UNSIGNED NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_role_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_role_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `correlate` TINYINT(1) NOT NULL DEFAULT '1',
  `cross_correlate` TINYINT(1) NOT NULL DEFAULT '1',
  `store` TINYINT(1) NOT NULL DEFAULT '1',
  `qualify` TINYINT(1) NOT NULL DEFAULT '1',
  `resend_alarm` TINYINT(1) NOT NULL DEFAULT '1',
  `resend_event` TINYINT(1) NOT NULL DEFAULT '1',
  `sign` INT(10) UNSIGNED NOT NULL DEFAULT '0',
  `sem` TINYINT(1) NOT NULL DEFAULT '1',
  `sim` TINYINT(1) NOT NULL DEFAULT '1',
  `reputation` TINYINT(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`policy_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_sensor_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_sensor_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `sensor_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`policy_id`, `sensor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_target_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_target_reference` (
  `policy_id` BINARY(16) NOT NULL,
  `target_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`policy_id`, `target_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_taxonomy_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_taxonomy_reference` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `policy_id` BINARY(16) NOT NULL,
  `product_type_id` INT(11) NOT NULL DEFAULT '0',
  `category_id` INT(11) NOT NULL DEFAULT '0',
  `subcategory_id` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `policy_time_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `policy_time_reference` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `policy_id` BINARY(16) NOT NULL,
  `minute_start` INT(11) NOT NULL DEFAULT '0',
  `minute_end` INT(11) NOT NULL DEFAULT '0',
  `hour_start` INT(11) NOT NULL DEFAULT '0',
  `hour_end` INT(11) NOT NULL DEFAULT '0',
  `week_day_start` INT(11) NOT NULL DEFAULT '0',
  `week_day_end` INT(11) NOT NULL DEFAULT '0',
  `month_day_start` INT(11) NOT NULL DEFAULT '0',
  `month_day_end` INT(11) NOT NULL DEFAULT '0',
  `month_start` INT(11) NOT NULL DEFAULT '0',
  `month_end` INT(11) NOT NULL DEFAULT '0',
  `timezone` VARCHAR(64) NOT NULL DEFAULT 'UTC',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `port`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `port` (
  `ctx` BINARY(16) NOT NULL,
  `port_number` INT(11) NOT NULL,
  `protocol_name` VARCHAR(12) NOT NULL,
  `service` VARCHAR(64) NULL DEFAULT NULL,
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`ctx`, `port_number`, `protocol_name`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `port_group_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `port_group_reference` (
  `port_group_id` INT(10) UNSIGNED NOT NULL,
  `port_ctx` BINARY(16) NOT NULL,
  `port_number` INT(11) NOT NULL,
  `protocol_name` VARCHAR(12) NOT NULL,
  PRIMARY KEY (`port_group_id`, `port_ctx`, `port_number`, `protocol_name`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `repository`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `repository` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `creator` VARCHAR(64) NOT NULL DEFAULT '0',
  `title` VARCHAR(256) NOT NULL,
  `text` TEXT NOT NULL,
  `date` DATE NOT NULL,
  `in_charge` VARCHAR(64) NOT NULL,
  `keywords` VARCHAR(256) NOT NULL COMMENT 'Comma separated',
  PRIMARY KEY (`id`),
  INDEX `title` (`title`(200) ASC),
  INDEX `keywords` (`keywords`(200) ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 100000
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `repository_attachments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `repository_attachments` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `id_document` INT(11) NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `type` VARCHAR(4) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `repository_relationships`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `repository_relationships` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `id_document` INT(11) NOT NULL,
  `type` VARCHAR(16) NOT NULL,
  `keyname` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `keyname` (`keyname` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restoredb_log`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restoredb_log` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `date` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `pid` INT(11) NULL DEFAULT NULL,
  `users` VARCHAR(64) NULL DEFAULT NULL,
  `data` TEXT NULL DEFAULT NULL,
  `status` SMALLINT(6) NULL DEFAULT NULL,
  `percent` SMALLINT(6) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `rrd_anomalies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rrd_anomalies` (
  `ip` VARBINARY(16) NULL DEFAULT NULL,
  `what` VARCHAR(100) NOT NULL,
  `count` INT(11) NOT NULL,
  `anomaly_time` VARCHAR(40) NOT NULL,
  `anomaly_range` VARCHAR(30) NOT NULL,
  `over` INT(11) NOT NULL,
  `acked` INT(11) NULL DEFAULT '0')
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `rrd_anomalies_global`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rrd_anomalies_global` (
  `what` VARCHAR(100) NOT NULL,
  `count` INT(11) NOT NULL,
  `anomaly_time` VARCHAR(40) NOT NULL,
  `anomaly_range` VARCHAR(30) NOT NULL,
  `over` INT(11) NOT NULL,
  `acked` INT(11) NULL DEFAULT '0')
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `rrd_config`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rrd_config` (
  `ctx` BINARY(16) NOT NULL,
  `profile` VARCHAR(64) NOT NULL,
  `rrd_attrib` VARCHAR(60) NOT NULL,
  `threshold` INT(10) UNSIGNED NOT NULL,
  `priority` INT(10) UNSIGNED NOT NULL,
  `alpha` FLOAT UNSIGNED NOT NULL,
  `beta` FLOAT UNSIGNED NOT NULL,
  `persistence` INT(10) UNSIGNED NOT NULL,
  `enable` TINYINT(4) NULL DEFAULT '1',
  `description` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`ctx`, `profile`, `rrd_attrib`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sensor_interfaces`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sensor_interfaces` (
  `sensor_id` BINARY(16) NOT NULL,
  `interface` VARCHAR(64) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `main` INT(11) NOT NULL,
  PRIMARY KEY (`sensor_id`, `interface`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sensor_properties`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sensor_properties` (
  `sensor_id` BINARY(16) NOT NULL,
  `version` VARCHAR(64) NULL DEFAULT NULL,
  `has_ntop` TINYINT(1) NOT NULL DEFAULT 1,
  `has_vuln_scanner` TINYINT(1) NOT NULL DEFAULT 0,
  `has_ossec` TINYINT(1) NOT NULL DEFAULT 0,
  `ids` TINYINT(1) NOT NULL DEFAULT 0,
  `passive_inventory` TINYINT(1) NOT NULL DEFAULT 0,
  `netflows` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`sensor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sensor_stats`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sensor_stats` (
  `sensor_id` BINARY(16) NOT NULL,
  `events` INT(11) NOT NULL DEFAULT '0',
  `os_events` INT(11) NOT NULL DEFAULT '0',
  `mac_events` INT(11) NOT NULL DEFAULT '0',
  `service_events` INT(11) NOT NULL DEFAULT '0',
  `ids_events` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`sensor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `server_forward_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `server_forward_role` (
  `server_src_id` BINARY(16) NOT NULL,
  `server_dst_id` BINARY(16) NOT NULL,
  `priority` SMALLINT(5) UNSIGNED NOT NULL,
  PRIMARY KEY (`server_src_id`, `server_dst_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `server_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `server_role` (
  `server_id` BINARY(16) NOT NULL,
  `correlate` TINYINT(1) NOT NULL DEFAULT '1',
  `cross_correlate` TINYINT(1) NOT NULL DEFAULT '1',
  `store` TINYINT(1) NOT NULL DEFAULT '1',
  `qualify` TINYINT(1) NOT NULL DEFAULT '1',
  `resend_alarm` TINYINT(1) NOT NULL DEFAULT '1',
  `resend_event` TINYINT(1) NOT NULL DEFAULT '1',
  `sign` INT(10) UNSIGNED NOT NULL DEFAULT '0',
  `sim` TINYINT(1) NOT NULL DEFAULT '1',
  `sem` TINYINT(1) NOT NULL DEFAULT '1',
  `alarms_to_syslog` TINYINT(1) NOT NULL DEFAULT '0',
  `reputation` TINYINT(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`server_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sessions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sessions` (
  `id` VARCHAR(64) NOT NULL,
  `login` VARCHAR(64) NOT NULL,
  `ip` VARCHAR(40) NOT NULL,
  `agent` VARCHAR(255) NOT NULL,
  `logon_date` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `activity` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`, `login`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `signature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `signature` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `signature_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `signature_group` (
  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `descr` VARCHAR(255) NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `signature_group_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `signature_group_reference` (
  `signature_group_id` INT(10) UNSIGNED NOT NULL,
  `signature_id` INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`signature_group_id`, `signature_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `user_sensor_perm`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user_sensor_perm` (
  `login` VARCHAR(64) NOT NULL,
  `sensor_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`login`, `sensor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `users` (
  `login` VARCHAR(64) NOT NULL,
  `ctx` BINARY(16) NOT NULL DEFAULT 0x0,
  `name` VARCHAR(128) NOT NULL,
  `pass` VARCHAR(128) NOT NULL,
  `email` VARCHAR(255) NULL DEFAULT NULL,
  `company` VARCHAR(128) NULL DEFAULT NULL,
  `department` VARCHAR(128) NULL DEFAULT NULL,
  `language` VARCHAR(12) NOT NULL DEFAULT 'en_GB',
  `enabled` TINYINT(1) NOT NULL DEFAULT '1',
  `first_login` TINYINT(1) NOT NULL DEFAULT '1',
  `timezone` VARCHAR(64) NOT NULL DEFAULT 'GMT',
  `last_pass_change` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `last_logon_try` DATETIME NOT NULL,
  `is_admin` TINYINT(1) NOT NULL DEFAULT '0',
  `template_id` BINARY(16) NOT NULL DEFAULT 0x0,
  `uuid` BINARY(16) NOT NULL DEFAULT 0x0,
  `expires` DATETIME NOT NULL DEFAULT '2200-01-01 00:00:00',
  `login_method` VARCHAR(4) NOT NULL,
  `salt` text NOT NULL,
  PRIMARY KEY (`login`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `user_config`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user_config` (
  `login` VARCHAR(64) NOT NULL,
  `category` VARCHAR(64) NOT NULL DEFAULT 'main',
  `name` VARCHAR(255) NOT NULL,
  `value` MEDIUMTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`login`, `category`, `name`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_hosts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_hosts` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `hostip` VARCHAR(40) NULL DEFAULT NULL,
  `hostname` VARCHAR(64) NOT NULL DEFAULT '',
  `description` VARCHAR(200) NOT NULL DEFAULT '',
  `status` VARCHAR(45) NOT NULL DEFAULT '',
  `workgroup` VARCHAR(25) NULL DEFAULT NULL,
  `os` VARCHAR(100) NOT NULL DEFAULT '',
  `site_code` VARCHAR(25) NOT NULL,
  `ORG` VARCHAR(25) NULL DEFAULT NULL,
  `contact` VARCHAR(45) NOT NULL DEFAULT '',
  `scanstate` VARCHAR(25) NULL DEFAULT NULL,
  `report_id` INT(11) NOT NULL DEFAULT '0',
  `creport_id` INT(11) NOT NULL DEFAULT '0',
  `lastscandate` DATETIME NULL DEFAULT NULL,
  `createdate` DATETIME NULL DEFAULT NULL,
  `inactive` TINYINT(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `hostname` (`hostname` ASC),
  INDEX `hostip` (`hostip` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_job_assets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_job_assets` (
  `job_id` INT(11) NOT NULL,
  `job_type` INT(11) NOT NULL DEFAULT 0,
  `asset_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`job_id`, `job_type`, `asset_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_job_schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_job_schedule` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT '',
  `username` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT '',
  `fk_name` VARCHAR(50) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NULL DEFAULT NULL,
  `job_TYPE` ENUM('C','M','R','S') CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT 'M' COMMENT 'CRON, MANUAL, REQ, SYSTEM',
  `schedule_type` ENUM('O','D','W','M','NW') CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT 'M',
  `time_interval` SMALLINT UNSIGNED NOT NULL DEFAULT 1,
  `day_of_week` ENUM('Su','Mo','Tu','We','Th','Fr','Sa') CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT 'Mo',
  `day_of_month` INT(2) UNSIGNED NOT NULL DEFAULT '1',
  `time` TIME NOT NULL DEFAULT '00:00:00',
  `email` TEXT NOT NULL,
  `meth_TARGET` TEXT CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NULL DEFAULT NULL,
  `only_alive_hosts` TINYINT(1) NOT NULL DEFAULT '0',
  `profile_id` VARCHAR (32) NOT NULL,
  `meth_CUSTOM` ENUM('N','A','R') CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT 'N',
  `task_id` TEXT CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NULL DEFAULT NULL,
  `meth_Wcheck` TEXT CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NULL DEFAULT NULL,
  `send_email` TINYINT(1) NOT NULL DEFAULT '0',
  `scan_locally` TINYINT(1) NOT NULL DEFAULT '0',
  `meth_TIMEOUT` INT(11) NULL DEFAULT '172800',
  `scan_ASSIGNED` VARCHAR(64) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NULL DEFAULT NULL,
  `next_CHECK` VARCHAR(14) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT '',
  `createdate` DATETIME NULL DEFAULT NULL,
  `enabled` ENUM('0','1') CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT '1',
  `resolve_names` TINYINT(1) NOT NULL DEFAULT '1',
  `IP_ctx` TEXT NULL DEFAULT NULL,
  `credentials` VARCHAR(128) NOT NULL,
  `begin` VARCHAR(8) NULL DEFAULT '',
  `exclude_ports` TEXT NOT NULL,
  `ssh_credential_port` INT(11) NOT NULL DEFAULT '22',
  PRIMARY KEY (`id`),
  INDEX `name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_servers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_servers` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `description` VARCHAR(255) NOT NULL DEFAULT '',
  `hostname` VARCHAR(255) NOT NULL DEFAULT '',
  `max_scans` INT(11) NOT NULL DEFAULT '3',
  `current_scans` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_jobs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_jobs` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `username` VARCHAR(64) NOT NULL DEFAULT '',
  `fk_name` VARCHAR(50) NULL DEFAULT NULL,
  `job_TYPE` CHAR(1) NOT NULL DEFAULT 'M',
  `meth_SCHED` CHAR(1) NOT NULL DEFAULT 'N',
  `meth_TARGET` TEXT NULL DEFAULT NULL,
  `only_alive_hosts` TINYINT(1) NOT NULL DEFAULT '0',
  `profile_id` VARCHAR (32) NOT NULL,
  `meth_CUSTOM` ENUM('N','A','R') NOT NULL DEFAULT 'N',
  `task_id` TEXT NULL DEFAULT NULL,
  `meth_Wcheck` TEXT NULL DEFAULT NULL,
  `send_email` TINYINT(1) NOT NULL DEFAULT '0',
  `scan_locally` TINYINT(1) NOT NULL DEFAULT '0',
  `meth_TIMEOUT` INT(6) NOT NULL DEFAULT '172800',
  `scan_ASSIGNED` VARCHAR(64) NULL DEFAULT NULL,
  `scan_SERVER` INT(11) NOT NULL DEFAULT '0',
  `scan_START` DATETIME NULL DEFAULT NULL,
  `scan_END` DATETIME NULL DEFAULT NULL,
  `scan_SUBMIT` DATETIME NULL DEFAULT NULL,
  `scan_NEXT` VARCHAR(14) NULL DEFAULT NULL,
  `scan_PID` INT(11) NOT NULL DEFAULT '0',
  `scan_PRIORITY` TINYINT(1) NOT NULL DEFAULT '3',
  `status` CHAR(1) NOT NULL DEFAULT 'S' COMMENT 'values: C => Completed, D => Delayed (No available Scan Slots), F => Failed, S => Scheduled, H => Invalid Scan Config, R => Running, K => Kill, T => Timeout expired, I => Incomplete',
  `notify` TEXT NOT NULL,
  `report_id` INT(11) NOT NULL DEFAULT '0',
  `tracker_id` INT(11) NULL DEFAULT NULL,
  `failed_attempts` TINYINT(1) NOT NULL DEFAULT '0',
  `authorized` TINYINT(1) NOT NULL DEFAULT '0',
  `IP_ctx` MEDIUMTEXT NULL DEFAULT NULL,
  `resolve_names` TINYINT(1) NOT NULL DEFAULT '1',
  `credentials` VARCHAR(128) NOT NULL,
  `exclude_ports` TEXT NOT NULL,
  `ssh_credential_port` INT(11) NOT NULL DEFAULT '22',
  PRIMARY KEY (`id`, `name`),
  INDEX `name` (`name` ASC),
  INDEX `scan_END` (`scan_END` ASC),
  INDEX `report_id` (`report_id` ASC),
  INDEX `subnet` (`fk_name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_category`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_category` (
  `id` VARCHAR(255) NOT NULL,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `description` VARCHAR(512) NULL DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nname` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_family`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_family` (
  `id` VARCHAR(255) NOT NULL,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `nname` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_latest_reports`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_latest_reports` (
  `hostIP` VARCHAR(40) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `sid` INT(11) NOT NULL DEFAULT '0',
  `username` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NOT NULL DEFAULT '',
  `fk_name` VARCHAR(50) NULL DEFAULT NULL,
  `scantime` VARCHAR(14) NOT NULL DEFAULT '',
  `report_type` CHAR(1) NOT NULL DEFAULT 'N',
  `scantype` CHAR(1) NOT NULL DEFAULT 'M',
  `report_key` VARCHAR(16) NOT NULL DEFAULT '',
  `note` TEXT NULL DEFAULT NULL,
  `failed` TINYINT(1) NOT NULL DEFAULT '0',
  `results_sent` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`hostIP`, `sid`, `username`, `ctx`),
  INDEX `results_sent` (`results_sent` ASC),
  INDEX `subnet` (`fk_name` ASC),
  INDEX `scantime` (`scantime` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_latest_results`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_latest_results` (
  `result_id` INT(11) NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NOT NULL,
  `sid` INT(11) NOT NULL DEFAULT '0',
  `scantime` VARCHAR(14) NOT NULL DEFAULT '',
  `record_type` CHAR(1) NOT NULL DEFAULT 'N',
  `hostIP` VARCHAR(40) NOT NULL DEFAULT '',
  `ctx` BINARY(16) NOT NULL,
  `hostname` VARCHAR(100) NULL DEFAULT NULL,
  `service` VARCHAR(40) NOT NULL DEFAULT '',
  `port` INT(11) NULL DEFAULT NULL,
  `protocol` VARCHAR(5) NULL DEFAULT NULL,
  `app` VARCHAR(20) NULL DEFAULT NULL,
  `scriptid` VARCHAR(40) NOT NULL DEFAULT '',
  `risk` SMALLINT UNSIGNED NOT NULL DEFAULT 1,
  `msg` TEXT NULL DEFAULT NULL,
  `falsepositive` CHAR(1) NULL DEFAULT 'N',
  PRIMARY KEY (`result_id`),
  INDEX `scantime` (`scantime` ASC),
  INDEX `scriptid` (`scriptid` ASC),
  INDEX `hostIP` (`hostIP` ASC, `ctx` ASC, `risk` ASC),
  INDEX `risk` (`risk` ASC),
  INDEX `falsepositive` (`falsepositive` ASC, `risk` ASC, `hostIP` ASC, `ctx` ASC),
  INDEX `report_id` (`username` ASC, `sid` ASC),
  INDEX `port` (`falsepositive` ASC, `port` ASC, `protocol` ASC, `app` ASC),
  INDEX `hosts` (`falsepositive` ASC, `hostIP` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_plugins`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_plugins` (
  `id` VARCHAR(32) NOT NULL DEFAULT '0',
  `oid` VARCHAR(50) NOT NULL DEFAULT '',
  `name` VARCHAR(255) NULL DEFAULT NULL,
  `summary` TEXT NULL DEFAULT NULL,
  `cve_id` TEXT NULL DEFAULT NULL,
  `bugtraq_id` TEXT NULL DEFAULT NULL,
  `xref` BLOB NULL DEFAULT NULL,
  `enabled` CHAR(1) NOT NULL DEFAULT '',
  `created` VARCHAR(32) NULL DEFAULT NULL,
  `modified` VARCHAR(32) NULL DEFAULT NULL,
  `category` VARCHAR(32) NOT NULL DEFAULT '0',
  `family` VARCHAR(32) NOT NULL DEFAULT '0',
  `risk` INT(11) NOT NULL DEFAULT '0',
  `cvss_base_score` DECIMAL(3,1) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table `vuln_nessus_settings_sensor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_settings_sensor` (
  `sensor_id` BINARY(16) NOT NULL COMMENT 'a remote sensor',
  `vns_id` VARCHAR(32) NOT NULL  COMMENT 'ref to vuln_nessus_settings id',
  `sensor_gvm_config_id` VARCHAR(64) NOT NULL COMMENT 'gvm id of the vuln_nessus_settings created',
  PRIMARY KEY (`sensor_id`, `vns_id`, `sensor_gvm_config_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_preferences`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_preferences` (
  `id` VARCHAR(255) NULL DEFAULT NULL,
  `nessus_id` VARCHAR(255) NOT NULL DEFAULT '',
  `value` TEXT NULL DEFAULT NULL,
  `category` VARCHAR(255) NULL DEFAULT NULL,
  `type` CHAR(1) NOT NULL DEFAULT '',
  PRIMARY KEY (`nessus_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_preferences_defaults`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_preferences_defaults` (
  `id` VARCHAR(255) NULL DEFAULT NULL,
  `nessus_id` VARCHAR(255) NOT NULL DEFAULT '',
  `nessusgroup` VARCHAR(255) NULL DEFAULT NULL,
  `type` VARCHAR(255) NULL DEFAULT NULL,
  `field` VARCHAR(255) NULL DEFAULT NULL,
  `value` TEXT NULL DEFAULT NULL,
  `category` VARCHAR(255) NULL DEFAULT NULL,
  `flag` CHAR(1) NULL DEFAULT NULL,
  `gvm_id` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`nessus_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_reports`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_reports` (
  `report_id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `fk_name` VARCHAR(50) NULL DEFAULT NULL,
  `scantime` VARCHAR(14) NOT NULL DEFAULT '',
  `report_type` CHAR(1) NOT NULL DEFAULT 'N',
  `username` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NULL DEFAULT NULL,
  `sid` INT(11) NULL DEFAULT NULL,
  `scantype` CHAR(1) NOT NULL DEFAULT 'M',
  `report_key` VARCHAR(16) NOT NULL DEFAULT '',
  PRIMARY KEY (`report_id`),
  INDEX `subnet` (`fk_name` ASC),
  INDEX `scantime` (`scantime` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_report_stats`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_report_stats` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `report_id` INT(11) NOT NULL DEFAULT '0',
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `iHostCnt` INT(4) NOT NULL DEFAULT '0',
  `dtLastScanned` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `iScantime` DECIMAL(4,0) NOT NULL DEFAULT '0',
  `vExceptions` INT(6) NOT NULL DEFAULT '0',
  `vCritical` INT(6) NOT NULL DEFAULT '0',
  `vHigh` INT(6) NOT NULL DEFAULT '0',
  `vMed` INT(6) NOT NULL DEFAULT '0',
  `vMedLow` INT(6) NOT NULL DEFAULT '0',
  `vLowMed` INT(6) NOT NULL DEFAULT '0',
  `vLow` INT(6) NOT NULL DEFAULT '0',
  `vInfo` INT(6) NOT NULL DEFAULT '0',
  `trend` INT(4) NOT NULL DEFAULT '0',
  `dtLastUpdated` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  INDEX `report_id` (`report_id` ASC),
  INDEX `subnet` (`name` ASC),
  INDEX `dtLastScanned` (`dtLastScanned` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_results`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_results` (
  `result_id` INT(11) NOT NULL AUTO_INCREMENT,
  `report_id` INT(11) NOT NULL DEFAULT '0',
  `scantime` VARCHAR(14) NOT NULL DEFAULT '',
  `record_type` CHAR(1) NOT NULL DEFAULT 'N',
  `hostIP` VARCHAR(40) NOT NULL DEFAULT '',
  `ctx` BINARY(16) NOT NULL,
  `hostname` VARCHAR(100) NULL DEFAULT NULL,
  `service` VARCHAR(40) NOT NULL DEFAULT '',
  `port` INT(11) NULL DEFAULT NULL,
  `protocol` VARCHAR(5) NULL DEFAULT NULL,
  `app` VARCHAR(20) NULL DEFAULT NULL,
  `scriptid` VARCHAR(40) NOT NULL DEFAULT '',
  `risk` ENUM('1','2','3','4','5','6','7') NOT NULL DEFAULT '1',
  `msg` TEXT NULL DEFAULT NULL,
  `falsepositive` CHAR(1) NULL DEFAULT 'N',
  PRIMARY KEY (`result_id`),
  INDEX `report_id` (`report_id` ASC),
  INDEX `scantime` (`scantime` ASC),
  INDEX `scriptid` (`scriptid` ASC, `falsepositive` ASC),
  INDEX `hostIP` (`hostIP` ASC),
  INDEX `risk` (`risk` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_settings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_settings` (
  `id` VARCHAR (32) NOT NULL,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `description` VARCHAR(255) NULL DEFAULT NULL,
  `owner` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_bin' NOT NULL DEFAULT '',
  `deleted` ENUM('0','1') NOT NULL DEFAULT '0',
  `default`TINYINT(1) DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_settings_family`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_settings_family` (
  `sid` VARCHAR(32) NOT NULL,
  `fid` VARCHAR(32) NOT NULL,
  `status` INT(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`sid`, `fid`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_settings_plugins`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_settings_plugins` (
  `id` INT(11) NOT NULL DEFAULT '0',
  `sid` VARCHAR(32) NOT NULL,
  `enabled` CHAR(1) NOT NULL DEFAULT 'Y',
  `category` VARCHAR(32) NOT NULL,
  `family` VARCHAR(32) NOT NULL,
  INDEX `id` (`id` ASC),
  KEY `sid` (`sid` ASC),
  KEY `family` (`family`, `category`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_nessus_settings_preferences`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_nessus_settings_preferences` (
  `sid` VARCHAR (32) NOT NULL,
  `id` VARCHAR(255) NULL DEFAULT NULL,
  `nessus_id` VARCHAR(255) NOT NULL DEFAULT '',
  `value` TEXT CHARACTER SET 'latin1' COLLATE 'latin1_general_ci' NULL DEFAULT NULL,
  `category` VARCHAR(255) NULL DEFAULT NULL,
  `type` CHAR(1) NOT NULL DEFAULT '',
  PRIMARY KEY (`nessus_id`, `sid`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `vuln_settings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `vuln_settings` (
  `settingID` INT(11) NOT NULL AUTO_INCREMENT,
  `settingName` VARCHAR(100) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT '',
  `settingValue` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL DEFAULT '',
  `settingDescription` VARCHAR(255) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NULL DEFAULT NULL,
  `settingSection` VARCHAR(50) CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NULL DEFAULT NULL,
  `developerNotes` TEXT CHARACTER SET 'utf8' COLLATE 'utf8_unicode_ci' NOT NULL,
  PRIMARY KEY (`settingID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `web_interfaces`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `web_interfaces` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ctx` BINARY(16) NOT NULL,
  `ip` VARBINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `status` INT(1) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table `acl_sensors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_sensors` (
  `entity_id` BINARY(16) NOT NULL,
  `sensor_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`entity_id`, `sensor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `corr_engine_contexts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `corr_engine_contexts` (
  `engine_ctx` BINARY(16) NOT NULL,
  `event_ctx` BINARY(16) NOT NULL,
  `descr` VARCHAR(128) NULL,
  PRIMARY KEY (`engine_ctx`, `event_ctx`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_ip`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_ip` (
  `host_id` BINARY(16) NOT NULL,
  `ip` VARBINARY(16) NOT NULL,
  `mac` BINARY(6) NULL,
  `interface` VARCHAR(32) NULL,
  INDEX `ip_index` USING BTREE (`ip` ASC),
  INDEX `mac_index` (`mac` ASC),
  PRIMARY KEY (`host_id`, `ip`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_sensor_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_sensor_reference` (
  `host_id` BINARY(16) NOT NULL,
  `sensor_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`host_id`, `sensor_id`),
  INDEX `sensor` (`sensor_id` ASC));


-- -----------------------------------------------------
-- Table `net_sensor_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `net_sensor_reference` (
  `net_id` BINARY(16) NOT NULL,
  `sensor_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`net_id`, `sensor_id`),
  INDEX `sensor` (`sensor_id` ASC));


-- -----------------------------------------------------
-- Table `acl_entities_users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_entities_users` (
  `entity_id` BINARY(16) NOT NULL,
  `login` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`entity_id`, `login`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `idm_data`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `idm_data` (
  `event_id` BINARY(16) NOT NULL,
  `username` VARCHAR(64) NULL,
  `domain` VARCHAR(64) NULL,
  `from_src` TINYINT(1) NULL,
  INDEX `event_id` (`event_id` ASC),
  INDEX `usrdmn` (`username` ASC, `domain` ASC),
  INDEX `domain` (`domain` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_services`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_services` (
  `host_id` BINARY(16) NOT NULL,
  `host_ip` VARBINARY(16) NOT NULL,
  `port` INT(11) NOT NULL,
  `protocol` INT(11) NOT NULL,
  `service` VARCHAR(128) NULL DEFAULT 'unknown',
  `version` TEXT NULL,
  `last_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `source_id` INT(11) NULL,
  `nagios` TINYINT(1) NULL DEFAULT 0,
  `nagios_status` TINYINT(4) NOT NULL DEFAULT 3,
  `tzone` FLOAT NULL DEFAULT 0,
  PRIMARY KEY (`host_id`, `host_ip`, `port`, `protocol`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `dashboard_custom_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dashboard_custom_type` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NOT NULL,
  `type` VARCHAR(128) NOT NULL,
  `category` VARCHAR(128) NOT NULL,
  `title_default` VARCHAR(128) NOT NULL,
  `help_default` TEXT NOT NULL,
  `file` VARCHAR(128) NOT NULL,
  `params` TEXT NOT NULL,
  `thumb` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `dashboard_tab_config`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dashboard_tab_config` (
  `id` INT(11) NOT NULL,
  `user` VARCHAR(64) NOT NULL,
  `title` VARCHAR(128) NULL DEFAULT NULL,
  `layout` INT(11) NULL DEFAULT '1',
  `icon` VARCHAR(128) NULL DEFAULT NULL,
  PRIMARY KEY (`id`, `user`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `dashboard_widget_config`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dashboard_widget_config` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `panel_id` INT(11) NOT NULL,
  `type_id` INT(11) NOT NULL,
  `user` VARCHAR(64) NOT NULL,
  `col` INT(11) NOT NULL,
  `fil` INT(11) NOT NULL,
  `height` INT(11) NOT NULL DEFAULT '200',
  `title` VARCHAR(128) NULL DEFAULT NULL,
  `help` VARCHAR(128) NULL DEFAULT NULL,
  `refresh` INT(11) NOT NULL DEFAULT '0',
  `color` VARCHAR(15) NOT NULL,
  `file` VARCHAR(128) NOT NULL,
  `type` VARCHAR(50) NOT NULL,
  `asset` VARCHAR(128) NULL DEFAULT 'ALL_ASSETS',
  `params` TEXT NULL DEFAULT NULL,
  `media` MEDIUMBLOB NULL DEFAULT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `acl_assets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_assets` (
  `login` VARCHAR(64) NOT NULL,
  `asset_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`login`, `asset_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `dashboard_tab_options`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `dashboard_tab_options` (
  `id` INT(11) NOT NULL,
  `user` VARCHAR(64) NOT NULL,
  `visible` TINYINT(1) NOT NULL DEFAULT 1,
  `tab_order` INT(11) NOT NULL,
  PRIMARY KEY (`id`, `user`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `acl_entities_assets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_entities_assets` (
  `entity_id` BINARY(16) NOT NULL,
  `asset_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`entity_id`, `asset_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `alarm_ctxs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `alarm_ctxs` (
  `id_alarm` BINARY(16) NOT NULL,
  `id_ctx` BINARY(16) NOT NULL,
  PRIMARY KEY (`id_alarm`, `id_ctx`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `alarm_hosts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `alarm_hosts` (
  `id_alarm` BINARY(16) NOT NULL,
  `id_host` BINARY(16) NOT NULL,
  PRIMARY KEY (`id_alarm`, `id_host`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `alarm_nets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `alarm_nets` (
  `id_alarm` BINARY(16) NOT NULL,
  `id_net` BINARY(16) NOT NULL,
  PRIMARY KEY (`id_alarm`, `id_net`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `task_inventory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `task_inventory` (
  `task_id` BIGINT NOT NULL AUTO_INCREMENT,
  `task_type` INT NULL DEFAULT NULL,
  `task_period` INT NULL DEFAULT NULL,
  `task_enable` TINYINT(1) NULL DEFAULT NULL,
  `task_params` VARCHAR(255) NULL DEFAULT NULL,
  `task_sensor` BINARY(16) NULL DEFAULT NULL,
  `task_name` VARCHAR(255) NULL DEFAULT NULL,
  `task_targets` VARCHAR(255) NULL DEFAULT '',
  `task_last_run` INT(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`task_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `server_hierarchy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `server_hierarchy` (
  `child_id` BINARY(16) NOT NULL,
  `parent_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`child_id`, `parent_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `notes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `notes` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `type` ENUM('host','net', 'host_group', 'net_group') NOT NULL,
  `date` DATETIME NOT NULL,
  `user` VARCHAR(64) NOT NULL,
  `asset_id` BINARY(16) NOT NULL,
  `note` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `type` (`type` ASC, `asset_id` ASC, `date` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `locations`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `locations` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(128) NOT NULL,
  `desc` VARCHAR(255) NOT NULL,
  `location` VARCHAR(255) NOT NULL,
  `lat` FLOAT NOT NULL,
  `lon` FLOAT NOT NULL,
  `country` VARCHAR(2) NOT NULL,
  `checks` BINARY(3) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `location_sensor_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `location_sensor_reference` (
  `location_id` BINARY(16) NOT NULL,
  `sensor_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`location_id`, `sensor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `device_types`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `device_types` (
  `id` INT NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `class` INT NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_types`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_types` (
  `host_id` BINARY(16) NOT NULL,
  `type` INT NOT NULL,
  `subtype` INT NOT NULL,
  PRIMARY KEY (`host_id`, `type`, `subtype`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `acl_entities_stats`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_entities_stats` (
  `entity_id` BINARY(16) NOT NULL,
  `ts` TIMESTAMP NULL DEFAULT NULL,
  `stat` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`entity_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `acl_login_sensors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `acl_login_sensors` (
  `login` VARCHAR(64) NOT NULL,
  `sensor_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`login`, `sensor_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_net_reference`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_net_reference` (
  `host_id` BINARY(16) NOT NULL,
  `net_id` BINARY(16) NOT NULL,
  PRIMARY KEY (`host_id`, `net_id`),
  INDEX `net` (`net_id` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `software_cpe`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `software_cpe` (
  `cpe` VARCHAR(255) NOT NULL,
  `name` VARCHAR(255) NOT NULL,
  `version` VARCHAR(255) NOT NULL,
  `line` VARCHAR(255) NOT NULL,
  `vendor` VARCHAR(255) NOT NULL,
  `plugin` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`cpe`),
  INDEX `line` (`line` ASC),
  INDEX `search` (`vendor` ASC, `name` ASC, `version` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;


-- -----------------------------------------------------
-- Table `host_software`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_software` (
  `host_id` BINARY(16) NOT NULL,
  `cpe` VARCHAR(255) NOT NULL,
  `banner` TEXT NULL DEFAULT NULL,
  `last_modified` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `source_id` INT(11) NULL DEFAULT NULL,
  `extra` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`host_id`, `cpe`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `extra_data`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `extra_data` (
  `event_id` BINARY(16) NOT NULL,
  `data_payload` TEXT NULL,
  `binary_data` BLOB NULL,
  PRIMARY KEY (`event_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `webservice`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webservice` (
  `id` BINARY(16) NOT NULL,
  `ctx` BINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `descr` VARCHAR(256) NOT NULL,
  `type` VARCHAR(32) NOT NULL,
  `source` ENUM('ticket') NOT NULL,
  `url` VARCHAR(256) NOT NULL,
  `namespace` VARCHAR(64) NOT NULL,
  `user` VARCHAR(64) NOT NULL,
  `pass` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;


-- -----------------------------------------------------
-- Table `webservice_operation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webservice_operation` (
  `ws_id` BINARY(16) NOT NULL,
  `op` VARCHAR(64) NOT NULL,
  `attrs` VARCHAR(512) NOT NULL,
  `type` ENUM('insert','query','update','delete','auth') NOT NULL,
  PRIMARY KEY (`ws_id`, `op`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `webservice_default`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `webservice_default` (
  `ws_id` BINARY(16) NOT NULL,
  `field` VARCHAR(64) NOT NULL,
  `value` VARCHAR(512) NOT NULL,
  PRIMARY KEY (`ws_id`, `field`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_sid_orig`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_sid_orig` (
  `plugin_ctx` BINARY(16) NOT NULL,
  `plugin_id` INT NOT NULL,
  `sid` INT NOT NULL,
  `class_id` INT(11) NULL DEFAULT NULL,
  `reliability` INT(11) NULL DEFAULT '1',
  `priority` INT(11) NULL DEFAULT '1',
  `name` VARCHAR(255) NOT NULL,
  `aro` DECIMAL(11,4) NOT NULL DEFAULT '0.0000',
  `subcategory_id` INT(11) NULL DEFAULT NULL,
  `category_id` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`plugin_ctx`, `plugin_id`, `sid`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `alarm_taxonomy`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `alarm_taxonomy` (
  `sid` INT(11) NOT NULL,
  `engine_id` BINARY(16) NOT NULL DEFAULT 0x0,
  `kingdom` INT(11) NOT NULL,
  `category` INT(11) NOT NULL,
  `subcategory` TEXT NOT NULL,
  PRIMARY KEY (`sid`, `engine_id`),
  INDEX `subcategory` (`subcategory`(255) ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `alarm_categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `alarm_categories` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `alarm_kingdoms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `alarm_kingdoms` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `name` (`name` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `host_vulnerability`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_vulnerability` (
  `host_id` BINARY(16) NOT NULL,
  `scan_date` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `vulnerability` INT(11) NOT NULL DEFAULT 1,
  PRIMARY KEY (`host_id`, `scan_date`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;

-- -----------------------------------------------------
-- Table `host_group_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `host_group_history` (
  `host_group_id` BINARY(16) NOT NULL,
  `date` DATETIME NOT NULL,
  `login` VARCHAR(64) NOT NULL,
  `action` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`host_group_id`, `date`, `login`, `action`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `software_cpe_links`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `software_cpe_links` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `vendor` VARCHAR(255) NOT NULL,
  `model` VARCHAR(255) NOT NULL,
  `link` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `vendor` (`vendor` ASC, `model` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_general_ci;


-- -----------------------------------------------------
-- Table `system`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `system` (
  `id` BINARY(16) NOT NULL,
  `name` VARCHAR(64) NOT NULL,
  `admin_ip` VARBINARY(16) NOT NULL,
  `vpn_ip` VARBINARY(16) NULL,
  `profile` VARCHAR(255) NOT NULL,
  `sensor_id` BINARY(16) NULL DEFAULT NULL,
  `server_id` BINARY(16) NULL DEFAULT NULL,
  `database_id` BINARY(16) NULL DEFAULT NULL,
  `host_id` BINARY(16) NULL DEFAULT NULL,
  `ha_ip` VARBINARY(16) NULL DEFAULT NULL,
  `ha_name` VARCHAR(64) NULL DEFAULT '',
  `ha_role` VARCHAR(32) NULL DEFAULT '',
  PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `user_component_filter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `user_component_filter` (
  `session_id` VARCHAR(64) NOT NULL,
  `asset_id` BINARY(16) NOT NULL,
  `asset_type` VARCHAR(32) NOT NULL,
  PRIMARY KEY (`session_id`, `asset_id`, `asset_type`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `sem_stats_events`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sem_stats_events` (
  `day` INT(11) NOT NULL,
  `sensor` VARCHAR(15) NOT NULL,
  `counter` INT(11) NOT NULL,
  PRIMARY KEY (`day`, `sensor`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `otx_data`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `otx_data` (
  `event_id` BINARY(16) NOT NULL,
  `pulse_id` VARBINARY(16) NOT NULL,
  `ioc_hash` VARCHAR(32) NOT NULL,
  `ioc_value` VARCHAR(2048) NULL,
  INDEX `ioc` (`ioc_value`(255) ASC),
  INDEX `pulse` (`pulse_id` ASC),
  PRIMARY KEY (`event_id`, `pulse_id`, `ioc_hash`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `plugin_data`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `plugin_data` (
  `ctx` BINARY(16) NOT NULL,
  `plugin_id` INT NOT NULL,
  `plugin_name` VARCHAR(128) NULL,
  `vendor` VARCHAR(128) NULL,
  `model` VARCHAR(128) NULL,
  `version` VARCHAR(128) NULL,
  `nsids` INT(11) NULL DEFAULT 0,
  `nassets` INT(11) NULL DEFAULT 0,
  `plugin_type` TINYINT(1) NULL DEFAULT 0,
  `last_update` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `product_type` INT NOT NULL,
  PRIMARY KEY (`ctx`, `plugin_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `incident_tmp_email`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `incident_tmp_email` (
  `incident_id` INT NOT NULL,
  `ticket_id` INT NOT NULL,
  `subscribers` TEXT NULL DEFAULT '',
  `type` TEXT,
  PRIMARY KEY (`incident_id`, `ticket_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- procedure incident_ticket_populate
-- -----------------------------------------------------

DELIMITER $$
CREATE DEFINER=`root`@`127.0.0.1` PROCEDURE `incident_ticket_populate`(p_incident_id INT, src_ip VARBINARY(16), dst_ip VARBINARY(16), prio INT) BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE count INT;
    DECLARE cnt_src, cnt_dst INT;
    DECLARE name, subname VARCHAR(255);
    DECLARE first_occ, last_occ TIMESTAMP;
    DECLARE source VARCHAR(39);
    DECLARE dest VARCHAR(39);

    DECLARE cur1 CURSOR FOR select count(*) as cnt, inet6_ntoa(event.src_ip) as src, inet6_ntoa(event.dst_ip) as dst, plugin.name, plugin_sid.name, min(timestamp) as frst, max(timestamp) as last, count(distinct(event.src_ip)) as
cnt_src, count(distinct(event.dst_ip)) as cnt_dst from event, plugin, plugin_sid where (event.src_ip = src_ip or event.dst_ip = src_ip or event.src_ip = dst_ip or event.dst_ip =dst_ip ) and timestamp > DATE_SUB(NOW(), INTERVAL 7
DAY) AND plugin.id = event.plugin_id and plugin_sid.sid = event.plugin_sid and plugin_sid.plugin_id = event.plugin_id group by event.plugin_id, event.plugin_sid ORDER by cnt DESC limit 50;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    SET @alarm_id = NULL;
    SELECT hex(backlog_id) INTO @alarm_id FROM incident_alarm where `incident_id` = p_incident_id;

    SET @frameworkd_address = NULL;
    SELECT `value` INTO @frameworkd_address FROM config where `conf` = 'frameworkd_address';

    IF (@alarm_id IS NOT NULL) THEN
                INSERT INTO incident_ticket(id,incident_id,date,status,priority,users,description) VALUES
                        (NULL, p_incident_id, NOW()-1, "Open", prio, "admin", CONCAT("<a target=\"_blank\" href=\"https://",@frameworkd_address,"/ossim/#analysis/alarms/alarms-",@alarm_id,"\">Link to Alarm</a>"));
        END IF;
        INSERT INTO incident_ticket(id,incident_id,date,status,priority,users,description) VALUES
        (NULL, p_incident_id, NOW()-1, "Open", prio, "admin", "The following tickets contain information about the top 50 event types the hosts have been generating during the last 7 days.");
    SET @ticket_id = LAST_INSERT_ID();

    OPEN cur1;
    REPEAT
        FETCH cur1 INTO count, source, dest, name, subname, first_occ, last_occ, cnt_src, cnt_dst;
        IF NOT done THEN
            SET @desc = CONCAT( "Event Type: ", name, "\nEvent Description: ", subname, "\nOcurrences: ",CAST(count AS CHAR), "\nFirst Occurrence: ", CAST(first_occ AS CHAR(50)), "\nLast Ocurrence: ", CAST(last_occ AS
CHAR(50)),"\nNumber of different sources: ", CAST(cnt_src AS CHAR), "\nNumber of different destinations: ", CAST(cnt_dst AS CHAR), "\nSource: ", source, "\nDest: ", dest);
            INSERT INTO incident_ticket(id,incident_id,date,status,priority,users,description) VALUES (NULL, p_incident_id, NOW(), "Open", prio, "admin", @desc);
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;

    IF EXISTS (SELECT value FROM config where conf = "tickets_send_mail" and value = "yes") THEN
        SET @subscribers = NULL;
        SELECT `in_charge` INTO @subscribers FROM incident where `id` = p_incident_id;
        REPLACE INTO incident_tmp_email VALUES (p_incident_id, @ticket_id, "CREATE_INCIDENT", @subscribers);
    END IF; END$$
DELIMITER ;


-- -----------------------------------------------------
-- Procedure host_filter
-- -----------------------------------------------------

DELIMITER $$
DROP PROCEDURE IF EXISTS host_filter$$
CREATE PROCEDURE host_filter(
  IN session_id VARCHAR(64), -- string like - 'admin'
  IN ftype VARCHAR(16), -- string - 'host' 'group' 'network'
  IN drop_table INT, -- boolean value - 0 or 1
  IN events_filter INT, -- boolean value - 0 or 1
  IN alarms_filter INT, -- boolean value - 0 or 1
  IN vulns_from INT, -- integer between 1 and 7
  IN vulns_to INT, -- integer between 1 and 7 >= vuln_from
  IN nagios CHAR, -- integer 0 => not configured, 1 => up, 2 => down
  IN asset_value_from CHAR, -- integer between 0 and 5
  IN asset_value_to CHAR, -- integer between 0 and 5 >= asset_value_from
  IN last_added_from VARCHAR(19), -- datetime - '2013-07-15 08:00:00'
  IN last_added_to VARCHAR(19), -- datetime - '2013-07-15 08:00:00'
  IN last_updated_from VARCHAR(19), -- datetime - '2013-08-15 22:30:00'
  IN last_updated_to VARCHAR(19), -- datetime - '2013-08-15 22:30:00'
  IN fqdn TEXT, -- free string (% is allowed)
  IN ip_range TEXT, -- ip ranges 192.168.1.1,192.168.1.255;192.168.1.2,192.168.1.2
  IN networks TEXT, -- network hex uuid value list - 0xF8EF2A7B9AC2B876C95FC12914BB3754,0x4531A9B0B300105D7DEDC6FC9330E24D
  IN agroups TEXT, -- asset group hex uuid value list - 0xF8EF2A7B9AC2B876C95FC12914BB3754,0x4531A9B0B300105D7DEDC6FC9330E24D
  IN labels TEXT, -- tag hex uuid value list - 0xF8EF2A7B9AC2B876C95FC12914BB3754,0x4531A9B0B300105D7DEDC6FC9330E24D
  IN os TEXT, -- unquoted string - windows vista,linux debian
  IN model TEXT, -- unquoted string - cisco asa,realtek x5
  IN cpe TEXT, -- unquoted string - cpe:/o:yamaha:srt100:10.00.46,cpe:/o:microsoft:virtual_machine_manager:2007
  IN device_types TEXT, -- unquoted string typeid,subtypeid - 1,0;4,404
  IN services TEXT, -- quoted string port,protocol,'service' - 80,6,'http';0,1,'PING'
  IN sensors TEXT, -- sensor hex uuid value list - 0xF8EF2A7B9AC2B876C95FC12914BB3754,0x4531A9B0B300105D7DEDC6FC9330E24D
  IN locations TEXT, -- location hex uuid value list - 0xF8EF2A7B9AC2B876C95FC12914BB3754,0x4531A9B0B300105D7DEDC6FC9330E24D
  IN group_name TEXT, -- free string (% is allowed)
  IN net_name TEXT, -- free string (% is allowed)
  IN net_cidr TEXT, -- free string (% is allowed)
  IN plugins TEXT, -- unquoted string - 4003,1001,7001
  IN hids_filter CHAR -- integer 0 => not deployed, 1 => disconnected, 2 => connected
)
BEGIN

  DECLARE x INT DEFAULT 0;
  DECLARE y INT DEFAULT 0;
  DECLARE host_filters_applied TINYINT DEFAULT 0;

  CREATE TABLE IF NOT EXISTS user_host_filter (
    session_id VARCHAR(64) NOT NULL,
    asset_id VARBINARY(16) NOT NULL,
    PRIMARY KEY (`asset_id`,`session_id`)
  ) ENGINE=InnoDB DEFAULT CHARSET=utf8;

  DROP TEMPORARY TABLE IF EXISTS filters_tmp;
  DROP TEMPORARY TABLE IF EXISTS filters_add;
  CREATE TEMPORARY TABLE filters_tmp (id BINARY(16) NOT NULL, PRIMARY KEY (`id`)) ENGINE=MEMORY;
  CREATE TEMPORARY TABLE filters_add (id BINARY(16) NOT NULL, PRIMARY KEY (`id`)) ENGINE=MEMORY;
  REPLACE INTO filters_tmp SELECT id FROM host;

  START TRANSACTION;

  -- Host with events
  IF events_filter = 1
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    REPLACE INTO filters_add SELECT src_host as id FROM alienvault_siem.po_acid_event UNION DISTINCT SELECT DISTINCT dst_host as id FROM alienvault_siem.po_acid_event;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Host with alarms
  IF alarms_filter = 1
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    REPLACE INTO filters_add SELECT ah.id_host as id FROM alarm_hosts ah, alarm a WHERE a.backlog_id=ah.id_alarm AND a.status = 'open';
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with vulnerabilities in range
  IF vulns_from > 0 AND vulns_to > 0 AND vulns_from <= vulns_to
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    REPLACE INTO filters_add SELECT h.id FROM host h, host_ip hi, vuln_nessus_latest_results lr WHERE hi.host_id=h.id AND hi.ip=inet6_aton(lr.hostIP) AND h.ctx=lr.ctx AND lr.risk BETWEEN vulns_from AND vulns_to;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with availability enabled
  IF nagios <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    IF nagios = '0' THEN
      REPLACE INTO filters_add SELECT h.id FROM host h LEFT JOIN host_scan ha ON ha.host_id=h.id AND ha.plugin_id=2007 and ha.plugin_sid=0 WHERE ha.host_id IS NULL;
    ELSEIF nagios = '1' THEN
      REPLACE INTO filters_add SELECT h.id FROM host h, host_scan ha WHERE ha.host_id=h.id AND ha.plugin_id=2007 and ha.plugin_sid=0 AND ha.status=1;
    ELSEIF nagios = '2' THEN
      REPLACE INTO filters_add SELECT h.id FROM host h, host_scan ha WHERE ha.host_id=h.id AND ha.plugin_id=2007 and ha.plugin_sid=0 AND ha.status=2;
    END IF;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with asset value in range
  IF asset_value_from <> '' AND asset_value_to <> '' AND asset_value_from <= asset_value_to AND ftype <> 'network'
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    REPLACE INTO filters_add SELECT h.id FROM host h WHERE h.asset BETWEEN asset_value_from AND asset_value_to;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with asset created date greater or equals than a given date
  IF last_added_from <> '' AND last_added_to <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    REPLACE INTO filters_add SELECT h.id FROM host h WHERE h.created BETWEEN last_added_from AND last_added_to;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with asset updated date greater or equals than a given date
  IF last_updated_from <> '' AND last_updated_to <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    REPLACE INTO filters_add SELECT h.id FROM host h WHERE h.updated BETWEEN last_updated_from AND last_updated_to;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with hostname or FQDN
  IF fqdn <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SELECT LENGTH(fqdn) - LENGTH(REPLACE(fqdn, ';', '')) INTO @nCommas;
    SET y = 1;
    SET x = @nCommas + 1;
    SET @query = '';
    WHILE y <= x DO
    SELECT _split_string(fqdn, ';', y) INTO @range;
    SET @query = CONCAT(@query,'h.fqdns like "%',@range,'%" OR h.hostname like "%',@range,'%" OR ');
    SET  y = y + 1;
    END WHILE;
    SET @query = CONCAT('REPLACE INTO filters_add SELECT h.id FROM alienvault.host h WHERE ',substring(@query,1,length(@query)-4),';');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with IP in range
  IF ip_range <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SELECT LENGTH(ip_range) - LENGTH(REPLACE(ip_range, ';', '')) INTO @nCommas;
    SET y = 1;
    SET x = @nCommas + 1;
    SET @query = '';
    WHILE y <= x DO
    SELECT _split_string(ip_range, ';', y) INTO @range;
    SET @query = CONCAT(@query,'(hi.ip between inet6_aton("',REPLACE(@range,',','") AND inet6_aton("'),'")) OR ');
    SET  y = y + 1;
    END WHILE;
    SET @query = CONCAT('REPLACE INTO filters_add SELECT h.id FROM alienvault.host h, alienvault.host_ip hi WHERE hi.host_id=h.id AND (',substring(@query,1,length(@query)-4),');');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts in a list of networks
  IF networks <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_net_reference r WHERE r.host_id=h.id AND r.net_id in (',networks,');');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts in a list of asset groups
  IF agroups <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_group_reference r WHERE r.host_id=h.id AND r.host_group_id in (',agroups,');');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts within a list of labels/tags
  IF labels <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.component_tags t WHERE t.id_component=h.id AND t.id_tag in (',labels,');');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts within a list of operating systems
  IF os <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @str = REPLACE(os,',','","');
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_properties hp WHERE hp.host_id=h.id AND hp.property_ref=3 AND hp.value in ("',@str,'");');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    IF os = 'unknown' THEN
      REPLACE INTO filters_add SELECT DISTINCT h.id FROM host h LEFT JOIN host_properties hp ON hp.host_id=h.id AND hp.property_ref=3 WHERE hp.host_id IS NULL;
    END IF;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts within a list of models
  IF model <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @str = REPLACE(model,',','","');
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_properties hp WHERE hp.host_id=h.id AND hp.property_ref=14 AND hp.value in ("',@str,'");');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts that contains a software with CPE
  IF cpe <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @str = REPLACE(cpe,',','","');
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_software s WHERE s.host_id=h.id AND s.cpe in ("',@str,'");');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts from a device type or subtype
  IF device_types <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @str = REPLACE(device_types,';','),(');
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_types ht WHERE ht.host_id=h.id AND (ht.type, ht.subtype) in ((',@str,'));');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with services (port, protocol, service)
  IF services <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @str = REPLACE(services,';','),(');
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_services hs WHERE hs.host_id=h.id AND (hs.port, hs.protocol, hs.service) in ((',@str,'));');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts associated with sensors
  IF sensors <> '' AND ftype <> 'network'
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_sensor_reference r WHERE r.host_id=h.id AND r.sensor_id in (',sensors,');');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with locations
  IF locations <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_sensor_reference r, location_sensor_reference l WHERE h.id=r.host_id AND r.sensor_id=l.sensor_id AND l.location_id in (',locations,');');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts related with a plugin list
  IF plugins <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    IF plugins = '0' THEN
      REPLACE INTO filters_add SELECT h.id FROM host h LEFT JOIN host_scan ha ON ha.host_id=h.id AND ha.plugin_id!=2007 WHERE ha.host_id IS NULL;
    ELSE
      SET @query = CONCAT('REPLACE INTO filters_add SELECT DISTINCT h.id FROM alienvault.host h, alienvault.host_scan s WHERE s.host_id=h.id AND s.plugin_id in (',plugins,') AND s.plugin_sid=0;');
      PREPARE sql_query from @query;
      EXECUTE sql_query;
      DEALLOCATE PREPARE sql_query;
    END IF;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Hosts with HIDS
  IF hids_filter <> ''
  THEN
    SET host_filters_applied = 1;
    TRUNCATE filters_add;
    IF hids_filter = '0' THEN
      REPLACE INTO filters_add SELECT h.id FROM host h LEFT JOIN hids_agents ha ON ha.host_id=h.id WHERE ha.host_id IS NULL;
    ELSEIF hids_filter = '1' THEN
      REPLACE INTO filters_add SELECT h.id FROM host h, hids_agents ha WHERE ha.host_id=h.id AND ha.agent_status in (0,1,2);
    ELSEIF hids_filter = '2' THEN
      REPLACE INTO filters_add SELECT h.id FROM host h, hids_agents ha WHERE ha.host_id=h.id AND ha.agent_status in (3,4);
    END IF;
    DELETE ft FROM filters_tmp ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
  END IF;

  -- Final Results
  IF ftype = 'host'
  THEN
    IF drop_table = 1
    THEN
      DELETE FROM user_host_filter WHERE user_host_filter.session_id=session_id;
      INSERT INTO user_host_filter SELECT session_id,id from filters_tmp;
    ELSE
      DELETE h FROM user_host_filter h LEFT JOIN filters_tmp t ON h.asset_id=t.id WHERE h.session_id=session_id AND t.id IS NULL;
    END IF;
  ELSEIF ftype = 'group'
  THEN
    DROP TEMPORARY TABLE IF EXISTS filters_tmpg;
    CREATE TEMPORARY TABLE filters_tmpg (id binary(16) NOT NULL, PRIMARY KEY (`id`)) ENGINE=MEMORY;

    IF host_filters_applied = 1
    THEN
      -- Asset groups which match the search criteria
      INSERT IGNORE INTO filters_tmpg SELECT host_group_id FROM host_group_reference, filters_tmp WHERE id=host_id;
    ELSE
      -- No host filters applied, so all asset groups are added initially
      INSERT IGNORE INTO filters_tmpg SELECT id FROM host_group;
    END IF;

    -- It doesn't make sense to apply net filters if there are no asset groups which match the search criteria
    SELECT COUNT(id) INTO @asset_groups_filtered FROM filters_tmpg LIMIT 1;

    IF group_name <> '' AND @asset_groups_filtered > 0
    THEN
      SELECT LENGTH(group_name) - LENGTH(REPLACE(group_name, ';', '')) INTO @nCommas;
      SET y = 1;
      SET x = @nCommas + 1;
      SET @query = '';
      WHILE y <= x DO
      SELECT _split_string(group_name, ';', y) INTO @range;
      SET @query = CONCAT(@query,'hg.name like "%',@range,'%" OR ');
      SET  y = y + 1;
      END WHILE;
      SET @query = CONCAT('INSERT IGNORE INTO filters_add SELECT hg.id FROM host_group hg WHERE ',substring(@query,1,length(@query)-4));
      PREPARE sql_query from @query;
      EXECUTE sql_query;
      DEALLOCATE PREPARE sql_query;
      DELETE ft FROM filters_tmpg ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
    END IF;

    IF drop_table = 1
    THEN
      DELETE FROM user_host_filter WHERE user_host_filter.session_id=session_id;
      INSERT INTO user_host_filter SELECT session_id,id from filters_tmpg;
    ELSE
      DELETE h FROM user_host_filter h LEFT JOIN filters_tmpg t ON h.asset_id=t.id WHERE h.session_id=session_id AND t.id IS NULL;
    END IF;
  ELSEIF ftype = 'network'
  THEN
    DROP TEMPORARY TABLE IF EXISTS filters_tmpg;
    CREATE TEMPORARY TABLE filters_tmpg (id binary(16) NOT NULL, PRIMARY KEY (`id`)) ENGINE=MEMORY;

    IF host_filters_applied = 1
    THEN
      -- Networks which match the search criteria
      INSERT IGNORE INTO filters_tmpg SELECT net_id FROM host_net_reference, filters_tmp WHERE id=host_id;
    ELSE
      -- No host filters applied, so all networks are added initially
      INSERT IGNORE INTO filters_tmpg SELECT id FROM net;
    END IF;

    -- It doesn't make sense to apply net filters if there are no networks which match the search criteria
    SELECT COUNT(id) INTO @nets_filtered FROM filters_tmpg LIMIT 1;

    IF @nets_filtered > 0
    THEN
      -- Filter by network name
      IF net_name <> ''
      THEN
        SELECT LENGTH(net_name) - LENGTH(REPLACE(net_name, ';', '')) INTO @nCommas;
        SET y = 1;
        SET x = @nCommas + 1;
        SET @query = '';
        WHILE y <= x DO
        SELECT _split_string(net_name, ';', y) INTO @range;
        SET @query = CONCAT(@query,'n.name like "%',@range,'%" OR ');
        SET  y = y + 1;
        END WHILE;

        TRUNCATE filters_add;
        SET @query = CONCAT('INSERT IGNORE INTO filters_add SELECT n.id FROM net n WHERE ',substring(@query,1,length(@query)-4));
        PREPARE sql_query from @query;
        EXECUTE sql_query;
        DEALLOCATE PREPARE sql_query;
        DELETE ft FROM filters_tmpg ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
      END IF;

      -- Network CIDR
      IF net_cidr <> ''
      THEN
        SELECT LENGTH(net_cidr) - LENGTH(REPLACE(net_cidr, ';', '')) INTO @nCommas;
        SET y = 1;
        SET x = @nCommas + 1;
        SET @query = '';
        WHILE y <= x DO
        SELECT _split_string(net_cidr, ';', y) INTO @range;
        SET @query = CONCAT(@query,'n.ips like "%',@range,'%" OR ');
        SET  y = y + 1;
        END WHILE;

        TRUNCATE filters_add;
        SET @query = CONCAT('INSERT IGNORE INTO filters_add SELECT n.id FROM net n WHERE ',substring(@query,1,length(@query)-4));
        PREPARE sql_query from @query;
        EXECUTE sql_query;
        DEALLOCATE PREPARE sql_query;
        DELETE ft FROM filters_tmpg ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
      END IF;

      -- Asset value
      IF asset_value_from <> '' AND asset_value_to <> '' AND asset_value_from <= asset_value_to
      THEN
        TRUNCATE filters_add;
        INSERT IGNORE INTO filters_add SELECT n.id FROM net n WHERE n.asset BETWEEN asset_value_from AND asset_value_to;
        DELETE ft FROM filters_tmpg ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
      END IF;

      -- Sensors
      IF sensors <> ''
      THEN
        TRUNCATE filters_add;
        SET @query = CONCAT('INSERT IGNORE INTO filters_add SELECT DISTINCT net_id FROM alienvault.net_sensor_reference WHERE sensor_id IN (',sensors,');');
        PREPARE sql_query from @query;
        EXECUTE sql_query;
        DEALLOCATE PREPARE sql_query;
        DELETE ft FROM filters_tmpg ft LEFT JOIN filters_add fa ON fa.id=ft.id WHERE fa.id IS NULL;
      END IF;
    END IF;

    IF drop_table = 1
    THEN
      DELETE FROM user_host_filter WHERE user_host_filter.session_id=session_id;
      INSERT INTO user_host_filter SELECT session_id,id from filters_tmpg;
    ELSE
      DELETE h FROM user_host_filter h LEFT JOIN filters_tmpg t ON h.asset_id=t.id WHERE h.session_id=session_id AND t.id IS NULL;
    END IF;
  END IF;

  COMMIT;

  SELECT COUNT(asset_id) as assets FROM user_host_filter WHERE user_host_filter.session_id=session_id;
END$$

DELIMITER ;


-- -----------------------------------------------------
-- function _split_string
-- -----------------------------------------------------

DELIMITER $$
CREATE FUNCTION _split_string( stringToSplit TEXT, sign VARCHAR(12), position INT) RETURNS TEXT
BEGIN
    RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(stringToSplit, sign, position),LENGTH(SUBSTRING_INDEX(stringToSplit, sign, position -1)) + 1), sign, '');
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- function is_pro
-- -----------------------------------------------------

DELIMITER $$
CREATE FUNCTION is_pro()
RETURNS INT
BEGIN
    SELECT EXISTS (select 1 from config where conf='ossim_server_version' and `value` like '%pro%') into @is_pro;
    RETURN @is_pro;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function is_admin
-- -----------------------------------------------------

DELIMITER $$
CREATE FUNCTION is_admin( user VARCHAR(64) )
RETURNS INT
BEGIN
    IF user = 'admin' OR EXISTS (SELECT 1 from users where `login`=user and `is_admin`=1) THEN
        RETURN 1;
    END IF;
    RETURN 0;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function host_where
-- -----------------------------------------------------

DELIMITER $$
CREATE FUNCTION host_where( user VARCHAR(64), aka VARCHAR(32) )
RETURNS TEXT
BEGIN
    DECLARE perms TEXT DEFAULT '';
    DECLARE host_where TEXT DEFAULT '';
    DECLARE net_where TEXT DEFAULT '';

    IF NOT ( is_admin(user) ) THEN

        SELECT EXISTS (SELECT 1 from user_ctx_perm where login = user) INTO @get_ctx_where;
        SELECT EXISTS (SELECT 1 from user_host_perm where login = user) INTO @get_host_where;
        SELECT EXISTS (SELECT 1 from user_net_perm where login = user) INTO @get_net_where;
        SELECT EXISTS (SELECT 1 from user_host_perm where asset_id=UNHEX('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF') AND login = user) INTO @host_ff;
        SELECT EXISTS (SELECT 1 from user_net_perm where asset_id=UNHEX('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF') AND login = user) INTO @net_ff;

        -- Forensic events
        IF aka = 'events' THEN

            IF @get_ctx_where THEN
                SET perms = CONCAT(perms,' AND acid_event.ctx IN (select ctx from user_ctx_perm where login = "',user,'")');
            END IF;

            IF @get_host_where THEN
                SET host_where = CONCAT(host_where,'(acid_event.src_host in (select asset_id from user_host_perm where login = "',user,'") OR acid_event.dst_host in (select asset_id from user_host_perm where login = "',user,'"))');
            END IF;

            IF @get_net_where THEN
                SET net_where = CONCAT(net_where,'(acid_event.src_net in (select asset_id from user_net_perm where login = "',user,'") OR acid_event.dst_net in (select asset_id from user_net_perm where login = "',user,'"))');
            END IF;

        -- Host / others tables (using given alias)
        ELSE

            IF @get_ctx_where THEN
                SET perms = CONCAT(perms,' AND ',aka,'ctx IN (select ctx from user_ctx_perm where login = "',user,'")');
            END IF;

            IF @get_host_where THEN
                SET host_where = CONCAT(host_where,aka,'id IN (select asset_id from user_host_perm where login = "',user,'")');
            END IF;

            IF @get_net_where THEN
                SET net_where = CONCAT(net_where,aka,'id IN (SELECT host_id FROM host_net_reference, user_net_perm WHERE host_net_reference.net_id=user_net_perm.asset_id and login = "',user,'")');
            END IF;

        END IF;

        -- No asset allowed
        IF NOT @get_ctx_where AND @host_ff AND @net_ff THEN
            SET perms = CONCAT(perms,' AND ( ',host_where,' OR ',net_where,' )');
        ELSE
            -- make sql where
            IF host_where <> '' AND NOT @host_ff THEN
                IF net_where <> '' AND NOT @net_ff THEN
                    SET perms = CONCAT(perms,' AND ( ',host_where,' OR ',net_where,' )');
                ELSE
                    SET perms = CONCAT(perms,' AND ',host_where);
                END IF;
            ELSE
                IF net_where <> '' AND NOT @net_ff THEN
                    SET perms = CONCAT(perms,' AND ',net_where);
                END IF;
            END IF;
        END IF;

    END IF;

    RETURN perms;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure acl_get_allowed_hosts
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE acl_get_allowed_hosts( user VARCHAR(64), uuid VARCHAR(64) )
BEGIN
    SELECT host_where(user,'') INTO @perms;
    SET @query = '';
    IF uuid = '' THEN
        SET @query = CONCAT('SELECT HEX(id) as host_id FROM host WHERE 1', @perms);
    ELSE
        SET @query = CONCAT('SELECT HEX(id) as host_id FROM host WHERE id=UNHEX("', uuid, '") ', @perms);
    END IF;
    PREPARE stmt1 FROM @query;
    EXECUTE stmt1;
    DEALLOCATE PREPARE stmt1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure acl_get_allowed_networks
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE acl_get_allowed_networks( user VARCHAR(64), uuid VARCHAR(64) )
BEGIN
    SELECT EXISTS (SELECT 1 from user_ctx_perm where login = user) INTO @get_ctx_where;
    SELECT EXISTS (SELECT 1 from user_net_perm where login = user) INTO @get_net_where;

    SET @uuid = '';
    IF NOT uuid = '' THEN
        SET @uuid = CONCAT(' AND net.id=UNHEX("', uuid, '")');
    END IF;
	IF NOT @get_ctx_where AND NOT @get_net_where THEN
	    SELECT HEX(id) as net_id FROM net;
    ELSE
        SET @login = user;
    	IF @get_ctx_where THEN
            IF @get_net_where THEN
                SET @query = CONCAT('SELECT HEX(net.id) as net_id FROM net, user_ctx_perm, user_net_perm WHERE net.id=user_net_perm.asset_id AND net.ctx=user_ctx_perm.ctx AND user_ctx_perm.login = ? AND user_net_perm.login = ?', @uuid);
                PREPARE stmt1 FROM @query;
                EXECUTE stmt1 USING @login, @login;
                DEALLOCATE PREPARE stmt1;
            ELSE
                SET @query = CONCAT('SELECT HEX(net.id) as net_id FROM net, user_ctx_perm WHERE net.ctx=user_ctx_perm.ctx AND user_ctx_perm.login = ?', @uuid);
                PREPARE stmt1 FROM @query;
                EXECUTE stmt1 USING @login;
                DEALLOCATE PREPARE stmt1;
            END IF;
        ELSE
            IF @get_net_where THEN
                SET @query = CONCAT('SELECT HEX(net.id) as net_id FROM net, user_net_perm WHERE net.id=user_net_perm.asset_id AND user_net_perm.login = ?', @uuid);
                PREPARE stmt1 FROM @query;
                EXECUTE stmt1 USING @login;
                DEALLOCATE PREPARE stmt1;
            END IF;
    	END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure acl_get_allowed_sensors
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE acl_get_allowed_sensors( user VARCHAR(64), uuid VARCHAR(64) )
BEGIN
    IF is_admin(user) THEN
        IF uuid = '' THEN
            SELECT HEX(id) FROM sensor;
        ELSE
            SELECT HEX(id) FROM sensor WHERE id=UNHEX(uuid);
        END IF;
    ELSE
        IF uuid = '' THEN
            SELECT HEX(sensor_id) as sensor_id FROM user_sensor_perm u, sensor s WHERE s.id=u.sensor_id AND u.login = user;
        ELSE
            SELECT HEX(sensor_id) as sensor_id FROM user_sensor_perm u, sensor s WHERE s.id=u.sensor_id AND u.login = user AND s.id=UNHEX(uuid);
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure acl_get_allowed_ctxs
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE acl_get_allowed_ctxs( user VARCHAR(64), uuid VARCHAR(64) )
BEGIN
    IF is_admin(user) THEN
        IF uuid = '' THEN
            SELECT HEX(id) FROM acl_entities;
        ELSE
            SELECT HEX(id) FROM acl_entities WHERE id=UNHEX(uuid);
        END IF;
    ELSE
        IF uuid = '' THEN
            SELECT HEX(ctx) as ctx FROM user_ctx_perm u,acl_entities a WHERE a.id=u.ctx AND u.login = user;
        ELSE
            SELECT HEX(ctx) as ctx FROM user_ctx_perm u,acl_entities a WHERE a.id=u.ctx AND u.login = user AND a.id=UNHEX(uuid);
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_fill_context_assets
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_fill_context_assets( user VARCHAR(64) )
BEGIN

    REPLACE INTO user_host_perm SELECT DISTINCT user, asset_id FROM acl_entities_assets, acl_entities_users, acl_entities, host WHERE host.id=acl_entities_assets.asset_id AND acl_entities.id = acl_entities_assets.entity_id AND acl_entities.id=acl_entities_users.entity_id AND acl_entities.entity_type='logical' AND acl_entities_users.login = user;

    REPLACE INTO user_net_perm SELECT DISTINCT user, asset_id FROM acl_entities_assets, acl_entities_users, acl_entities, net WHERE net.id=acl_entities_assets.asset_id AND acl_entities.id = acl_entities_assets.entity_id AND acl_entities.id=acl_entities_users.entity_id AND acl_entities.entity_type='logical' AND acl_entities_users.login = user;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_fill_assets
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_fill_assets( user VARCHAR(64) )
BEGIN

    REPLACE INTO user_host_perm SELECT DISTINCT user, asset_id FROM acl_assets, host WHERE id = asset_id AND login = user;

    REPLACE INTO user_net_perm SELECT DISTINCT user, asset_id FROM acl_assets, net WHERE id = asset_id AND login = user;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_fill_context_sensors
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_fill_context_sensors( user VARCHAR(64) )
BEGIN

    REPLACE INTO user_sensor_perm SELECT DISTINCT user, sensor_id FROM acl_entities, acl_sensors, acl_entities_users, sensor WHERE acl_sensors.entity_id = acl_entities.id AND sensor.id = acl_sensors.sensor_id AND acl_entities.id=acl_entities_users.entity_id AND acl_entities.entity_type!='engine' AND acl_entities_users.login = user;

    SELECT EXISTS (SELECT 1 from user_host_perm where login = user) INTO @hosts;
    SELECT EXISTS (SELECT 1 from user_net_perm where login = user) INTO @networks;

    IF @hosts OR @networks THEN
		REPLACE INTO user_host_perm SELECT DISTINCT user, host_id FROM acl_entities, acl_sensors, acl_entities_users, sensor, host, host_sensor_reference WHERE host_sensor_reference.host_id=host.id AND acl_sensors.entity_id = acl_entities.id AND sensor.id = acl_sensors.sensor_id AND host_sensor_reference.sensor_id=acl_sensors.sensor_id AND acl_entities.id=acl_entities_users.entity_id AND acl_entities.entity_type!='engine' AND acl_entities_users.login = user;
		REPLACE INTO user_net_perm SELECT DISTINCT user, net_id FROM acl_entities, acl_sensors, acl_entities_users, sensor, net, net_sensor_reference WHERE net_sensor_reference.net_id=net.id AND acl_sensors.entity_id = acl_entities.id AND sensor.id = acl_sensors.sensor_id AND net_sensor_reference.sensor_id=acl_sensors.sensor_id AND acl_entities.id=acl_entities_users.entity_id AND acl_entities.entity_type!='engine' AND acl_entities_users.login = user;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_fill_sensors
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_fill_sensors( user VARCHAR(64) )
BEGIN

    REPLACE INTO user_sensor_perm SELECT DISTINCT user, sensor.id FROM sensor, acl_login_sensors WHERE sensor.id = acl_login_sensors.sensor_id AND acl_login_sensors.login = user;

    REPLACE INTO user_host_perm SELECT DISTINCT user, host_sensor_reference.host_id FROM sensor, host_sensor_reference, acl_login_sensors WHERE sensor.id = acl_login_sensors.sensor_id AND sensor.id = host_sensor_reference.sensor_id AND acl_login_sensors.login = user;

    REPLACE INTO user_net_perm SELECT DISTINCT user, net_sensor_reference.net_id FROM sensor, net_sensor_reference, acl_login_sensors WHERE sensor.id = acl_login_sensors.sensor_id AND sensor.id = net_sensor_reference.sensor_id AND acl_login_sensors.login = user;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_fill_contexts
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_fill_contexts( user VARCHAR(64) )
BEGIN
    DECLARE done     INT DEFAULT 0;
    DECLARE c_id     VARCHAR(64);
    DECLARE c_type   VARCHAR(64);
    DECLARE c_parent VARCHAR(64);

    DECLARE cur1 CURSOR FOR SELECT HEX(entity_id),entity_type,HEX(parent_id) FROM acl_entities_users, acl_entities WHERE acl_entities.id=acl_entities_users.entity_id AND entity_type!='engine' AND login = user;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur1;

    SET max_sp_recursion_depth=10;
    REPEAT
        FETCH cur1 INTO c_id, c_type, c_parent;
        IF NOT done THEN

            IF c_type = 'context' THEN
                -- get context childs
                REPLACE INTO user_ctx_perm (login, ctx) VALUES (user, UNHEX(c_id));
                CALL _acl_context_child(user, c_id);
            ELSE
                -- logical entity
                CALL _acl_context_logical(user, c_parent);
            END IF;

        END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;

    -- Add engines
    REPLACE INTO user_ctx_perm SELECT user, engine_ctx FROM corr_engine_contexts WHERE event_ctx IN (SELECT ctx FROM user_ctx_perm WHERE login = user);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_context_child
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_context_child( user VARCHAR(64), ctx VARCHAR(64) )
BEGIN
    DECLARE done   INT DEFAULT 0;
    DECLARE c_id   VARCHAR(64);

    DECLARE cur1 CURSOR FOR SELECT HEX(id) FROM acl_entities WHERE entity_type='context' AND parent_id = UNHEX(ctx);
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur1;

    SET max_sp_recursion_depth=10;
    REPEAT
        FETCH cur1 INTO c_id;
        IF NOT done THEN
            REPLACE INTO user_ctx_perm (login, ctx) VALUES (user, UNHEX(c_id));
            CALL _acl_context_child(user, c_id);
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_context_logical
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_context_logical( user VARCHAR(64), ctx_id VARCHAR(64) )
BEGIN
    SET max_sp_recursion_depth=10;
    SELECT entity_type,HEX(parent_id) FROM acl_entities WHERE id = UNHEX(ctx_id) into @c_type, @parent_id;
    IF @c_type = 'context' THEN
       REPLACE INTO user_ctx_perm (login, ctx) VALUES (user, UNHEX(ctx_id));
    ELSE
        IF @c_type = 'logical' THEN
            CALL _acl_context_logical(user, @parent_id);
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_fill_subnets
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_fill_subnets( user VARCHAR(64) )
BEGIN
    IF EXISTS (SELECT 1 FROM net LEFT JOIN user_net_perm ON user_net_perm.asset_id=net.id AND user_net_perm.login=user, user_ctx_perm, net_sensor_reference, sensor WHERE net.id=net_sensor_reference.net_id AND net_sensor_reference.sensor_id=sensor.id AND user_ctx_perm.ctx=net.ctx AND user_ctx_perm.login=user AND user_net_perm.asset_id IS NULL) THEN
        CREATE TEMPORARY TABLE IF NOT EXISTS tmpnet (PRIMARY KEY(asset_id)) AS SELECT asset_id from user_net_perm where login = user;
        CREATE TEMPORARY TABLE IF NOT EXISTS tmpnet1 (PRIMARY KEY(begin,end)) AS SELECT begin,end,net_id from net_cidrs LIMIT 0;
        INSERT IGNORE INTO tmpnet1 SELECT begin,end,net_id from net_cidrs;

        REPLACE INTO user_net_perm SELECT DISTINCT user, n1.net_id FROM tmpnet1 n1, tmpnet t INNER JOIN net_cidrs n ON t.asset_id = n.net_id WHERE n.net_id!=n1.net_id AND  n1.begin >= n.begin AND n1.end <= n.end;

        DROP TEMPORARY TABLE IF EXISTS tmpnet;
        DROP TEMPORARY TABLE IF EXISTS tmpnet1;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _acl_mr_proper
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _acl_mr_proper( user VARCHAR(64) )
BEGIN
    SELECT EXISTS (SELECT 1 from user_host_perm where login = user) INTO @hosts;
    SELECT EXISTS (SELECT 1 from user_net_perm where login = user) INTO @networks;
    SELECT EXISTS (SELECT 1 from user_sensor_perm where login = user) INTO @sensors;

    -- Check Sensors
    IF NOT @sensors AND @hosts THEN
        REPLACE INTO user_sensor_perm SELECT user, sensor.id FROM sensor, host, host_sensor_reference, user_host_perm WHERE sensor.id = host_sensor_reference.sensor_id AND host_sensor_reference.host_id=host.id AND host.id=user_host_perm.asset_id AND user_host_perm.login = user;
    END IF;
    IF NOT @sensors AND @networks THEN
        REPLACE INTO user_sensor_perm SELECT user, sensor.id FROM sensor, net, net_sensor_reference, user_net_perm WHERE sensor.id = net_sensor_reference.sensor_id AND net_sensor_reference.net_id=net.id AND net.id=user_net_perm.asset_id AND user_net_perm.login = user;
    END IF;

    -- Check 0xFF
    IF NOT @hosts THEN
        REPLACE INTO user_host_perm (login, asset_id) VALUES (user, UNHEX('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'));
    END IF;
    IF NOT @networks THEN
        REPLACE INTO user_net_perm (login, asset_id) VALUES (user, UNHEX('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'));
    END IF;

    -- If all then none
    IF ( is_pro() ) THEN
        IF NOT EXISTS (SELECT 1 FROM host LEFT JOIN user_host_perm ON user_host_perm.asset_id=host.id AND user_host_perm.login=user, user_ctx_perm, host_sensor_reference, sensor WHERE host.id=host_sensor_reference.host_id AND host_sensor_reference.sensor_id=sensor.id AND user_ctx_perm.ctx=host.ctx AND user_ctx_perm.login=user AND user_host_perm.asset_id IS NULL) THEN
            DELETE FROM user_host_perm WHERE login = user;
        END IF;
        IF NOT EXISTS (SELECT 1 FROM net LEFT JOIN user_net_perm ON user_net_perm.asset_id=net.id AND user_net_perm.login=user, user_ctx_perm, net_sensor_reference, sensor WHERE net.id=net_sensor_reference.net_id AND net_sensor_reference.sensor_id=sensor.id AND user_ctx_perm.ctx=net.ctx AND user_ctx_perm.login=user AND user_net_perm.asset_id IS NULL) THEN
            DELETE FROM user_net_perm WHERE login = user;
        END IF;
    ELSE
        IF NOT EXISTS (SELECT 1 FROM host LEFT JOIN user_host_perm ON user_host_perm.asset_id=host.id AND user_host_perm.login=user, host_sensor_reference, sensor WHERE host.id=host_sensor_reference.host_id AND host_sensor_reference.sensor_id=sensor.id AND user_host_perm.asset_id IS NULL) THEN
            DELETE FROM user_host_perm WHERE login = user;
        END IF;
        IF NOT EXISTS (SELECT 1 FROM net LEFT JOIN user_net_perm ON user_net_perm.asset_id=net.id AND user_net_perm.login=user, net_sensor_reference, sensor WHERE net.id=net_sensor_reference.net_id AND net_sensor_reference.sensor_id=sensor.id AND user_net_perm.asset_id IS NULL) THEN
            DELETE FROM user_net_perm WHERE login = user;
        END IF;
    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure acl_user_permissions
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE acl_user_permissions( IN user VARCHAR(64) )
BEGIN

    DELETE FROM user_host_perm WHERE login = user;
    DELETE FROM user_net_perm WHERE login = user;
    DELETE FROM user_ctx_perm WHERE login = user;
    DELETE FROM user_sensor_perm WHERE login = user;

    IF NOT ( is_admin(user) ) THEN
        IF ( is_pro() ) THEN
            -- USM
            CALL _acl_fill_contexts(user);

            -- Perms by user
            SELECT EXISTS (SELECT 1 FROM acl_assets WHERE login = user) INTO @asset_filter;
            SELECT EXISTS (SELECT 1 FROM acl_login_sensors WHERE login = user) INTO @sensor_filter;

            IF NOT @asset_filter AND NOT @sensor_filter THEN
                CALL _acl_fill_context_assets(user);
                CALL _acl_fill_context_sensors(user);
            ELSE
                CALL _acl_fill_assets(user);
                CALL _acl_fill_sensors(user);
            END IF;

        ELSE
            -- OSSIM
            CALL _acl_fill_assets(user);
            CALL _acl_fill_sensors(user);

        END IF;

        CALL _acl_fill_subnets(user);
        CALL _acl_mr_proper(user);

    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_users_affected_by_sensors
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE update_users_affected_by_sensors( s_id BINARY(16) )
BEGIN
    DECLARE done  INT DEFAULT 0;
    DECLARE user  VARCHAR(64);

    DECLARE cur1 CURSOR FOR SELECT DISTINCT login FROM acl_entities_users, acl_entities, acl_sensors WHERE acl_sensors.entity_id = acl_entities.id AND acl_entities.id=acl_entities_users.entity_id AND acl_entities.entity_type!='engine' AND acl_sensors.sensor_id = s_id;
    DECLARE cur2 CURSOR FOR SELECT DISTINCT login FROM acl_login_sensors WHERE sensor_id = s_id;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    IF ( is_pro() ) THEN
        OPEN cur1;

        REPEAT
            FETCH cur1 INTO user;
            IF NOT done THEN
                CALL acl_user_permissions(user);
            END IF;
        UNTIL done END REPEAT;

        CLOSE cur1;
    ELSE
        OPEN cur2;

        REPEAT
            FETCH cur2 INTO user;
            IF NOT done THEN
                CALL acl_user_permissions(user);
            END IF;
        UNTIL done END REPEAT;

        CLOSE cur2;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_users_affected_by_networks
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE update_users_affected_by_networks()
BEGIN
    DECLARE done  INT DEFAULT 0;
    DECLARE user  VARCHAR(64);

    DECLARE cur1 CURSOR FOR SELECT DISTINCT login FROM user_net_perm WHERE asset_id != UNHEX('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur1;

    REPEAT
        FETCH cur1 INTO user;
        IF NOT done THEN
            CALL acl_user_permissions(user);
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sensor_update
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE sensor_update(
    user VARCHAR(64),
    uuid VARCHAR(64),
    ip VARCHAR(15),
    name VARCHAR(64),
    prio INT,
    port INT,
    tzone FLOAT,
    descr VARCHAR(255),
    ctxs TEXT
)
SENSOR:BEGIN
    DECLARE x INT;
    DECLARE y INT;

    -- needed params
    IF INET6_ATON(ip) IS NOT NULL AND NOT user = '' THEN

        -- check params
        SELECT IF (uuid='',UPPER(REPLACE(UUID(), '-', '')),UPPER(uuid)) into @uuid;
        SET @ip = HEX(INET6_ATON(ip));
        SELECT IF (name='','(null)',name) into @name;
        SELECT IF (prio<1 OR prio>10,5,prio) into @prio;
        SELECT IF (port<1 OR port>65535,40001,port) into @port;
        SET @tzone = tzone;
        SET @descr = descr;
        SET @ctxs = ctxs;
        SELECT EXISTS (SELECT 1 from user_ctx_perm where login = user) INTO @get_ctx_where;
        SELECT `value` FROM config WHERE conf='encryption_key' into @system_uuid;
        SELECT `value` FROM config WHERE conf='gvm_host' into @gvm_host;

        -- check if exists with permissions
        IF @get_ctx_where THEN
            SELECT HEX(sensor.id),sensor.name FROM sensor, acl_sensors WHERE sensor.id=acl_sensors.sensor_id AND acl_sensors.entity_id in (SELECT ctx from user_ctx_perm where login = user) AND sensor.ip = UNHEX(@ip) INTO @sensor_id, @sensor_name;
        ELSE
            SELECT HEX(sensor.id),sensor.name FROM sensor WHERE sensor.ip = UNHEX(@ip) INTO @sensor_id, @sensor_name;
        END IF;

        -- already exists
        IF NOT @sensor_id = '' THEN
            IF NOT UPPER(@uuid) = UPPER(@sensor_id) THEN
                IF NOT @sensor_name = '(null)' THEN
                    SELECT CONCAT('Sensor ',ip,' already exists with different uuid') as status, NULL as sensor_id;
                    LEAVE SENSOR;
                END IF;
            ELSE
                -- Update existing
                SET @uuid = @sensor_id;
            END IF;
        END IF;

        -- insert
        SET @query = 'REPLACE INTO sensor (id, name, ip, priority, port, tzone, connect, descr) VALUES (UNHEX(?), ?, UNHEX(?), ?, ?, ?, 0, ?)';
        PREPARE stmt1 FROM @query;
        EXECUTE stmt1 USING @uuid, @name, @ip, @prio, @port, @tzone, @descr;
        DEALLOCATE PREPARE stmt1;

        SET @query = 'INSERT IGNORE INTO sensor_stats (sensor_id) VALUES (UNHEX(?))';
        PREPARE stmt1 FROM @query;
        EXECUTE stmt1 USING @uuid;
        DEALLOCATE PREPARE stmt1;

        SET @query = 'REPLACE INTO sensor_properties (sensor_id) VALUES (UNHEX(?))';
        PREPARE stmt1 FROM @query;
        EXECUTE stmt1 USING @uuid;
        DEALLOCATE PREPARE stmt1;

        -- Contexts
        IF @ctxs = '' THEN
            -- get default context
            SELECT UPPER(REPLACE(`value`,'-','')) FROM config WHERE conf='default_context_id' into @ctxs;
        END IF;
        DELETE FROM acl_sensors where sensor_id = UNHEX(@uuid) and entity_id IN (SELECT id FROM acl_entities WHERE entity_type='context');
        SELECT LENGTH(@ctxs) - LENGTH(REPLACE(@ctxs, ',', '')) INTO @nCommas;
        SET y = 1;
        SET x = @nCommas + 1;
        WHILE y <= x DO
                SELECT _split_string(@ctxs, ',', y) INTO @range;
                SET @query = 'REPLACE INTO acl_sensors (entity_id, sensor_id) VALUES (UNHEX(?), UNHEX(?))';
                PREPARE stmt1 FROM @query;
                EXECUTE stmt1 USING @range, @uuid;
                DEALLOCATE PREPARE stmt1;
                SET  y = y + 1;
            END WHILE;

        -- Added to vuln_nesus_servers by default
        IF NOT EXISTS(SELECT 1 FROM vuln_nessus_servers WHERE hostname=@uuid) THEN
            SET @query = 'REPLACE INTO vuln_nessus_servers (name , description, hostname, max_scans, current_scans) VALUES (?, "RemoteHost", ?, 3, 0)';
            PREPARE stmt1 FROM @query;
            EXECUTE stmt1 USING @name, @uuid;
            DEALLOCATE PREPARE stmt1;
        END IF;

        -- Unique sensor
        IF NOT EXISTS(SELECT 1 FROM sensor WHERE id != UNHEX(@uuid) AND name != '(null)') THEN

            CALL _orphans_of_sensor(@uuid);

        END IF;

        -- Default nessus host
        IF @gvm_host = '' THEN
            REPLACE INTO config VALUES ('gvm_host', INET6_NTOA(UNHEX(@ip)));
        END IF;

        -- Check if a asset exists
        IF NOT EXISTS(SELECT 1 FROM host h, host_ip hi WHERE h.id=hi.host_id AND hi.ip=UNHEX(@ip)) THEN
            SELECT REPLACE(UUID(), '-', '') into @asset_id;
            INSERT IGNORE INTO host (id, ctx, hostname, asset, threshold_c, threshold_a, alert, persistence, nat, rrd_profile, descr, lat, lon, av_component) VALUES (UNHEX(@asset_id), UNHEX(@range), @name, '2', '30', '30', '0', '0', '', '', '', '0', '0', '1');
            INSERT IGNORE INTO host_ip (host_id,ip) VALUES (UNHEX(@asset_id), UNHEX(@ip));
            INSERT IGNORE INTO host_sensor_reference (host_id,sensor_id) VALUES (UNHEX(@asset_id), UNHEX(@uuid));
        ELSE
            INSERT IGNORE INTO host_sensor_reference (host_id,sensor_id) VALUES ((SELECT h.id FROM host h, host_ip hi WHERE h.id=hi.host_id AND hi.ip=UNHEX(@ip)), UNHEX(@uuid));
            UPDATE host h, host_ip hi SET hostname=@name WHERE h.id=hi.host_id AND hi.ip=UNHEX(@ip);
        END IF;

        -- Clean Orphans
        DELETE aux FROM sensor_stats aux LEFT JOIN sensor s ON s.id=aux.sensor_id WHERE s.id IS NULL;
        DELETE aux FROM sensor_properties aux LEFT JOIN sensor s ON s.id=aux.sensor_id WHERE s.id IS NULL;
        DELETE aux FROM acl_sensors aux LEFT JOIN sensor s ON s.id=aux.sensor_id WHERE s.id IS NULL;
        DELETE aux FROM vuln_nessus_servers aux LEFT JOIN sensor s ON s.id=UNHEX(aux.hostname) WHERE s.id IS NULL;

        CALL _host_default_os();

        SELECT CONCAT('Sensor successfully updated') as status, @uuid as sensor_id;

    ELSE

        SELECT CONCAT('Invalid IP or User values') as status, NULL as sensor_id;

    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure acl_get_allowed_menus
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE acl_get_allowed_menus( user VARCHAR(64), menu_id INT )
BEGIN
    IF is_admin(user) THEN
        IF menu_id = 0 THEN
            SELECT id,value,description FROM acl_perm;
        ELSE
            SELECT id,value,description FROM acl_perm WHERE id=menu_id;
        END IF;
    ELSE
        IF menu_id = 0 THEN
            SELECT p.id,p.value,p.description FROM acl_perm p, acl_templates t, acl_templates_perms tp, users u WHERE tp.ac_templates_id=t.id AND tp.ac_perm_id=p.id AND t.id=u.template_id AND u.login = user;
        ELSE
            SELECT p.id,p.value,p.description FROM acl_perm p, acl_templates t, acl_templates_perms tp, users u WHERE tp.ac_templates_id=t.id AND tp.ac_perm_id=p.id AND t.id=u.template_id AND u.login = user AND p.id=menu_id;
        END IF;
    END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _orphans_of_sensor
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _orphans_of_sensor(
    uuid VARCHAR(64)
    )
BEGIN
    SELECT UPPER(uuid) into @uuid;

    -- Update default networks
    REPLACE INTO net_sensor_reference (net_id,sensor_id) SELECT id,UNHEX(@uuid) FROM net WHERE name like 'Pvt_%';
    -- Orphan networks
    REPLACE INTO net_sensor_reference (net_id,sensor_id) SELECT n.id,UNHEX(@uuid) FROM net n LEFT JOIN net_sensor_reference ns ON n.id=ns.net_id WHERE ns.sensor_id IS NULL;
    -- Av component hosts
    REPLACE INTO host_sensor_reference (host_id,sensor_id) SELECT h.id,UNHEX(@uuid) FROM host h WHERE h.av_component=1;
    -- Orphan hosts
    REPLACE INTO host_sensor_reference (host_id,sensor_id) SELECT h.id,UNHEX(@uuid) FROM host h LEFT JOIN host_sensor_reference hs ON h.id=hs.host_id WHERE hs.sensor_id IS NULL;
    -- Fix Host net references
    REPLACE INTO host_net_reference SELECT host.id,net_id FROM host, host_ip, net_cidrs WHERE host.id = host_ip.host_id AND host_ip.ip >= net_cidrs.begin AND host_ip.ip <= net_cidrs.end;

    -- Host/Networks without ctx
    UPDATE net SET ctx=(SELECT UNHEX(REPLACE(value,'-','')) FROM config WHERE conf = 'default_context_id') WHERE ctx=UNHEX('00000000000000000000000000000000');
    UPDATE host SET ctx=(SELECT UNHEX(REPLACE(value,'-','')) FROM config WHERE conf = 'default_context_id') WHERE ctx=UNHEX('00000000000000000000000000000000');
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure alarm_taxonomy_populate
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE alarm_taxonomy_populate()
BEGIN
  DECLARE done        INT DEFAULT 0;
  DECLARE engine_uuid VARCHAR(255);

  DECLARE cur1 CURSOR FOR select hex(id) from acl_entities where entity_type='engine';
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  OPEN cur1;

  REPEAT
    FETCH cur1 INTO engine_uuid;
    IF NOT done THEN
        SET @engine = unhex(engine_uuid);
        REPLACE INTO alarm_taxonomy SELECT sid,@engine,kingdom,category,subcategory FROM alarm_taxonomy WHERE engine_id=unhex('00000000000000000000000000000000');
    END IF;
  UNTIL done END REPEAT;

  CLOSE cur1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure system_delete
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE system_delete(
    system_id VARCHAR(36)
)
DELETE_SYSTEM:BEGIN

    SET @system_id = REPLACE(system_id,'-','');

    IF NOT EXISTS(SELECT 1 FROM system WHERE id=UNHEX(@system_id)) THEN
        SELECT CONCAT('System ',system_id,' does not exists') as status;
        LEAVE DELETE_SYSTEM;
    END IF;

    SELECT HEX(sensor_id) FROM system WHERE id=UNHEX(@system_id) into @sensor_id;
    SELECT HEX(server_id) FROM system WHERE id=UNHEX(@system_id) into @server_id;

    -- Delete all sensor references if doesn't exists other system
    IF EXISTS(SELECT 1 FROM sensor WHERE id=UNHEX(@sensor_id)) AND NOT EXISTS(SELECT 1 FROM system WHERE id!=UNHEX(@system_id) AND sensor_id=UNHEX(@sensor_id)) THEN

        -- Sensor related tables
        DELETE FROM acl_sensors WHERE sensor_id = UNHEX(@sensor_id);
        DELETE FROM sensor_properties WHERE sensor_id = UNHEX(@sensor_id);
        DELETE FROM sensor_stats WHERE sensor_id = UNHEX(@sensor_id);
        DELETE FROM location_sensor_reference WHERE sensor_id = UNHEX(@sensor_id);
        DELETE FROM vuln_job_schedule WHERE email = @sensor_id;
        DELETE FROM vuln_nessus_servers WHERE hostname = @sensor_id;
        UPDATE policy, policy_sensor_reference SET policy.active=0 WHERE policy.id=policy_sensor_reference.policy_id AND policy_sensor_reference.sensor_id = UNHEX(@sensor_id);
        DELETE FROM policy_sensor_reference WHERE sensor_id = UNHEX(@sensor_id);
        DELETE FROM sensor WHERE id = UNHEX(@sensor_id);

        SET @disable_calc_perms=1;
        -- Host related with sensors
        DELETE FROM host_sensor_reference WHERE sensor_id = UNHEX(@sensor_id);
        CREATE TEMPORARY TABLE IF NOT EXISTS tmpdel (PRIMARY KEY(id)) AS SELECT h.id FROM host h LEFT JOIN host_sensor_reference aux ON h.id=aux.host_id WHERE aux.host_id IS NULL;
        DELETE h FROM host h LEFT JOIN host_sensor_reference aux ON h.id=aux.host_id WHERE aux.host_id IS NULL;
        DELETE aux FROM host_net_reference aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM host_types aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM host_services aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM host_properties aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM host_software aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM host_scan aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM host_vulnerability aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM repository_relationships aux LEFT JOIN tmpdel h ON h.id=unhex(aux.keyname) WHERE h.id IS NOT NULL;
        DELETE aux FROM host_qualification aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM host_group_reference aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DELETE aux FROM host_ip aux LEFT JOIN tmpdel h ON h.id=aux.host_id WHERE h.id IS NOT NULL;
        DROP TABLE tmpdel;

        -- Networks related with sensors
        DELETE FROM net_sensor_reference WHERE sensor_id = UNHEX(@sensor_id);
        CREATE TEMPORARY TABLE IF NOT EXISTS tmpdel (PRIMARY KEY(id)) AS SELECT n.id FROM net n LEFT JOIN net_sensor_reference aux ON n.id=aux.net_id WHERE aux.net_id IS NULL;
        DELETE n FROM net n LEFT JOIN net_sensor_reference aux ON n.id=aux.net_id WHERE aux.net_id IS NULL;
        DELETE aux FROM host_net_reference aux LEFT JOIN tmpdel n ON n.id=aux.net_id WHERE n.id IS NOT NULL;
        DELETE aux FROM repository_relationships aux LEFT JOIN tmpdel n ON n.id=unhex(aux.keyname) WHERE n.id IS NOT NULL;
        DELETE aux FROM net_cidrs aux LEFT JOIN tmpdel n ON n.id=aux.net_id WHERE n.id IS NOT NULL;
        DELETE aux FROM net_sensor_reference aux LEFT JOIN tmpdel n ON n.id=aux.net_id WHERE n.id IS NOT NULL;
        DELETE aux FROM host_net_reference aux LEFT JOIN tmpdel n ON n.id=aux.net_id WHERE n.id IS NOT NULL;
        DELETE aux FROM net_scan aux LEFT JOIN tmpdel n ON n.id=aux.net_id WHERE n.id IS NOT NULL;
        DELETE aux FROM net_qualification aux LEFT JOIN tmpdel n ON n.id=aux.net_id WHERE n.id IS NOT NULL;
        DELETE aux FROM net_group_reference aux LEFT JOIN tmpdel n ON n.id=aux.net_id WHERE n.id IS NOT NULL;
        DELETE aux FROM net_vulnerability aux LEFT JOIN tmpdel n ON n.id=aux.net_id WHERE n.id IS NOT NULL;
        DROP TABLE tmpdel;

        SET @disable_calc_perms=NULL;
        CALL update_all_users();
    END IF;

    -- Delete all server references if doesn't exists other system
    IF EXISTS(SELECT 1 FROM server WHERE id=UNHEX(@server_id)) AND NOT EXISTS(SELECT 1 FROM system WHERE id!=UNHEX(@system_id) AND server_id=UNHEX(@server_id)) THEN

        DELETE FROM server_hierarchy WHERE child_id = UNHEX(@server_id) OR parent_id = UNHEX(@server_id);
        DELETE FROM server_forward_role WHERE server_src_id = UNHEX(@server_id) OR server_dst_id = UNHEX(@server_id);
        DELETE FROM server_role WHERE server_id = UNHEX(@server_id);
        DELETE FROM server WHERE id = UNHEX(@server_id);

    END IF;

    -- Delete system
    DELETE FROM system WHERE id=UNHEX(@system_id);
    SELECT CONCAT('System deleted') as status;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure server_delete_parent
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE server_delete_parent(
    server_id VARCHAR(36)
    )
BEGIN
    SELECT REPLACE(server_id,'-','') into @server_id;

    DELETE FROM server_hierarchy WHERE parent_id = UNHEX(@server_id);
    DELETE FROM server_forward_role WHERE server_dst_id = UNHEX(@server_id);
    DELETE FROM server_role WHERE server_id = UNHEX(@server_id);
    DELETE FROM server WHERE id = UNHEX(@server_id);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure system_update
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE system_update(
    _system_id VARCHAR(36),
    _name      VARCHAR(64),
    _admin_ip  VARCHAR(64),
    _vpn_ip    VARCHAR(64),
    _profile   VARCHAR(64),
    _ha_ip     VARCHAR(64),
    _ha_name   VARCHAR(64),
    _ha_role   VARCHAR(64),
    _sensor_id VARCHAR(64),
    _server_id VARCHAR(64)
)
UPDATE_SYSTEM:BEGIN

    SELECT REPLACE(_system_id,'-','') into @system_id;

    IF NOT EXISTS(SELECT 1 FROM system WHERE id=UNHEX(@system_id)) THEN

        -- create new one if it's possible

        IF (_system_id != '' AND _name != '' AND _admin_ip != '' AND _profile != '') THEN

            SELECT IF (_sensor_id='',NULL,REPLACE(_sensor_id,'-','')) into @sensor_id;
            SELECT IF (_server_id='',NULL,REPLACE(_server_id,'-','')) into @server_id;
            REPLACE INTO `system` (id,name,admin_ip,vpn_ip,profile,ha_ip,ha_name,ha_role,sensor_id,server_id) VALUES (UNHEX(@system_id), _name, inet6_aton(_admin_ip), inet6_aton(_vpn_ip), _profile, inet6_aton(_ha_ip), _ha_name, _ha_role, UNHEX(@sensor_id), UNHEX(@server_id));

        ELSE

            SELECT CONCAT('It needs al least system uuid, name, admin_ip and profile to create a new system') as status;
            LEAVE UPDATE_SYSTEM;

        END IF;

        SELECT CONCAT('System ',_system_id,' created') as status;

    ELSE

        -- update each field

        IF (_sensor_id != '') THEN
            UPDATE system SET sensor_id=UNHEX(REPLACE(_sensor_id,'-','')) WHERE id=UNHEX(@system_id);
        END IF;

        IF (_server_id != '') THEN
            UPDATE system SET server_id=UNHEX(REPLACE(_server_id,'-','')) WHERE id=UNHEX(@system_id);
        END IF;

        IF (_name != '') THEN
            UPDATE system SET name=_name WHERE id=UNHEX(@system_id);

            -- name populate in server/sensor
            SELECT HEX(sensor_id),HEX(server_id),name FROM system WHERE id=UNHEX(@system_id) into @sensor_id, @server_id, @system_name;

            UPDATE server SET name=@system_name WHERE id=UNHEX(@server_id);

            UPDATE sensor SET name=@system_name WHERE id=UNHEX(@sensor_id);

        END IF;

        IF (_profile != '') THEN
            UPDATE system SET profile=_profile WHERE id=UNHEX(@system_id);
        END IF;

        IF (_ha_ip != '' AND _ha_name != '' AND _ha_role != '') THEN
            UPDATE system SET ha_ip=inet6_aton(_ha_ip), ha_name=_ha_name, ha_role=_ha_role WHERE id=UNHEX(@system_id);
        END IF;

        IF (_admin_ip != '' OR _vpn_ip != '') THEN

            -- admin_ip or vpn_ip populate in server/sensor
            IF (_admin_ip != '') THEN
                UPDATE system SET admin_ip=inet6_aton(_admin_ip) WHERE id=UNHEX(@system_id);
            END IF;

            IF (_vpn_ip != '') THEN
                UPDATE system SET vpn_ip=inet6_aton(_vpn_ip) WHERE id=UNHEX(@system_id);
            END IF;

            -- Populate admin_ip if the system is not HA
            SELECT inet6_ntoa(ha_ip) FROM system WHERE id=UNHEX(@system_id) into @ha_ip;

            IF @ha_ip IS NULL OR @ha_ip = '' THEN
                SELECT HEX(sensor_id),HEX(server_id),inet6_ntoa(admin_ip),inet6_ntoa(vpn_ip) FROM system WHERE id=UNHEX(@system_id) into @sensor_id, @server_id, @admin_ip, @vpn_ip;

                UPDATE server SET ip=IFNULL(inet6_aton(@vpn_ip),inet6_aton(@admin_ip)) WHERE id=UNHEX(@server_id);

                UPDATE sensor SET ip=IFNULL(inet6_aton(@vpn_ip),inet6_aton(@admin_ip)) WHERE id=UNHEX(@sensor_id);
            END IF;

        END IF;

        CALL _host_default_os();

        SELECT CONCAT('System ',_system_id,' updated') as status;

    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_all_users
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE update_all_users()
BEGIN
    DECLARE done  INT DEFAULT 0;
    DECLARE user  VARCHAR(64);

    DECLARE cur1 CURSOR FOR SELECT DISTINCT login FROM users WHERE enabled=1;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur1;

    REPEAT
        FETCH cur1 INTO user;
        IF NOT done THEN
            CALL acl_user_permissions(user);
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _delete_orphan_backlogs
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _delete_orphan_backlogs(
cleanup BOOLEAN
)
BEGIN
    DECLARE num_events INT;

    CREATE TEMPORARY TABLE IF NOT EXISTS tmpbckdel (backlog_id BINARY(16) NOT NULL, PRIMARY KEY ( backlog_id )) ENGINE=INNODB;
    CREATE TEMPORARY TABLE IF NOT EXISTS tmpevndel (event_id BINARY(16) NOT NULL, PRIMARY KEY ( event_id )) ENGINE=INNODB;
    IF (cleanup = 1) THEN
      INSERT IGNORE INTO tmpbckdel SELECT id FROM backlog b WHERE b.timestamp = '1970-01-01 00:00:00' AND id NOT IN (SELECT backlog_id FROM server_cleanbcktmp);
    ELSE
      INSERT IGNORE INTO tmpbckdel SELECT id FROM backlog WHERE timestamp = '1970-01-01 00:00:00';
    END IF;

    IF EXISTS (SELECT 1 FROM tmpbckdel LIMIT 1) THEN

        INSERT IGNORE INTO tmpevndel SELECT be.event_id FROM backlog_event be, tmpbckdel tmp WHERE be.backlog_id = tmp.backlog_id;

        CREATE TEMPORARY TABLE IF NOT EXISTS tmpexclude (event_id BINARY(16) NOT NULL, PRIMARY KEY ( event_id )) ENGINE=MEMORY;
        INSERT IGNORE INTO tmpexclude SELECT t.event_id FROM tmpevndel t, backlog_event be LEFT JOIN tmpbckdel b ON be.backlog_id = b.backlog_id WHERE be.event_id = t.event_id AND b.backlog_id IS NULL;
        DELETE t FROM tmpevndel t, tmpexclude ex WHERE t.event_id = ex.event_id;
        DROP TABLE tmpexclude;

        -- Delete events
        CREATE TEMPORARY TABLE _ttmp (id binary(16) NOT NULL, PRIMARY KEY (`id`)) ENGINE=MEMORY;
        SELECT COUNT(event_id) FROM tmpevndel INTO @num_events;

        WHILE @num_events > 0 DO
            INSERT INTO _ttmp SELECT event_id FROM tmpevndel LIMIT 10000;
            DELETE e FROM event e, _ttmp t WHERE e.id = t.id;
            DELETE i FROM idm_data i, _ttmp t WHERE i.event_id = t.id;
            DELETE o FROM otx_data o, _ttmp t WHERE o.event_id = t.id;
            DELETE x FROM extra_data x, _ttmp t WHERE x.event_id= t.id;
            DELETE te FROM tmpevndel te, _ttmp t WHERE te.event_id=t.id;
            TRUNCATE TABLE _ttmp;
            SET @num_events = @num_events - 10000;
        END WHILE;

        -- Delete backlogs
        TRUNCATE TABLE _ttmp;
        SELECT COUNT(backlog_id) FROM tmpbckdel INTO @num_events;

        WHILE @num_events > 0 DO
            INSERT INTO _ttmp SELECT backlog_id FROM tmpbckdel LIMIT 10000;
            DELETE be FROM backlog_event be, _ttmp t WHERE be.backlog_id=t.id;
            DELETE b, ta, c, h, n, a FROM backlog b INNER JOIN _ttmp t ON t.id=b.id LEFT JOIN component_tags ta ON ta.id_component = b.id LEFT JOIN alarm_ctxs c ON c.id_alarm = b.id LEFT JOIN alarm_nets n ON n.id_alarm = b.id LEFT JOIN alarm_hosts h ON h.id_alarm = b.id LEFT JOIN alarm a ON a.backlog_id = b.id;
            DELETE te FROM tmpbckdel te, _ttmp t WHERE te.backlog_id=t.id;
            TRUNCATE TABLE _ttmp;
            SET @num_events = @num_events - 10000;
        END WHILE;

        DROP TABLE _ttmp;

    END IF;
    DROP TABLE tmpevndel;
    DROP TABLE tmpbckdel;
END$$

DELIMITER ;


-- -----------------------------------------------------
-- procedure compliance_aggregate
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE compliance_aggregate()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE _ref VARCHAR(512);
    DECLARE _secc VARCHAR(512);
    DECLARE _sids VARCHAR(512);
    DECLARE _a VARCHAR(512);
    DECLARE _b VARCHAR(512);
    DECLARE _c VARCHAR(512);
    DECLARE _d VARCHAR(512);
    DECLARE _e VARCHAR(512);
    DECLARE _i INT;
    DECLARE _j INT;
    DECLARE _k INT;
    DECLARE _l INT;
    DECLARE _m INT;
    DECLARE _n INT;
    DECLARE _o INT;
    DECLARE _p INT;
    DECLARE _q INT;
    DECLARE x INT DEFAULT 0;
    DECLARE y INT DEFAULT 0;

    -- ISO27001
    DECLARE cur1 CURSOR FOR SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A05_Security_Policy WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A06_IS_Organization WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A07_Asset_Mgnt WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A08_Human_Resources WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A09_Physical_security WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A10_Com_OP_Mgnt WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A11_Acces_control WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A12_IS_acquisition WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A13_IS_incident_mgnt WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A14_BCM WHERE SIDSS_Ref >= 1 UNION ALL SELECT `Ref`,Security_controls,SIDSS_Ref FROM ISO27001An.A15_Compliance WHERE SIDSS_Ref >= 1;
    DECLARE cur2 CURSOR FOR SELECT DISTINCT(i.destination) AS dest_ip, net.name AS service FROM net, net_cidrs, datawarehouse.incidents_ssi i WHERE net.id=net_cidrs.net_id AND inet6_aton(i.destination) >=  net_cidrs.begin AND inet6_aton(i.destination) <=  net_cidrs.end AND i.destination <> '' AND i.destination <> '0.0.0.0' GROUP BY 1;
    DECLARE cur3 CURSOR FOR SELECT incident.type_id, incident.title, incident.priority, incident_alarm.src_ips, incident_alarm.dst_ips, ifnull(incident_ticket.description,''), YEAR(incident.event_start), MONTH(incident.event_start), DAY(incident.event_start), HOUR(incident.event_start), MINUTE(incident.event_start), count(distinct(incident.id)) FROM incident LEFT JOIN incident_ticket ON incident_ticket.incident_id=incident.id,incident_alarm, incident_type WHERE incident_alarm.incident_id=incident.id and incident_type.id=incident.type_id GROUP BY 1,2,3,4,5,7,8,9,10,11;
    DECLARE cur4 CURSOR FOR SELECT a.plugin_sid, s.name, a.risk, inet6_ntoa(a.src_ip), inet6_ntoa(a.dst_ip), "no_detail", YEAR(a.timestamp), MONTH(a.timestamp), HOUR(a.timestamp), DAY(a.timestamp), MINUTE(a.timestamp), count(*) as volume FROM alarm a, plugin_sid s WHERE a.plugin_id=s.plugin_id AND a.plugin_sid=s.sid AND a.status="open" AND s.plugin_id=1505 GROUP BY 1,2,3,4,5,6,7,8,9,10,11;
    DECLARE cur5 CURSOR FOR SELECT inet6_ntoa(a.src_ip) AS ip, net.name AS service FROM net, alarm a, net_cidrs n WHERE n.net_id=net.id AND a.src_ip >= n.begin AND a.src_ip <= n.end GROUP BY 1 UNION SELECT inet6_ntoa(a.dst_ip) AS ip, net.name AS service FROM net, alarm a, net_cidrs n WHERE n.net_id=net.id AND a.dst_ip >= n.begin AND a.dst_ip <= n.end GROUP BY 1;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    DELETE FROM datawarehouse.iso27001sid;
    SET AUTOCOMMIT=0;

    OPEN cur1;

    REPEAT
        FETCH cur1 INTO _ref,_secc,_sids;
        IF NOT done THEN
            SET @ref = _ref;
            SET @secc = _secc;
            SELECT LENGTH(_sids) - LENGTH(REPLACE(_sids, ',', '')) INTO @nCommas;
            SET y = 1;
            SET x = @nCommas + 1;
            WHILE y <= x DO
                SELECT _split_string(_sids, ',', y) INTO @range;
                SET @query = 'INSERT INTO datawarehouse.iso27001sid VALUES (?, ?, ?)';
                PREPARE sql_query FROM @query;
                EXECUTE sql_query USING @ref, @secc, @range;
                DEALLOCATE PREPARE sql_query;
                SET  y = y + 1;
            END WHILE;
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;

    COMMIT;

    -- IP2SERVICE DST_IP
    SET done = 0;

    OPEN cur2;

    REPEAT
        FETCH cur2 INTO _a,_b;
        IF NOT done THEN
            SET @query = 'REPLACE INTO datawarehouse.ip2service (`dest_ip`, `service`) VALUES (?, ?)';
            SET @a = _a;
            SET @b = _b;
            PREPARE sql_query FROM @query;
            EXECUTE sql_query USING @a, @b;
            DEALLOCATE PREPARE sql_query;
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur2;

    COMMIT;

    -- INCIDENTS_SSI
    SET done = 0;

    OPEN cur3;

    REPEAT
        FETCH cur3 INTO _a,_b,_j,_c,_d,_e,_k,_l,_m,_n,_o,_p;
        IF NOT done THEN
            SET @query = 'REPLACE INTO datawarehouse.incidents_ssi (`type`, `descr`, `priority`, `source`, `destination`, `details`, `year`, `month`, `day`, `hour`, `minute`, `volume`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
            SET @a = _a;
            SET @b = _b;
            SET @c = _c;
            SET @d = _d;
            SET @e = _e;
            SET @i = _i;
            SET @j = _j;
            SET @k = _k;
            SET @l = _l;
            SET @m = _m;
            SET @n = _n;
            SET @o = _o;
            SET @p = _p;
            PREPARE sql_query FROM @query;
            EXECUTE sql_query USING @a, @b, @j, @c, @d, @e, @k, @l, @m, @n, @o, @p;
            DEALLOCATE PREPARE sql_query;
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur3;

    COMMIT;

    -- SSI
    SET done = 0;

    OPEN cur4;

    REPEAT
        FETCH cur4 INTO _j,_a,_k,_b,_c,_d,_l,_m,_n,_o,_p,_q;
        IF NOT done THEN
            SET @query = 'REPLACE INTO datawarehouse.ssi (`sid`, `descr`, `priority`, `source`, `destination`, `details`, `year`, `month`, `hour`, `day`, `minute`, `volume`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';
            SET @a = _a;
            SET @b = _b;
            SET @c = _c;
            SET @d = _d;
            SET @i = _i;
            SET @j = _j;
            SET @k = _k;
            SET @l = _l;
            SET @m = _m;
            SET @n = _n;
            SET @o = _o;
            SET @p = _p;
            SET @q = _q;
            PREPARE sql_query FROM @query;
            EXECUTE sql_query USING @j, @a, @k, @b, @c, @d, @l, @m, @n, @o, @p, @q;
            DEALLOCATE PREPARE sql_query;
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur4;

    COMMIT;

    -- IP2SERVICE SRC_IP
    SET done = 0;

    OPEN cur5;

    REPEAT
        FETCH cur5 INTO _a,_b;
        IF NOT done THEN
            SET @query = 'REPLACE INTO datawarehouse.ip2service (`dest_ip`, `service`) VALUES (?, ?)';
            SET @a = _a;
            SET @b = _b;
            PREPARE sql_query FROM @query;
            EXECUTE sql_query USING @a, @b;
            DEALLOCATE PREPARE sql_query;
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur5;

    COMMIT;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function get_ip_by_sensor_id
-- -----------------------------------------------------

DELIMITER $$
CREATE FUNCTION get_ip_by_sensor_id( component VARCHAR(64) )
RETURNS TEXT
BEGIN
    SET @uuid = REPLACE(component,'-','');
    SET @ip = NULL;
    IF EXISTS (SELECT 1 FROM sensor WHERE id=UNHEX(@uuid)) THEN
        SELECT IFNULL(vpn_ip,IFNULL(ha_ip,IFNULL(admin_ip,ip))) FROM sensor LEFT JOIN system ON sensor.id=system.sensor_id WHERE sensor.id=UNHEX(@uuid) into @ip;
    END IF;
    RETURN INET6_NTOA(@ip);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function get_ip_by_server_id
-- -----------------------------------------------------

DELIMITER $$
CREATE FUNCTION get_ip_by_server_id( component VARCHAR(64) )
RETURNS TEXT
BEGIN
    SET @uuid = REPLACE(component,'-','');
    SET @ip = NULL;
    IF EXISTS (SELECT 1 FROM server WHERE id=UNHEX(@uuid)) THEN
        SELECT IFNULL(vpn_ip,IFNULL(ha_ip,IFNULL(admin_ip,ip))) FROM server LEFT JOIN system ON server.id=system.server_id WHERE server.id=UNHEX(@uuid) into @ip;
    END IF;
    RETURN INET6_NTOA(@ip);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function get_ip_by_system_id
-- -----------------------------------------------------

DELIMITER $$
CREATE FUNCTION get_ip_by_system_id( component VARCHAR(64) )
RETURNS TEXT
BEGIN
    SET @uuid = REPLACE(component,'-','');
    SET @ip = NULL;
    IF EXISTS (SELECT 1 FROM system WHERE id=UNHEX(@uuid)) THEN
        SELECT IFNULL(vpn_ip,IFNULL(ha_ip,admin_ip)) FROM system WHERE id=UNHEX(@uuid) into @ip;
    END IF;
    RETURN INET6_NTOA(@ip);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure acl_get_allowed_groups
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE acl_get_allowed_groups( user VARCHAR(64), uuid VARCHAR(64) )
BEGIN
    SELECT host_where(user,'host.') INTO @perms;
    SET @query = '';
    IF uuid = '' THEN
        SET @query = CONCAT('SELECT DISTINCT HEX(host_group.id) as host_id FROM host_group,host,host_group_reference WHERE host_group.id=host_group_reference.group.id AND host_group_reference.host_id=host.id ', @perms);
    ELSE
        SET @query = CONCAT('SELECT DISTINCT HEX(host_group.id) as host_id FROM host_group,host,host_group_reference WHERE host_group.id=host_group_reference.group.id AND host_group_reference.host_id=host.id AND host_group.id=UNHEX("', uuid, '") ', @perms);
    END IF;
    PREPARE stmt1 FROM @query;
    EXECUTE stmt1;
    DEALLOCATE PREPARE stmt1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure user_del
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE user_del (
    IN login VARCHAR(64)
)
BEGIN
    SET @user = login;
    DELETE FROM users WHERE users.login=@user;
    DELETE FROM user_host_perm WHERE user_host_perm.login=@user;
    DELETE FROM user_net_perm WHERE user_net_perm.login=@user;
    DELETE FROM user_sensor_perm WHERE user_sensor_perm.login=@user;
    DELETE FROM user_ctx_perm WHERE user_ctx_perm.login=@user;
    DELETE FROM alienvault_api.user_perms WHERE user_perms.login=@user;
    DELETE FROM acl_entities_users WHERE acl_entities_users.login=@user;
    DELETE FROM acl_assets WHERE acl_assets.login=@user;
    DELETE FROM acl_entities_users WHERE acl_entities_users.login=@user;
    DELETE FROM acl_login_sensors WHERE acl_login_sensors.login=@user;
    DELETE FROM custom_report_scheduler WHERE custom_report_scheduler.user=@user;
    UPDATE user_config SET user_config.login='admin' WHERE user_config.login=@user AND category='custom_report';
    DELETE FROM dashboard_tab_config WHERE dashboard_tab_config.user=@user;
    DELETE FROM dashboard_tab_options WHERE dashboard_tab_options.user=@user;
    DELETE FROM user_config WHERE user_config.login=@user;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure user_add
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE user_add (
    IN _login VARCHAR(64),
    IN _passwd VARCHAR(128),
	IN _salt VARCHAR(8),
    IN _is_admin INT
)
BEGIN
    SET _passwd = SHA2(CONCAT(_salt,_passwd), 256);
    IF EXISTS (SELECT 1 FROM users WHERE users.login=_login)
    THEN
        SELECT CONCAT(_login,' already exist') as status;
    ELSE
        SET @uuid = SUBSTRING(SHA1(CONCAT(_login,'#',_passwd)),1,32);
        SELECT HEX(id) FROM acl_templates LIMIT 1 INTO @template_id;
        INSERT INTO users (login, login_method, name, pass, email, company, department, template_id, language, first_login, timezone, is_admin, uuid, last_logon_try, salt) VALUES (_login, 'pass', _login, _passwd, '', '', '', UNHEX(@template_id), 'en_GB', 0, 'US/Eastern', _is_admin, UNHEX(@uuid), now(), _salt);
        INSERT INTO acl_entities_users (login, entity_id) VALUES (_login, (SELECT UNHEX(REPLACE (value, '-', '')) FROM config WHERE conf = 'default_context_id'));
        INSERT INTO dashboard_tab_options (`id`, `user`, `visible`, `tab_order`) VALUES (1, _login, 1, 11), (2, _login, 1, 10), (3, _login, 1, 9), (4, _login, 1, 8), (5, _login, 0, 7), (6, _login, 1, 6), (8, _login, 0, 5), (9, _login, 0, 4), (10, _login, 0, 3), (11, _login, 0, 2), (12, _login, 0, 1);
        IF _is_admin=0 THEN
            CALL acl_user_permissions(_login);
        END IF;
        SELECT CONCAT(_login,' has been successfully created') as status;
    END IF;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _update_vuln_assets
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _update_vuln_assets ( IN _job_id INT )
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE _jid INT DEFAULT 0;
    DECLARE _targets TEXT;
    DECLARE x INT DEFAULT 0;
    DECLARE y INT DEFAULT 0;
    DECLARE cur1 CURSOR FOR SELECT id,targets FROM _tmp_jobs;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    CREATE TEMPORARY TABLE IF NOT EXISTS _tmp_jobs (id int(11) NOT NULL, targets TEXT) ENGINE=InnoDB;
    CREATE TEMPORARY TABLE IF NOT EXISTS _tmp_net (PRIMARY KEY(begin,end)) AS SELECT begin,end,net_id from net_cidrs LIMIT 0;
    INSERT IGNORE INTO _tmp_net SELECT begin,end,net_id from net_cidrs;

    IF _job_id = 0 THEN
        SET @jtype = 0;
        INSERT IGNORE INTO _tmp_jobs SELECT id,meth_TARGET FROM vuln_job_schedule;
    ELSE
        SET @jtype = 1;
        INSERT IGNORE INTO _tmp_jobs SELECT id,meth_TARGET FROM vuln_jobs WHERE id=_job_id;
    END IF;

    OPEN cur1;

    REPEAT
        FETCH cur1 INTO _jid,_targets;
        IF NOT done THEN
            DELETE FROM vuln_job_assets WHERE job_id=_jid AND job_type=@jtype;
            -- Line by line iterator
            SELECT LENGTH(_targets) - LENGTH(REPLACE(_targets, '\n', '')) INTO @nCommas;
            SET y = 1;
            SET x = @nCommas + 1;
            SET @query = '';
            WHILE y <= x DO
                SELECT _split_string(_targets, '\n', y) INTO @target;
                IF @target REGEXP '.*#.*' THEN
                    SELECT _split_string(@target, '#', 1) INTO @uuid;
                    SELECT _split_string(@target, '#', 2) INTO @asset_type;
                    -- asset
                    INSERT IGNORE INTO vuln_job_assets (job_id, job_type, asset_id) VALUES (_jid, @jtype, UNHEX(@uuid));
                    INSERT IGNORE INTO vuln_job_assets SELECT _jid, @jtype, n1.net_id FROM _tmp_net n1, net_cidrs n WHERE n1.begin >= n.begin AND n1.end <= n.end AND n.net_id=UNHEX(@uuid);
                    -- host groups
                    IF @asset_type = 'hostgroup' THEN
                        INSERT IGNORE INTO vuln_job_assets (job_id, job_type, asset_id) SELECT _jid, @jtype, host_id FROM host_group_reference WHERE host_group_id=UNHEX(@uuid);
                    -- network groups
                    ELSEIF @asset_type = 'netgroup' THEN
                        INSERT IGNORE INTO vuln_job_assets (job_id, job_type, asset_id) SELECT _jid, @jtype, net_id FROM net_group_reference WHERE net_group_id=UNHEX(@uuid);
                        INSERT IGNORE INTO vuln_job_assets (job_id, job_type, asset_id) SELECT DISTINCT _jid, @jtype, host_id FROM host_net_reference, net_group_reference WHERE host_net_reference.net_id = net_group_reference.net_id AND net_group_reference.net_group_id=UNHEX(@uuid);
                    -- network cidrs
                    ELSEIF @asset_type REGEXP '[[.slash.]][[:digit:]]' THEN
                        INSERT IGNORE INTO vuln_job_assets (job_id, job_type, asset_id) SELECT _jid, @jtype, host_id FROM host_net_reference WHERE net_id=UNHEX(@uuid);
                    END IF;
                END IF;
                SET  y = y + 1;
            END WHILE;
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;

    DROP TABLE IF EXISTS _tmp_jobs;
    DROP TABLE IF EXISTS _tmp_net;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure host_filter_delete_selections
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE host_filter_delete_selections()
BEGIN

    -- Delete the User Host Filters orphan rows.
    DELETE user_host_filter from user_host_filter left join sessions on session_id=id where id is null;

    -- Delete the User Component Filters orphan rows.
    DELETE user_component_filter from user_component_filter left join sessions on session_id=id where id is null;

END$$

DELIMITER ;


-- -----------------------------------------------------
-- procedure otx_get_top_pulses
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE otx_get_top_pulses(
    IN login VARCHAR(64), -- string like - 'admin'
    IN top INT, -- 0 no limit
    IN date_from VARCHAR(19), -- datetime - '2013-07-15 08:00:00'
    IN date_to VARCHAR(19) -- datetime - '2013-07-15 08:00:00'
)
BEGIN
    SELECT if(top>0,CONCAT(' LIMIT ',top),'') into @limit;
    SELECT if(date_from='' AND date_to='','',CONCAT(' AND timestamp BETWEEN "',date_from,'" AND "',date_to,'" ')) into @date_filter;
    SELECT host_where(login,'events') into @perms;
    -- SELECT if(date_from='' AND date_to='','','FORCE INDEX (timestamp)') into @forceindex;
    set @forceindex = '';

    SET @query = CONCAT('SELECT count(distinct event_id) as total,hex(otx_data.pulse_id) as pulse_id FROM alienvault_siem.otx_data, alienvault_siem.acid_event ',@forceindex,' WHERE acid_event.id=otx_data.event_id ',@date_filter,@perms,' GROUP BY otx_data.pulse_id ORDER BY total DESC',@limit);
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure otx_get_trend
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE otx_get_trend(
    IN login VARCHAR(64), -- string like - 'admin'
    IN pulse_id TEXT, -- id '0x555E5AD4B45FF57A89E5B43C,0x548B3F4D11D40843C065F6F2'
    IN date_from VARCHAR(19), -- datetime - '2013-07-15 08:00:00'
    IN date_to VARCHAR(19), -- datetime - '2013-07-15 08:00:00'
    IN tz VARCHAR(6) -- Timezone offset '+02:00'
)
BEGIN
    SELECT if(pulse_id='','',CONCAT(' AND pulse_id in (',pulse_id,') ')) into @pulse_id;
    SELECT if(date_from='' AND date_to='','',CONCAT(' AND timestamp BETWEEN "',date_from,'" AND "',date_to,'" ')) into @date_filter;
    SELECT if(tz='','+00:00',tz) into @tz;
    SELECT CONCAT(',date(convert_tz(timestamp,"+00:00","',@tz,'")) as day') into @freq;
    SELECT host_where(login,'events') into @perms;
    -- SELECT if(pulse_id='','FORCE INDEX (timestamp)','') into @forceindex;
    set @forceindex = '';

    SET @query = CONCAT('SELECT count(distinct event_id) as total',@freq,' FROM alienvault_siem.otx_data, alienvault_siem.acid_event ',@forceindex,' WHERE acid_event.id=otx_data.event_id ',@pulse_id,@date_filter,@perms,' GROUP BY day ORDER BY day DESC');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure otx_get_total_events
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE otx_get_total_events(
    IN login VARCHAR(64) -- string like - 'admin'
)
BEGIN
    SELECT host_where(login,'events') into @perms;

    IF @perms='' THEN
        SET @query = CONCAT('SELECT count(distinct event_id) as total FROM alienvault_siem.otx_data');
    ELSE
        SET @query = CONCAT('SELECT count(distinct event_id) as total FROM alienvault_siem.otx_data, alienvault_siem.acid_event WHERE acid_event.id=otx_data.event_id ',@perms);
    END IF;
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure otx_get_total_alarms
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE otx_get_total_alarms(
    IN login VARCHAR(64) -- string like - 'admin'
)
BEGIN
    SET @query = CONCAT('SELECT count(distinct event_id) as total FROM alienvault.alarm WHERE plugin_id=1505 AND plugin_sid=29998');
    PREPARE sql_query from @query;
    EXECUTE sql_query;
    DEALLOCATE PREPARE sql_query;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure _host_default_os
-- -----------------------------------------------------

DELIMITER $$
CREATE PROCEDURE _host_default_os()
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE _ip VARCHAR(32);
    DECLARE cur1 CURSOR FOR SELECT hex(ip) FROM _tmpos;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    CREATE TEMPORARY TABLE IF NOT EXISTS _tmpos (ip VARBINARY(16) NOT NULL, PRIMARY KEY ( ip )) ENGINE=MEMORY;
    INSERT IGNORE INTO _tmpos SELECT admin_ip FROM system;
    INSERT IGNORE INTO _tmpos SELECT vpn_ip FROM system;
    INSERT IGNORE INTO _tmpos SELECT ha_ip FROM system;
    INSERT IGNORE INTO _tmpos SELECT ip FROM sensor INNER JOIN sensor_properties ON sensor.id=sensor_properties.sensor_id WHERE sensor_properties.version<>'';
    INSERT IGNORE INTO _tmpos SELECT ip FROM server;

    OPEN cur1;

    REPEAT
        FETCH cur1 INTO _ip;
        IF NOT done THEN
            IF EXISTS (SELECT 1 FROM host_properties hp, host_ip hi WHERE hp.host_id=hi.host_id AND hi.ip=UNHEX(_ip) AND hp.property_ref=3 AND hp.source_id<>1) THEN
                DELETE hp FROM host_properties hp, host_ip hi WHERE hp.host_id=hi.host_id AND hi.ip=UNHEX(_ip) AND hp.property_ref=3;
                INSERT IGNORE INTO host_properties (host_id,property_ref,source_id,value) SELECT host_id,3,1,'AlienVault OS' FROM host_ip WHERE ip=UNHEX(_ip);
            END IF;
            IF NOT EXISTS (SELECT 1 FROM host_properties hp, host_ip hi WHERE hp.host_id=hi.host_id AND hi.ip=UNHEX(_ip) AND hp.property_ref=3) THEN
                INSERT IGNORE INTO host_properties (host_id,property_ref,source_id,value) SELECT host_id,3,1,'AlienVault OS' FROM host_ip WHERE ip=UNHEX(_ip);
            END IF;
        END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;

    DROP TABLE IF EXISTS _tmpos;
END$$

DELIMITER ;

DELIMITER $$
CREATE TRIGGER `set_similar_field` BEFORE INSERT ON `alarm` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
  IF NEW.similar='0000000000000000000000000000000000000000' THEN
     SET NEW.similar = sha1(NEW.backlog_id);
  END IF;
END
$$

CREATE TRIGGER `auto_incidents` AFTER INSERT ON `alarm` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN

  IF EXISTS

   (SELECT value FROM config where conf = "alarms_generate_incidents" and value = "yes")

  THEN

    IF NOT EXISTS (SELECT id FROM incident_alarm WHERE backlog_id = NEW.backlog_id)

    THEN
        SET @tmp_src_ip = NEW.src_ip;
        SET @tmp_dst_ip = NEW.dst_ip;
        SET @tmp_risk = NEW.risk;
        SET @title = 'Unknown Directive';
        IF EXISTS (SELECT 1 from plugin_sid where plugin_ctx=NEW.corr_engine_ctx AND plugin_id = NEW.plugin_id and sid = NEW.plugin_sid)
        THEN
            SET @title = (SELECT ifnull(TRIM(LEADING "directive_event:" FROM name),'Unknown Directive') as name from plugin_sid where plugin_ctx=NEW.corr_engine_ctx AND plugin_id = NEW.plugin_id and sid = NEW.plugin_sid LIMIT 1);
        END IF;

        SET @title = REPLACE(@title,"DST_IP", inet6_ntoa(NEW.dst_ip));
        SET @title = REPLACE(@title,"SRC_IP", inet6_ntoa(NEW.src_ip));
        SET @title = REPLACE(@title,"PROTOCOL", NEW.protocol);
        SET @title = REPLACE(@title,"SRC_PORT", NEW.src_port);
        SET @title = REPLACE(@title,"DST_PORT", NEW.dst_port);
        SET @title = CONCAT(@title, " (", inet6_ntoa(NEW.src_ip), ":", CAST(NEW.src_port AS CHAR), " -> ", inet6_ntoa(NEW.dst_ip), ":", CAST(NEW.dst_port AS CHAR), ")");

        SELECT value FROM config WHERE conf = 'incidents_incharge_default' into @incharge;
        IF (@incharge IS NULL OR @incharge = '') THEN
            SET @incharge = 'admin';
        END IF;

        INSERT INTO incident(uuid,ctx,title,date,ref,type_id,priority,status,last_update,in_charge,submitter,event_start,event_end) values (UNHEX(REPLACE(UUID(),'-','')), NEW.corr_engine_ctx, @title, NEW.timestamp, "Alarm", "Generic", NEW.risk, "Open", NOW(), @incharge, "admin", NEW.timestamp, NEW.timestamp);

        SET @last_incident_id = (SELECT LAST_INSERT_ID() FROM incident LIMIT 1);
        INSERT INTO incident_alarm(incident_id, src_ips, dst_ips, src_ports, dst_ports, backlog_id, event_id, alarm_group_id) values (@last_incident_id, inet6_ntoa(NEW.src_ip), inet6_ntoa(NEW.dst_ip), NEW.src_port, NEW.dst_port, NEW.backlog_id, NEW.event_id, 0);

        CALL incident_ticket_populate(@last_incident_id, @tmp_src_ip, @tmp_dst_ip, @tmp_risk);
    END IF;
  END IF;

END
$$

CREATE TRIGGER `host_INSERT` BEFORE INSERT ON `host`
FOR EACH ROW BEGIN
    SET NEW.created = utc_timestamp();
    SET NEW.updated = utc_timestamp();
END$$




CREATE TRIGGER `host_UPDATE` BEFORE UPDATE ON `host`
FOR EACH ROW BEGIN
    SET NEW.updated = utc_timestamp();
END$$

CREATE TRIGGER `net_DEL` AFTER DELETE ON `net` FOR EACH ROW
BEGIN
    IF @disable_calc_perms IS NULL THEN
        CALL update_users_affected_by_networks();
    END IF;
END$$

CREATE TRIGGER `host_properties_INSERT` AFTER INSERT ON `host_properties` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END$$

CREATE TRIGGER `host_properties_UPDATE` AFTER UPDATE ON `host_properties` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_properties_DELETE` AFTER DELETE ON `host_properties` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=OLD.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_scan_DELETE` AFTER DELETE ON `host_scan` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    UPDATE host SET updated=utc_timestamp() WHERE id=OLD.host_id;
END
$$

CREATE TRIGGER `host_scan_INSERT` AFTER INSERT ON `host_scan` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
END$$

CREATE TRIGGER `host_scan_UPDATE` AFTER UPDATE ON `host_scan` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
END
$$

CREATE TRIGGER `ncidrs_INS` AFTER INSERT ON `net_cidrs` FOR EACH ROW
BEGIN
    IF @disable_calc_perms IS NULL THEN
        CALL update_users_affected_by_networks();
    END IF;
END$$

CREATE TRIGGER `host_ip_INSERT` AFTER INSERT ON `host_ip` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_ip_UPDATE` AFTER UPDATE ON `host_ip` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_ip_DELETE` AFTER DELETE ON `host_ip` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=OLD.host_id;
    END IF;
END
$$

CREATE TRIGGER `hsr_INS` AFTER INSERT ON `host_sensor_reference` FOR EACH ROW
BEGIN
    IF @disable_calc_perms IS NULL THEN
        CALL update_users_affected_by_sensors(NEW.sensor_id);
    END IF;
END$$

CREATE TRIGGER `hsr_DEL` AFTER DELETE ON `host_sensor_reference` FOR EACH ROW
BEGIN
    IF @disable_calc_perms IS NULL THEN
        CALL update_users_affected_by_sensors(OLD.sensor_id);
    END IF;
END$$

CREATE TRIGGER `nsr_INS` AFTER INSERT ON `net_sensor_reference` FOR EACH ROW
BEGIN
    IF @disable_calc_perms IS NULL THEN
        CALL update_users_affected_by_sensors(NEW.sensor_id);
    END IF;
END$$

CREATE TRIGGER `nsr_DEL` AFTER DELETE ON `net_sensor_reference` FOR EACH ROW
BEGIN
    IF @disable_calc_perms IS NULL THEN
        CALL update_users_affected_by_sensors(OLD.sensor_id);
    END IF;
END$$

CREATE TRIGGER `host_services_RENAME` BEFORE INSERT ON `host_services` FOR EACH ROW
BEGIN
    IF NEW.port=40001 AND NEW.service='unknown' THEN
        SET NEW.service = IF(is_pro(),'usm server','ossim server');
    ELSEIF NEW.port=1241 AND NEW.service='unknown' THEN
        SET NEW.service = 'nessus';
    ELSEIF NEW.port=9390 AND (NEW.service='otp' OR NEW.service='unknown' OR NEW.service='OpenVAS' OR NEW.service='GVM' OR NEW.service='unknown-ssl') THEN
        SET NEW.service = 'gvmd';
    END IF;

    IF NEW.service='ossim server' THEN
        SET NEW.version = 'Open Source Security Information Management server';
    ELSEIF NEW.service='usm server' THEN
        SET NEW.version = 'Unified Security Management server';
    ELSEIF NEW.service='gvmd' THEN
        SET NEW.version = 'GVM 11';
    END IF;
END
$$

CREATE TRIGGER `host_services_INSERT` AFTER INSERT ON `host_services` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_services_UPDATE` AFTER UPDATE ON `host_services` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_services_DELETE` AFTER DELETE ON `host_services` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=OLD.host_id;
    END IF;
END$$

CREATE TRIGGER `host_types_INSERT` AFTER INSERT ON `host_types` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_types_UPDATE` AFTER UPDATE ON `host_types` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_types_DELETE` AFTER DELETE ON `host_types` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=OLD.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_software_INSERT` AFTER INSERT ON `host_software` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_software_UPDATE` AFTER UPDATE ON `host_software` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_software_DELETE` AFTER DELETE ON `host_software` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=OLD.host_id;
    END IF;
END$$

CREATE TRIGGER `host_vulnerability_INSERT` AFTER INSERT ON `host_vulnerability` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_vulnerability_UPDATE` AFTER UPDATE ON `host_vulnerability` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=NEW.host_id;
    END IF;
END
$$

CREATE TRIGGER `host_vulnerability_DELETE` AFTER DELETE ON `host_vulnerability` FOR EACH ROW
-- Edit trigger body code below this line. Do not edit lines above this one
BEGIN
    IF @disable_host_update IS NULL THEN
        UPDATE host SET updated=utc_timestamp() WHERE id=OLD.host_id;
    END IF;
END
$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
