#!/bin/bash
### BEGIN INIT INFO
# Provides:          ossim-framework
# Required-Start:    $remote_fs $network $syslog $local_fs
# Required-Stop:     $remote_fs $network $syslog $local_fs
# Should-Start:      mysql nagios3
# Should-Stop:       mysql nagios3
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop alienvault framework daemon
### END INIT INFO
#

set -e

. /lib/lsb/init-functions

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="OSSIM Framework"
NAME=ossim-framework
DAEMON=/usr/bin/$NAME
RUNDIR=/var/run
PIDFILE=$RUNDIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
RUNNING_INSTANCE_EXITS_E=2

# Gracefully exit if the package has been removed.
test -x $DAEMON || exit 0

# Read config file if it is present.
if [ -r /etc/default/$NAME ]
then
	. /etc/default/$NAME
fi

#
#	Function that starts the daemon/service.
#
d_start() {

   # check n pids in pidfile
   nintof=1
   if [ -f $PIDFILE ]; then
	nintof=`cat $PIDFILE | wc -w` > /dev/null
   fi

   # check n processes and if greater than 1, kill them
   ninp=`ps ax | grep $DAEMON| grep -v grep| wc -l` > /dev/null
   if [ $ninp -gt 1 ]; then
	ps ax | grep $DAEMON | grep -v grep| awk '{print$1}' |while read line ; do kill -9 $line; done
   fi

   # process running and: pidfile doesn't exists or pidfile is corrupt, rewrite pidfile
   if ps ax | grep $DAEMON | grep -v grep > /dev/null; then
	if ! [ -f $PIDFILE ] || [ $nintof -ne 1 ]; then
		echo `pidof -o %PPID -x $DAEMON` > $PIDFILE
		exit $RUNNING_INSTANCE_EXITS_E
	fi
   fi

   # check if an instance is running       
   if ps ax | grep $DAEMON | grep -v grep > /dev/null
        then
        log_daemon_msg "WARNING:Not starting $DESC, it has already been started."
        exit $RUNNING_INSTANCE_EXITS_E
   fi     
   
   # Check if /var/run is a symbolic link to determine the Debian configuration
   if [ -h $RUNDIR ]; then
      # Wheezy
      mount | grep "/run type" > /dev/null
      if [ "$?" = "1" ]; then
         log_daemon_msg "ERROR: /run is not mounted yet. The system is not stable. Skipping"
         exit 1
      fi
   else
      # Squeeze
      log_daemon_msg "ossim-server running on squeeze"
   fi


   # If pidfile exists, we remove it before start.    
   if [ -f $PIDFILE ]
      then
         rm -rf $PIDFILE         
   fi
   
   start-stop-daemon --quiet --start --pidfile $PIDFILE \
        --exec $DAEMON -- -d #> /dev/null

   #echo `pidof -o %PPID -x $DAEMON` > $PIDFILE
}


#
#	Function that stops the daemon/service.
#
d_stop() {

   # check n pids in pidfile
   nintof=1
   if [ -f $PIDFILE ]; then
        nintof=`cat $PIDFILE | wc -w` > /dev/null
   fi

   # check n processes and if greater than 1, kill them
   ninp=`ps ax | grep $DAEMON | grep -v grep | wc -l` > /dev/null
   if [ $ninp -gt 1 ]; then
        ps ax | grep $DAEMON | grep -v grep| awk '{print$1}' |while read line ; do kill -9 $line; done
   fi
     
   # use of --retry option:
   # signal/timeout/KILL/timeout
   # default signal: SIGTERM (15)
   
   # Check if an ossim-agent instance is running    
   # It's possible that PID file exists but the process is not running. 
   # For example, if ossim-framework was killed by kill -9
   
   if [ -f $PIDFILE ]           
   then 
      mypid=`cat $PIDFILE`
      if ps ax | grep $mypid |grep -v grep > /dev/null #check if pid is running
      then
 #        log_daemon_msg "[Stop] ossim-framework running, stopping it!"						
		 start-stop-daemon --stop \
            --retry TERM/5/KILL/5  \
            --pidfile $PIDFILE #> /dev/null    
		 returnValue=$?
		 # check return value
		 # If --oknodo was not specified  and  nothing  was done,  1 is returned
		 # If return value is 2, the process still running!!!
		 if [ $returnValue -gt 0 ]
	     then
	        #there's some error here. 
		    log_daemon_msg " start-stop-daemon -> ReturnValue: $returnValue - We can't kill ossim-framework please try to kill it running kill -9 ossim-framework"
		 else
		 #It's all ok, we can remove the pid file.
			if [ -f $PIDFILE ]
			then
			   rm -rf $PIDFILE         
			fi
		 fi 
      else
#         log_daemon_msg "PIDFILE exists but no process running... remove pidfile"
         rm -rf $PIDFILE
#--	  	
      fi
   fi		  
} 

d_restart() {
    d_stop
    sleep 1
    d_start
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    d_start
    log_end_msg $?     
	;;

#starting is only used by monit 
  starting)
   # rm -rf $PIDFILE
    log_daemon_msg "Starting $DESC" "$NAME"
    d_start
    log_end_msg $?  
        ;;

  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    d_stop        
    log_end_msg $?
    
	;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    d_restart 
    log_end_msg $?

	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 1
	;;
esac

exit 0
