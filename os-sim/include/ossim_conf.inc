<?php
/**
* ossim_conf.inc
*
* File ossim_conf.inc is used to:
*   - Retrieve AlienVault configuration from files and/or databases
*
*
* License:
*
* Copyright (c) 2003-2006 ossim.net
* Copyright (c) 2007-2013 AlienVault
* All rights reserved.
*
* This package is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; version 2 dated June, 1991.
* You may not use, modify or distribute this program under any other version
* of the GNU General Public License.
*
* This package is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this package; if not, write to the Free Software
* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
* MA  02110-1301  USA
*
*
* On Debian GNU/Linux systems, the complete text of the GNU General
* Public License can be found in `/usr/share/common-licenses/GPL-2'.
*
* Otherwise you can read it here: http://www.gnu.org/licenses/gpl-2.0.txt
*
* @package    ossim-framework\Configuration
* @autor      AlienVault INC
* @license    http://www.gnu.org/licenses/gpl-2.0.txt
* @copyright  2003-2006 ossim.net
* @copyright  2007-2013 AlienVault
* @link       https://www.alienvault.com/
*/


require_once __DIR__ . '/av_config.php';


/**
* Ossim_conf Class
*
* Class for retrieving AlienVault configuration from files and/or databases
*
* @package    ossim-framework\Configuration
* @autor      AlienVault INC
* @copyright  2007-2013 AlienVault
* @link       https://www.alienvault.com/ AlienVault web page
*/
class Ossim_conf
{
    /**
    * Errors generated by the class
    *
    * @var array
    * @access private
    */
    private $errors;

    /**
    * Configuration data from file
    *
    * @var array
    * @access private
    */
    private $conf;

    /**
    * Configuration data from database
    *
    * @var array
    * @access private
    */
    private $db_conf;


    /**
    * Class constructor
    *
    * This function sets up the class
    *
    * @param boolean  $read_db  [Optional] Read configuration data from database
    *
    */
    public function __construct($read_db = TRUE)
    {
        $this->conf    = array();

        $this->db_conf = array();

        $this->errors  = array();

        $this->get_conf_from_file(AV_CONF_FILE);

        if ($read_db == TRUE)
        {
            $this->get_conf_from_db();
        }
    }


    /**
     * This function creates an object instance
     *
     * @param boolean  $read_db  [Optional] Read configuration data from database
     * @return Ossim_conf
     */
    public static function factory($read_db = TRUE){
        return new Ossim_conf($read_db);
    }


    /**
    * This function returns the errors generated by the class
    *
    * @return array
    */
    public function get_errors()
    {
        return $this->errors;
    }


    /**
    * This function returns the configuration data from file
    *
    * @return array
    */
    public function get_conf_from_file()
    {
        $this->conf = array();

        if (!$fd = fopen(AV_CONF_FILE, "r"))
        {
            $this->errors[] = _('Error! Unable to get configuration data from').' ('.AV_CONF_FILE.')';
        }
        else
        {
            while (!feof($fd))
            {
                $line = fgets($fd, 2048);
                $line = trim($line);
                if (strncmp($line, "#", 1))
                {
                    $conf = explode('=', $line);
                    $type = trim($conf[0]);

                    if (isset($conf[1]))
                    {
                        $value = trim($conf[1]);
                        $this->conf["$type"] = $value;
                    }
                }
            }

            fclose($fd);
        }
    }


    /**
    * This function returns the configuration data from database
    *
    */
    public function get_conf_from_db()
    {
        $this->db_conf = array();

        $configuration = Config::factory();
        $_conf_list    = $configuration->get_list();

        if (is_array($_conf_list) && !empty($_conf_list))
        {
            $this->db_conf = $_conf_list;
        }
        else
        {
            $this->errors[] = _('Error! Unable to get configuration data from database');
        }
    }


    /**
    * This function gets the configuration value of $type
    *
    * @param string  $type  Config value
    *
    * @return string|null
    */
    public function get_conf($type)
    {
        if (array_key_exists($type, $this->conf))
        {
            return $this->conf[$type];
        }
        elseif (array_key_exists($type, $this->db_conf))
        {
            return $this->db_conf[$type];
        }

        $this->errors[] = _("Warning! Undefined config value $type");

        return NULL;
    }


    /**
     * This function gets the db configuration value of $type
     *
     * @param $type
     *
     * @return string|null
     */
    public function get_db_conf($type)
    {
        if (array_key_exists($type, $this->db_conf))
        {
            return $this->db_conf[$type];
        }

        $this->errors[] = _('Warning! Undefined config value '.$type);

        return NULL;
    }


    /**
    * This function checks if config value $type exists in a config file
    *
    * @param string  $type  Config value
    *
    * @return boolean
    */
    public function is_in_file($type)
    {
        return (array_key_exists($type, $this->conf));
    }
}

/* End of file ossim_conf.inc */
/* Location: ../include/ossim_conf.inc */
